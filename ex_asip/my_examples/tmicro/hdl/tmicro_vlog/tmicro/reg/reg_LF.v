
// File generated by Go version O-2018.09#f5599cac26#190121, Tue May 28 10:45:21 2024
// Copyright 2014-2018 Synopsys, Inc. All rights reserved.
// go -B -I../lib -F -D__tct_patch__=300 -Verilog -otmicro_vlog -cgo_options.cfg -Itmicro_vlog/tmp_pdg -updg -updg_controller tmicro



`timescale 1ns/1ps

// module reg_LF : reg_LF
module reg_LF
  // synopsys translate_off
  #(parameter reg_log = 1'b1,
    parameter reg_log_name = "LF"
  )
  // synopsys translate_on
  ( input            reset,
    input            clock,
    input            ohe_selector_E1,
    input            LF_lfw_cntrl_nxtpc_pdg_en_in, // std_logic
    input      [1:0] lfw_in, // uint2
    output reg [1:0] lfr_out, // uint2
    output reg [1:0] lfra_out // uint2
  );


  reg [1:0] reg_val;

  reg [1:0] reg_val_next;

  reg  reg_write_enab;


  // synopsys translate_off

  reg reg_write_log;
  reg old_reg_write_log;

  always @ (negedge clock or posedge reset)
  begin : p_reg_LF_log


    if (reset)
    begin
      old_reg_write_log <= 1'b0;
    end
    else
    begin
      if (reg_log)
      begin
        if (reg_write_log !=old_reg_write_log)
        begin
          $fdisplay(tmicro.inst_reg_PC.log_file, "%s = %0d", reg_log_name, reg_val);
        end
        old_reg_write_log <= reg_write_log;
      end
    end
  end
  // synopsys translate_on

  always @ (*)
  begin : p_read_reg_LF

    // lfr_out = 0;
    // lfra_out = 0;

    // (lfr_rd_LF_E1)
    // [control.n:177][control.n:211]
    lfr_out = reg_val;

    // (lfra_rd_LF)
    lfra_out = reg_val;

  end

  always @ (*)
  begin : p_write_combin_reg_LF

    reg_write_enab = 0;
    reg_val_next = 0;


    // (LF_wr_lfw_LF_lfw_cntrl_nxtpc_pdg_en)
    if (LF_lfw_cntrl_nxtpc_pdg_en_in)
    begin
      reg_write_enab = 1'b1;
      reg_val_next = lfw_in;
    end

    if (ohe_selector_E1) // (LF_wr_lfw_E1)
    begin
      // [control.n:177][control.n:211]
      reg_write_enab = 1'b1;
      reg_val_next = lfw_in;
    end

  end

  always @ (posedge clock or posedge reset)
  begin : p_write_reg_LF

    if (reset)
    begin
      // synopsys translate_off
      reg_write_log <= 1'b0;
      // synopsys translate_on
      reg_val <= 2'd3;
    end
    else
    begin
      if (reg_write_enab)
      begin
        reg_val <= reg_val_next;
        // synopsys translate_off
        reg_write_log <= ~reg_write_log;
        // synopsys translate_on
      end
    end
  end

endmodule
