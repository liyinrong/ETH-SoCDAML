
// File generated by Go version O-2018.09#f5599cac26#190121, Tue May 28 10:45:21 2024
// Copyright 2014-2018 Synopsys, Inc. All rights reserved.
// go -B -I../lib -F -D__tct_patch__=300 -Verilog -otmicro_vlog -cgo_options.cfg -Itmicro_vlog/tmp_pdg -updg -updg_controller tmicro



`timescale 1ns/1ps

// module reg_CND : reg_CND
module reg_CND
  // synopsys translate_off
  #(parameter reg_log = 1'b1,
    parameter reg_log_name = "CND"
  )
  // synopsys translate_on
  ( input            reset,
    input            clock,
    input            ohe_selector_E1,
    input      [2:0] bin_selector_E1,
    input            __pm_read_w_SR_el_in, // bool
    input            cndw_in, // bool
    input            dm_read_rec1_in, // bool
    input            wbus_rec8_in, // bool
    output reg       __pm_write_r_SR_el_out, // bool
    output reg       cndr_out, // bool
    output reg       dm_write_rec1_out, // bool
    output reg       wbus_rec1_out // bool
  );


  reg reg_val;

  reg reg_val_next;

  reg  reg_write_enab;


  // synopsys translate_off

  reg reg_write_log;
  reg old_reg_write_log;

  always @ (negedge clock or posedge reset)
  begin : p_reg_CND_log


    if (reset)
    begin
      old_reg_write_log <= 1'b0;
    end
    else
    begin
      if (reg_log)
      begin
        if (reg_write_log !=old_reg_write_log)
        begin
          $fdisplay(tmicro.inst_reg_PC.log_file, "%s = %0d", reg_log_name, reg_val);
        end
        old_reg_write_log <= reg_write_log;
      end
    end
  end
  // synopsys translate_on

  always @ (*)
  begin : p_read_reg_CND

    // __pm_write_r_SR_el_out = 0;
    cndr_out = 1'b0; // hw_init
                     // dm_write_rec1_out = 0;
                     // wbus_rec1_out = 0;

    // (wbus_rd_SR_E1_t0)
    // [move.n:48][move.n:96][control.n:225][dma.n:51](tmicro.n:132)
    wbus_rec1_out = reg_val;

    // (dm_write_rd_SR_E1_t0)
    // [load_store.n:57][load_store.n:99](tmicro.n:132)
    dm_write_rec1_out = reg_val;

    // (__pm_write_r_SR_rd_SR_E1_t0)
    // [load_store.n:130](tmicro.n:132)
    __pm_write_r_SR_el_out = reg_val;

    if (ohe_selector_E1) // (cndr_rd_CND_E1)
    begin
      // [alu.n:155][control.n:95][control.n:121]
      cndr_out = reg_val;
    end

  end

  always @ (*)
  begin : p_write_combin_reg_CND

    reg_write_enab = 0;
    reg_val_next = 0;


    case (bin_selector_E1)
      3'b001 : // (CND_wr_cndw_E1)
      begin
        // [alu.n:89][alu.n:90][alu.n:91][alu.n:92][alu.n:93][alu.n:94][alu.n:95][alu.n:96][alu.n:110][alu.n:111]
        reg_write_enab = 1'b1;
        reg_val_next = cndw_in;
      end
      3'b010 : // (SR_wr_wbus_E1_t0)
      begin
        // [move.n:48][move.n:55][move.n:62][move.n:106][control.n:238][dma.n:70](tmicro.n:132)
        reg_write_enab = 1'b1;
        reg_val_next = wbus_rec8_in;
      end
      3'b011 : // (SR_wr_dm_read_E1_t0)
      begin
        // [load_store.n:51][load_store.n:93](tmicro.n:132)
        reg_write_enab = 1'b1;
        reg_val_next = dm_read_rec1_in;
      end
      3'b100 : // (SR_wr___pm_read_w_SR_E1_t0)
      begin
        // [load_store.n:116](tmicro.n:132)
        reg_write_enab = 1'b1;
        reg_val_next = __pm_read_w_SR_el_in;
      end
      default :
        ; // null
    endcase

  end

  always @ (posedge clock or posedge reset)
  begin : p_write_reg_CND

    if (reset)
    begin
      // synopsys translate_off
      reg_write_log <= 1'b0;
      // synopsys translate_on
      reg_val <= 1'd0;
    end
    else
    begin
      if (reg_write_enab)
      begin
        reg_val <= reg_val_next;
        // synopsys translate_off
        reg_write_log <= ~reg_write_log;
        // synopsys translate_on
      end
    end
  end

endmodule
