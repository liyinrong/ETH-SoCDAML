
// File generated by pdg version O-2018.09#f5599cac26#190121, Tue May 28 10:45:20 2024
// Copyright 2014-2018 Synopsys, Inc. All rights reserved.
// pdg -B -I../lib -I../lib/isg -D__go__ -Verilog -cgo_options.cfg -D__tct_patch__=300 +wtmicro_vlog/tmp_pdg tmicro


task word_add_word_word
  ( output reg signed [15:0] result,
    input      signed [15:0] a,
    input      signed [15:0] b
  );
  begin : word_add_word_word_task
    result = a + b;
  end
endtask

task word_add_word_word_uint1
  ( output reg signed [15:0] result,
    input      signed [15:0] a,
    input      signed [15:0] b,
    output reg               co
  );
  begin : word_add_word_word_uint1_task
    reg signed [16:0] aa;
    reg signed [16:0] bb;
    reg signed [16:0] rr;
    aa = $signed({1'b0, $unsigned(a)});
    bb = $signed({1'b0, $unsigned(b)});
    rr = aa + bb;
    co = rr[16];
    result = $signed(rr[15 : 0]);
  end
endtask

task word_addc_word_word_uint1_uint1
  ( output reg signed [15:0] result,
    input      signed [15:0] a,
    input      signed [15:0] b,
    input                    ci,
    output reg               co
  );
  begin : word_addc_word_word_uint1_uint1_task
    reg signed [16:0] aa;
    reg signed [16:0] bb;
    reg signed [16:0] rr;
    aa = $signed({1'b0, $unsigned(a)});
    bb = $signed({1'b0, $unsigned(b)});
    rr = aa + bb + $signed({16'b0000000000000000, ci});
    co = rr[16];
    result = $signed(rr[15 : 0]);
  end
endtask

task word_sub_word_word_uint1
  ( output reg signed [15:0] result,
    input      signed [15:0] a,
    input      signed [15:0] b,
    output reg               co
  );
  begin : word_sub_word_word_uint1_task
    reg signed [16:0] aa;
    reg signed [16:0] bb;
    reg signed [16:0] rr;
    aa = $signed({1'b0, $unsigned(a)});
    bb = $signed({1'b0, ~$unsigned(b)});
    rr = aa + bb + 17'sb00000000000000001;
    co = rr[16];
    result = $signed(rr[15 : 0]);
  end
endtask

task word_subb_word_word_uint1_uint1
  ( output reg signed [15:0] result,
    input      signed [15:0] a,
    input      signed [15:0] b,
    input                    ci,
    output reg               co
  );
  begin : word_subb_word_word_uint1_uint1_task
    reg signed [16:0] aa;
    reg signed [16:0] bb;
    reg signed [16:0] rr;
    aa = $signed({1'b0, $unsigned(a)});
    bb = $signed({1'b0, ~$unsigned(b)});
    rr = aa + bb + $signed({16'b0000000000000000, ci});
    co = rr[16];
    result = $signed(rr[15 : 0]);
  end
endtask

task word_andw_word_word
  ( output reg signed [15:0] result,
    input      signed [15:0] a,
    input      signed [15:0] b
  );
  begin : word_andw_word_word_task
    result = a & b;
  end
endtask

task word_orw_word_word
  ( output reg signed [15:0] result,
    input      signed [15:0] a,
    input      signed [15:0] b
  );
  begin : word_orw_word_word_task
    result = a | b;
  end
endtask

task word_xorw_word_word
  ( output reg signed [15:0] result,
    input      signed [15:0] a,
    input      signed [15:0] b
  );
  begin : word_xorw_word_word_task
    result = a ^ b;
  end
endtask

task word_minw_word_word
  ( output reg signed [15:0] result,
    input      signed [15:0] a,
    input      signed [15:0] b
  );
  begin : word_minw_word_word_task
    if (a < b)
    begin
      result = a;
    end
    else
    begin
      result = b;
    end
  end
endtask

task word_maxw_word_word
  ( output reg signed [15:0] result,
    input      signed [15:0] a,
    input      signed [15:0] b
  );
  begin : word_maxw_word_word_task
    if (a > b)
    begin
      result = a;
    end
    else
    begin
      result = b;
    end
  end
endtask

task word_select_bool_word_word
  ( output reg signed [15:0] result,
    input                    c,
    input      signed [15:0] a,
    input      signed [15:0] b
  );
  begin : word_select_bool_word_word_task
    if (c)
    begin
      result = a;
    end
    else
    begin
      result = b;
    end
  end
endtask

task word_ext_abs_word
  ( output reg signed [15:0] result,
    input      signed [15:0] a
  );
  begin : word_ext_abs_word_task
    reg signed [15:0] aa;
    aa = a;
    if (aa < 16'sb0000000000000000)
    begin
      aa = $signed(~$unsigned(a) + 16'b0000000000000001);
    end
    result = aa;
  end
endtask

task bool_lts_word_word
  ( output reg               result,
    input      signed [15:0] a,
    input      signed [15:0] b
  );
  begin : bool_lts_word_word_task
    if (a < b)
    begin
      result = 1'b1;
    end
    else
    begin
      result = 1'b0;
    end
  end
endtask

task bool_ltu_word_word
  ( output reg               result,
    input      signed [15:0] a,
    input      signed [15:0] b
  );
  begin : bool_ltu_word_word_task
    if ($unsigned(a) < $unsigned(b))
    begin
      result = 1'b1;
    end
    else
    begin
      result = 1'b0;
    end
  end
endtask

task bool_les_word_word
  ( output reg               result,
    input      signed [15:0] a,
    input      signed [15:0] b
  );
  begin : bool_les_word_word_task
    if (a <= b)
    begin
      result = 1'b1;
    end
    else
    begin
      result = 1'b0;
    end
  end
endtask

task bool_leu_word_word
  ( output reg               result,
    input      signed [15:0] a,
    input      signed [15:0] b
  );
  begin : bool_leu_word_word_task
    if ($unsigned(a) <= $unsigned(b))
    begin
      result = 1'b1;
    end
    else
    begin
      result = 1'b0;
    end
  end
endtask

task bool_gts_word_word
  ( output reg               result,
    input      signed [15:0] a,
    input      signed [15:0] b
  );
  begin : bool_gts_word_word_task
    if (a > b)
    begin
      result = 1'b1;
    end
    else
    begin
      result = 1'b0;
    end
  end
endtask

task bool_gtu_word_word
  ( output reg               result,
    input      signed [15:0] a,
    input      signed [15:0] b
  );
  begin : bool_gtu_word_word_task
    if ($unsigned(a) > $unsigned(b))
    begin
      result = 1'b1;
    end
    else
    begin
      result = 1'b0;
    end
  end
endtask

task bool_ges_word_word
  ( output reg               result,
    input      signed [15:0] a,
    input      signed [15:0] b
  );
  begin : bool_ges_word_word_task
    if (a >= b)
    begin
      result = 1'b1;
    end
    else
    begin
      result = 1'b0;
    end
  end
endtask

task bool_geu_word_word
  ( output reg               result,
    input      signed [15:0] a,
    input      signed [15:0] b
  );
  begin : bool_geu_word_word_task
    if ($unsigned(a) >= $unsigned(b))
    begin
      result = 1'b1;
    end
    else
    begin
      result = 1'b0;
    end
  end
endtask

task bool_eq_word_word
  ( output reg               result,
    input      signed [15:0] a,
    input      signed [15:0] b
  );
  begin : bool_eq_word_word_task
    if (a == b)
    begin
      result = 1'b1;
    end
    else
    begin
      result = 1'b0;
    end
  end
endtask

task bool_ne_word_word
  ( output reg               result,
    input      signed [15:0] a,
    input      signed [15:0] b
  );
  begin : bool_ne_word_word_task
    if (a != b)
    begin
      result = 1'b1;
    end
    else
    begin
      result = 1'b0;
    end
  end
endtask

task word_complement_word
  ( output reg signed [15:0] result,
    input      signed [15:0] a
  );
  begin : word_complement_word_task
    result = ~a;
  end
endtask

task word_extend_sign_word
  ( output reg signed [15:0] result,
    input      signed [15:0] a
  );
  begin : word_extend_sign_word_task
    if (a < 16'sb0000000000000000)
    begin
      result = 16'sb1111111111111111;
    end
    else
    begin
      result = 16'sb0000000000000000;
    end
  end
endtask

task word_asr_word_word
  ( output reg signed [15:0] result,
    input      signed [15:0] a,
    input      signed [15:0] f
  );
  begin : word_asr_word_word_task
    result = (a >>> $unsigned($signed(f[3 : 0])));
  end
endtask

task word_lsr_word_word
  ( output reg signed [15:0] result,
    input      signed [15:0] a,
    input      signed [15:0] f
  );
  begin : word_lsr_word_word_task
    reg        [15:0] rtrn;
    rtrn = ($unsigned(a) >> $unsigned($signed(f[3 : 0])));
    result = $signed(rtrn);
  end
endtask

task word_lsl_word_word
  ( output reg signed [15:0] result,
    input      signed [15:0] a,
    input      signed [15:0] f
  );
  begin : word_lsl_word_word_task
    reg        [15:0] rtrn;
    rtrn = $unsigned(a) << $unsigned($signed(f[3 : 0]));
    result = $signed(rtrn);
  end
endtask

task void_mulss_word_word_word_word
  ( input      signed [15:0] a,
    input      signed [15:0] b,
    output reg signed [15:0] rl,
    output reg signed [15:0] rh
  );
  begin : void_mulss_word_word_word_word_task
    reg signed [31:0] p;
    p = a * b;
    rl = $signed(p[15 : 0]);
    rh = $signed(p[31 : 16]);
  end
endtask

task void_muluu_word_word_word_word
  ( input      signed [15:0] a,
    input      signed [15:0] b,
    output reg signed [15:0] rl,
    output reg signed [15:0] rh
  );
  begin : void_muluu_word_word_word_word_task
    reg        [31:0] p;
    reg signed [31:0] p_0;
    p = $unsigned(a) * $unsigned(b);
    p_0 = $signed(p);
    rl = $signed(p_0[15 : 0]);
    rh = $signed(p_0[31 : 16]);
  end
endtask

task void_divstep_word_word_word_word_word
  ( input      signed [15:0] a,
    input      signed [15:0] q,
    input      signed [15:0] m,
    output reg signed [15:0] new_q,
    output reg signed [15:0] new_m
  );
  begin : void_divstep_word_word_word_word_word_task
    reg        [31:0] mq;
    reg        [31:0] mq_0;
    reg        [15:0] mq_el31to16;
    mq = $unsigned($signed({m , q}));
    mq_0 = mq;
    mq = mq_0 << 1'b1;
    if (mq[31 : 16] >= $unsigned(a))
    begin
      mq_el31to16 = mq[31 : 16];
      mq[31 : 16] = mq_el31to16 - $unsigned(a);
      mq[0] = 1'b1;
    end
    new_q = $signed(mq[15 : 0]);
    new_m = $signed(mq[31 : 16]);
  end
endtask

task void_nop
  ( );
  begin : void_nop_task
  end
endtask

task addr_incr_addr
  ( output reg        [15:0] result,
    input             [15:0] a
  );
  begin : addr_incr_addr_task
    result = a + 16'b0000000000000001;
  end
endtask

task uint2_incr_uint2
  ( output reg         [1:0] result,
    input              [1:0] a
  );
  begin : uint2_incr_uint2_task
    result = a + 2'b01;
  end
endtask

task uint2_decr_uint2
  ( output reg         [1:0] result,
    input              [1:0] a
  );
  begin : uint2_decr_uint2_task
    result = a - 2'b01;
  end
endtask

task void_halt
  ( );
  begin : void_halt_task
  end
endtask
