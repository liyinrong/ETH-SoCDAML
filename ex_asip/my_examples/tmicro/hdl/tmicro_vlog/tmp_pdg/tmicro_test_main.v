
// File generated by pdg version O-2018.09#f5599cac26#190121, Tue May 28 10:45:21 2024
// Copyright 2014-2018 Synopsys, Inc. All rights reserved.
// pdg -B -I../lib -I../lib/isg -D__go__ -Verilog -cgo_options.cfg -D__tct_patch__=300 +wtmicro_vlog/tmp_pdg tmicro


module test_driver;
  integer file, out_file, r;
  reg [2500*8:1] line, command;

`include "tmicro_primitives.v"

  task test_word_add_word_word;
    begin : test_word_add_word_word_task
      reg signed [15:0] __pdg__return_sig_expected;
      reg signed [15:0] __pdg__return_sig_found;
      reg signed [15:0] a;
      reg signed [15:0] b;
      r = $sscanf(line, "%s %h %h %h ", command, a, b, __pdg__return_sig_expected);
      word_add_word_word(__pdg__return_sig_found, a, b);
      if (__pdg__return_sig_expected !== __pdg__return_sig_found)
      begin
        $display("FAILURE: %s %h %h %h , expected %h, found %h", "word_add_word_word", a, b, __pdg__return_sig_expected, __pdg__return_sig_expected, __pdg__return_sig_found);
        $fdisplay(out_file, "%s %h %h %h // expected %h, found %h", "word_add_word_word", a, b, __pdg__return_sig_expected, __pdg__return_sig_expected, __pdg__return_sig_found);
      end
    end
  endtask

  task test_word_add_word_word_uint1;
    begin : test_word_add_word_word_uint1_task
      reg signed [15:0] __pdg__return_sig_expected;
      reg signed [15:0] __pdg__return_sig_found;
      reg signed [15:0] a;
      reg signed [15:0] b;
      reg               co_expected;
      reg               co_found;
      r = $sscanf(line, "%s %h %h %h %h ", command, a, b, __pdg__return_sig_expected, co_expected);
      word_add_word_word_uint1(__pdg__return_sig_found, a, b, co_found);
      if (__pdg__return_sig_expected !== __pdg__return_sig_found)
      begin
        $display("FAILURE: %s %h %h %h %h , expected %h, found %h", "word_add_word_word_uint1", a, b, __pdg__return_sig_expected, co_expected, __pdg__return_sig_expected, __pdg__return_sig_found);
        $fdisplay(out_file, "%s %h %h %h %h // expected %h, found %h", "word_add_word_word_uint1", a, b, __pdg__return_sig_expected, co_expected, __pdg__return_sig_expected, __pdg__return_sig_found);
      end
      if (co_expected !== co_found)
      begin
        $display("FAILURE: %s %h %h %h %h , expected %h, found %h", "word_add_word_word_uint1", a, b, __pdg__return_sig_expected, co_expected, co_expected, co_found);
        $fdisplay(out_file, "%s %h %h %h %h // expected %h, found %h", "word_add_word_word_uint1", a, b, __pdg__return_sig_expected, co_expected, co_expected, co_found);
      end
    end
  endtask

  task test_word_addc_word_word_uint1_uint1;
    begin : test_word_addc_word_word_uint1_uint1_task
      reg signed [15:0] __pdg__return_sig_expected;
      reg signed [15:0] __pdg__return_sig_found;
      reg signed [15:0] a;
      reg signed [15:0] b;
      reg               ci;
      reg               co_expected;
      reg               co_found;
      r = $sscanf(line, "%s %h %h %h %h %h ", command, a, b, ci, __pdg__return_sig_expected, co_expected);
      word_addc_word_word_uint1_uint1(__pdg__return_sig_found, a, b, ci, co_found);
      if (__pdg__return_sig_expected !== __pdg__return_sig_found)
      begin
        $display("FAILURE: %s %h %h %h %h %h , expected %h, found %h", "word_addc_word_word_uint1_uint1", a, b, ci, __pdg__return_sig_expected, co_expected, __pdg__return_sig_expected, __pdg__return_sig_found);
        $fdisplay(out_file, "%s %h %h %h %h %h // expected %h, found %h", "word_addc_word_word_uint1_uint1", a, b, ci, __pdg__return_sig_expected, co_expected, __pdg__return_sig_expected, __pdg__return_sig_found);
      end
      if (co_expected !== co_found)
      begin
        $display("FAILURE: %s %h %h %h %h %h , expected %h, found %h", "word_addc_word_word_uint1_uint1", a, b, ci, __pdg__return_sig_expected, co_expected, co_expected, co_found);
        $fdisplay(out_file, "%s %h %h %h %h %h // expected %h, found %h", "word_addc_word_word_uint1_uint1", a, b, ci, __pdg__return_sig_expected, co_expected, co_expected, co_found);
      end
    end
  endtask

  task test_word_sub_word_word_uint1;
    begin : test_word_sub_word_word_uint1_task
      reg signed [15:0] __pdg__return_sig_expected;
      reg signed [15:0] __pdg__return_sig_found;
      reg signed [15:0] a;
      reg signed [15:0] b;
      reg               co_expected;
      reg               co_found;
      r = $sscanf(line, "%s %h %h %h %h ", command, a, b, __pdg__return_sig_expected, co_expected);
      word_sub_word_word_uint1(__pdg__return_sig_found, a, b, co_found);
      if (__pdg__return_sig_expected !== __pdg__return_sig_found)
      begin
        $display("FAILURE: %s %h %h %h %h , expected %h, found %h", "word_sub_word_word_uint1", a, b, __pdg__return_sig_expected, co_expected, __pdg__return_sig_expected, __pdg__return_sig_found);
        $fdisplay(out_file, "%s %h %h %h %h // expected %h, found %h", "word_sub_word_word_uint1", a, b, __pdg__return_sig_expected, co_expected, __pdg__return_sig_expected, __pdg__return_sig_found);
      end
      if (co_expected !== co_found)
      begin
        $display("FAILURE: %s %h %h %h %h , expected %h, found %h", "word_sub_word_word_uint1", a, b, __pdg__return_sig_expected, co_expected, co_expected, co_found);
        $fdisplay(out_file, "%s %h %h %h %h // expected %h, found %h", "word_sub_word_word_uint1", a, b, __pdg__return_sig_expected, co_expected, co_expected, co_found);
      end
    end
  endtask

  task test_word_subb_word_word_uint1_uint1;
    begin : test_word_subb_word_word_uint1_uint1_task
      reg signed [15:0] __pdg__return_sig_expected;
      reg signed [15:0] __pdg__return_sig_found;
      reg signed [15:0] a;
      reg signed [15:0] b;
      reg               ci;
      reg               co_expected;
      reg               co_found;
      r = $sscanf(line, "%s %h %h %h %h %h ", command, a, b, ci, __pdg__return_sig_expected, co_expected);
      word_subb_word_word_uint1_uint1(__pdg__return_sig_found, a, b, ci, co_found);
      if (__pdg__return_sig_expected !== __pdg__return_sig_found)
      begin
        $display("FAILURE: %s %h %h %h %h %h , expected %h, found %h", "word_subb_word_word_uint1_uint1", a, b, ci, __pdg__return_sig_expected, co_expected, __pdg__return_sig_expected, __pdg__return_sig_found);
        $fdisplay(out_file, "%s %h %h %h %h %h // expected %h, found %h", "word_subb_word_word_uint1_uint1", a, b, ci, __pdg__return_sig_expected, co_expected, __pdg__return_sig_expected, __pdg__return_sig_found);
      end
      if (co_expected !== co_found)
      begin
        $display("FAILURE: %s %h %h %h %h %h , expected %h, found %h", "word_subb_word_word_uint1_uint1", a, b, ci, __pdg__return_sig_expected, co_expected, co_expected, co_found);
        $fdisplay(out_file, "%s %h %h %h %h %h // expected %h, found %h", "word_subb_word_word_uint1_uint1", a, b, ci, __pdg__return_sig_expected, co_expected, co_expected, co_found);
      end
    end
  endtask

  task test_word_andw_word_word;
    begin : test_word_andw_word_word_task
      reg signed [15:0] __pdg__return_sig_expected;
      reg signed [15:0] __pdg__return_sig_found;
      reg signed [15:0] a;
      reg signed [15:0] b;
      r = $sscanf(line, "%s %h %h %h ", command, a, b, __pdg__return_sig_expected);
      word_andw_word_word(__pdg__return_sig_found, a, b);
      if (__pdg__return_sig_expected !== __pdg__return_sig_found)
      begin
        $display("FAILURE: %s %h %h %h , expected %h, found %h", "word_andw_word_word", a, b, __pdg__return_sig_expected, __pdg__return_sig_expected, __pdg__return_sig_found);
        $fdisplay(out_file, "%s %h %h %h // expected %h, found %h", "word_andw_word_word", a, b, __pdg__return_sig_expected, __pdg__return_sig_expected, __pdg__return_sig_found);
      end
    end
  endtask

  task test_word_orw_word_word;
    begin : test_word_orw_word_word_task
      reg signed [15:0] __pdg__return_sig_expected;
      reg signed [15:0] __pdg__return_sig_found;
      reg signed [15:0] a;
      reg signed [15:0] b;
      r = $sscanf(line, "%s %h %h %h ", command, a, b, __pdg__return_sig_expected);
      word_orw_word_word(__pdg__return_sig_found, a, b);
      if (__pdg__return_sig_expected !== __pdg__return_sig_found)
      begin
        $display("FAILURE: %s %h %h %h , expected %h, found %h", "word_orw_word_word", a, b, __pdg__return_sig_expected, __pdg__return_sig_expected, __pdg__return_sig_found);
        $fdisplay(out_file, "%s %h %h %h // expected %h, found %h", "word_orw_word_word", a, b, __pdg__return_sig_expected, __pdg__return_sig_expected, __pdg__return_sig_found);
      end
    end
  endtask

  task test_word_xorw_word_word;
    begin : test_word_xorw_word_word_task
      reg signed [15:0] __pdg__return_sig_expected;
      reg signed [15:0] __pdg__return_sig_found;
      reg signed [15:0] a;
      reg signed [15:0] b;
      r = $sscanf(line, "%s %h %h %h ", command, a, b, __pdg__return_sig_expected);
      word_xorw_word_word(__pdg__return_sig_found, a, b);
      if (__pdg__return_sig_expected !== __pdg__return_sig_found)
      begin
        $display("FAILURE: %s %h %h %h , expected %h, found %h", "word_xorw_word_word", a, b, __pdg__return_sig_expected, __pdg__return_sig_expected, __pdg__return_sig_found);
        $fdisplay(out_file, "%s %h %h %h // expected %h, found %h", "word_xorw_word_word", a, b, __pdg__return_sig_expected, __pdg__return_sig_expected, __pdg__return_sig_found);
      end
    end
  endtask

  task test_word_minw_word_word;
    begin : test_word_minw_word_word_task
      reg signed [15:0] __pdg__return_sig_expected;
      reg signed [15:0] __pdg__return_sig_found;
      reg signed [15:0] a;
      reg signed [15:0] b;
      r = $sscanf(line, "%s %h %h %h ", command, a, b, __pdg__return_sig_expected);
      word_minw_word_word(__pdg__return_sig_found, a, b);
      if (__pdg__return_sig_expected !== __pdg__return_sig_found)
      begin
        $display("FAILURE: %s %h %h %h , expected %h, found %h", "word_minw_word_word", a, b, __pdg__return_sig_expected, __pdg__return_sig_expected, __pdg__return_sig_found);
        $fdisplay(out_file, "%s %h %h %h // expected %h, found %h", "word_minw_word_word", a, b, __pdg__return_sig_expected, __pdg__return_sig_expected, __pdg__return_sig_found);
      end
    end
  endtask

  task test_word_maxw_word_word;
    begin : test_word_maxw_word_word_task
      reg signed [15:0] __pdg__return_sig_expected;
      reg signed [15:0] __pdg__return_sig_found;
      reg signed [15:0] a;
      reg signed [15:0] b;
      r = $sscanf(line, "%s %h %h %h ", command, a, b, __pdg__return_sig_expected);
      word_maxw_word_word(__pdg__return_sig_found, a, b);
      if (__pdg__return_sig_expected !== __pdg__return_sig_found)
      begin
        $display("FAILURE: %s %h %h %h , expected %h, found %h", "word_maxw_word_word", a, b, __pdg__return_sig_expected, __pdg__return_sig_expected, __pdg__return_sig_found);
        $fdisplay(out_file, "%s %h %h %h // expected %h, found %h", "word_maxw_word_word", a, b, __pdg__return_sig_expected, __pdg__return_sig_expected, __pdg__return_sig_found);
      end
    end
  endtask

  task test_word_select_bool_word_word;
    begin : test_word_select_bool_word_word_task
      reg signed [15:0] __pdg__return_sig_expected;
      reg signed [15:0] __pdg__return_sig_found;
      reg               c;
      reg signed [15:0] a;
      reg signed [15:0] b;
      r = $sscanf(line, "%s %h %h %h %h ", command, c, a, b, __pdg__return_sig_expected);
      word_select_bool_word_word(__pdg__return_sig_found, c, a, b);
      if (__pdg__return_sig_expected !== __pdg__return_sig_found)
      begin
        $display("FAILURE: %s %h %h %h %h , expected %h, found %h", "word_select_bool_word_word", c, a, b, __pdg__return_sig_expected, __pdg__return_sig_expected, __pdg__return_sig_found);
        $fdisplay(out_file, "%s %h %h %h %h // expected %h, found %h", "word_select_bool_word_word", c, a, b, __pdg__return_sig_expected, __pdg__return_sig_expected, __pdg__return_sig_found);
      end
    end
  endtask

  task test_word_ext_abs_word;
    begin : test_word_ext_abs_word_task
      reg signed [15:0] __pdg__return_sig_expected;
      reg signed [15:0] __pdg__return_sig_found;
      reg signed [15:0] a;
      r = $sscanf(line, "%s %h %h ", command, a, __pdg__return_sig_expected);
      word_ext_abs_word(__pdg__return_sig_found, a);
      if (__pdg__return_sig_expected !== __pdg__return_sig_found)
      begin
        $display("FAILURE: %s %h %h , expected %h, found %h", "word_ext_abs_word", a, __pdg__return_sig_expected, __pdg__return_sig_expected, __pdg__return_sig_found);
        $fdisplay(out_file, "%s %h %h // expected %h, found %h", "word_ext_abs_word", a, __pdg__return_sig_expected, __pdg__return_sig_expected, __pdg__return_sig_found);
      end
    end
  endtask

  task test_bool_lts_word_word;
    begin : test_bool_lts_word_word_task
      reg               __pdg__return_sig_expected;
      reg               __pdg__return_sig_found;
      reg signed [15:0] a;
      reg signed [15:0] b;
      r = $sscanf(line, "%s %h %h %h ", command, a, b, __pdg__return_sig_expected);
      bool_lts_word_word(__pdg__return_sig_found, a, b);
      if (__pdg__return_sig_expected !== __pdg__return_sig_found)
      begin
        $display("FAILURE: %s %h %h %h , expected %h, found %h", "bool_lts_word_word", a, b, __pdg__return_sig_expected, __pdg__return_sig_expected, __pdg__return_sig_found);
        $fdisplay(out_file, "%s %h %h %h // expected %h, found %h", "bool_lts_word_word", a, b, __pdg__return_sig_expected, __pdg__return_sig_expected, __pdg__return_sig_found);
      end
    end
  endtask

  task test_bool_ltu_word_word;
    begin : test_bool_ltu_word_word_task
      reg               __pdg__return_sig_expected;
      reg               __pdg__return_sig_found;
      reg signed [15:0] a;
      reg signed [15:0] b;
      r = $sscanf(line, "%s %h %h %h ", command, a, b, __pdg__return_sig_expected);
      bool_ltu_word_word(__pdg__return_sig_found, a, b);
      if (__pdg__return_sig_expected !== __pdg__return_sig_found)
      begin
        $display("FAILURE: %s %h %h %h , expected %h, found %h", "bool_ltu_word_word", a, b, __pdg__return_sig_expected, __pdg__return_sig_expected, __pdg__return_sig_found);
        $fdisplay(out_file, "%s %h %h %h // expected %h, found %h", "bool_ltu_word_word", a, b, __pdg__return_sig_expected, __pdg__return_sig_expected, __pdg__return_sig_found);
      end
    end
  endtask

  task test_bool_les_word_word;
    begin : test_bool_les_word_word_task
      reg               __pdg__return_sig_expected;
      reg               __pdg__return_sig_found;
      reg signed [15:0] a;
      reg signed [15:0] b;
      r = $sscanf(line, "%s %h %h %h ", command, a, b, __pdg__return_sig_expected);
      bool_les_word_word(__pdg__return_sig_found, a, b);
      if (__pdg__return_sig_expected !== __pdg__return_sig_found)
      begin
        $display("FAILURE: %s %h %h %h , expected %h, found %h", "bool_les_word_word", a, b, __pdg__return_sig_expected, __pdg__return_sig_expected, __pdg__return_sig_found);
        $fdisplay(out_file, "%s %h %h %h // expected %h, found %h", "bool_les_word_word", a, b, __pdg__return_sig_expected, __pdg__return_sig_expected, __pdg__return_sig_found);
      end
    end
  endtask

  task test_bool_leu_word_word;
    begin : test_bool_leu_word_word_task
      reg               __pdg__return_sig_expected;
      reg               __pdg__return_sig_found;
      reg signed [15:0] a;
      reg signed [15:0] b;
      r = $sscanf(line, "%s %h %h %h ", command, a, b, __pdg__return_sig_expected);
      bool_leu_word_word(__pdg__return_sig_found, a, b);
      if (__pdg__return_sig_expected !== __pdg__return_sig_found)
      begin
        $display("FAILURE: %s %h %h %h , expected %h, found %h", "bool_leu_word_word", a, b, __pdg__return_sig_expected, __pdg__return_sig_expected, __pdg__return_sig_found);
        $fdisplay(out_file, "%s %h %h %h // expected %h, found %h", "bool_leu_word_word", a, b, __pdg__return_sig_expected, __pdg__return_sig_expected, __pdg__return_sig_found);
      end
    end
  endtask

  task test_bool_gts_word_word;
    begin : test_bool_gts_word_word_task
      reg               __pdg__return_sig_expected;
      reg               __pdg__return_sig_found;
      reg signed [15:0] a;
      reg signed [15:0] b;
      r = $sscanf(line, "%s %h %h %h ", command, a, b, __pdg__return_sig_expected);
      bool_gts_word_word(__pdg__return_sig_found, a, b);
      if (__pdg__return_sig_expected !== __pdg__return_sig_found)
      begin
        $display("FAILURE: %s %h %h %h , expected %h, found %h", "bool_gts_word_word", a, b, __pdg__return_sig_expected, __pdg__return_sig_expected, __pdg__return_sig_found);
        $fdisplay(out_file, "%s %h %h %h // expected %h, found %h", "bool_gts_word_word", a, b, __pdg__return_sig_expected, __pdg__return_sig_expected, __pdg__return_sig_found);
      end
    end
  endtask

  task test_bool_gtu_word_word;
    begin : test_bool_gtu_word_word_task
      reg               __pdg__return_sig_expected;
      reg               __pdg__return_sig_found;
      reg signed [15:0] a;
      reg signed [15:0] b;
      r = $sscanf(line, "%s %h %h %h ", command, a, b, __pdg__return_sig_expected);
      bool_gtu_word_word(__pdg__return_sig_found, a, b);
      if (__pdg__return_sig_expected !== __pdg__return_sig_found)
      begin
        $display("FAILURE: %s %h %h %h , expected %h, found %h", "bool_gtu_word_word", a, b, __pdg__return_sig_expected, __pdg__return_sig_expected, __pdg__return_sig_found);
        $fdisplay(out_file, "%s %h %h %h // expected %h, found %h", "bool_gtu_word_word", a, b, __pdg__return_sig_expected, __pdg__return_sig_expected, __pdg__return_sig_found);
      end
    end
  endtask

  task test_bool_ges_word_word;
    begin : test_bool_ges_word_word_task
      reg               __pdg__return_sig_expected;
      reg               __pdg__return_sig_found;
      reg signed [15:0] a;
      reg signed [15:0] b;
      r = $sscanf(line, "%s %h %h %h ", command, a, b, __pdg__return_sig_expected);
      bool_ges_word_word(__pdg__return_sig_found, a, b);
      if (__pdg__return_sig_expected !== __pdg__return_sig_found)
      begin
        $display("FAILURE: %s %h %h %h , expected %h, found %h", "bool_ges_word_word", a, b, __pdg__return_sig_expected, __pdg__return_sig_expected, __pdg__return_sig_found);
        $fdisplay(out_file, "%s %h %h %h // expected %h, found %h", "bool_ges_word_word", a, b, __pdg__return_sig_expected, __pdg__return_sig_expected, __pdg__return_sig_found);
      end
    end
  endtask

  task test_bool_geu_word_word;
    begin : test_bool_geu_word_word_task
      reg               __pdg__return_sig_expected;
      reg               __pdg__return_sig_found;
      reg signed [15:0] a;
      reg signed [15:0] b;
      r = $sscanf(line, "%s %h %h %h ", command, a, b, __pdg__return_sig_expected);
      bool_geu_word_word(__pdg__return_sig_found, a, b);
      if (__pdg__return_sig_expected !== __pdg__return_sig_found)
      begin
        $display("FAILURE: %s %h %h %h , expected %h, found %h", "bool_geu_word_word", a, b, __pdg__return_sig_expected, __pdg__return_sig_expected, __pdg__return_sig_found);
        $fdisplay(out_file, "%s %h %h %h // expected %h, found %h", "bool_geu_word_word", a, b, __pdg__return_sig_expected, __pdg__return_sig_expected, __pdg__return_sig_found);
      end
    end
  endtask

  task test_bool_eq_word_word;
    begin : test_bool_eq_word_word_task
      reg               __pdg__return_sig_expected;
      reg               __pdg__return_sig_found;
      reg signed [15:0] a;
      reg signed [15:0] b;
      r = $sscanf(line, "%s %h %h %h ", command, a, b, __pdg__return_sig_expected);
      bool_eq_word_word(__pdg__return_sig_found, a, b);
      if (__pdg__return_sig_expected !== __pdg__return_sig_found)
      begin
        $display("FAILURE: %s %h %h %h , expected %h, found %h", "bool_eq_word_word", a, b, __pdg__return_sig_expected, __pdg__return_sig_expected, __pdg__return_sig_found);
        $fdisplay(out_file, "%s %h %h %h // expected %h, found %h", "bool_eq_word_word", a, b, __pdg__return_sig_expected, __pdg__return_sig_expected, __pdg__return_sig_found);
      end
    end
  endtask

  task test_bool_ne_word_word;
    begin : test_bool_ne_word_word_task
      reg               __pdg__return_sig_expected;
      reg               __pdg__return_sig_found;
      reg signed [15:0] a;
      reg signed [15:0] b;
      r = $sscanf(line, "%s %h %h %h ", command, a, b, __pdg__return_sig_expected);
      bool_ne_word_word(__pdg__return_sig_found, a, b);
      if (__pdg__return_sig_expected !== __pdg__return_sig_found)
      begin
        $display("FAILURE: %s %h %h %h , expected %h, found %h", "bool_ne_word_word", a, b, __pdg__return_sig_expected, __pdg__return_sig_expected, __pdg__return_sig_found);
        $fdisplay(out_file, "%s %h %h %h // expected %h, found %h", "bool_ne_word_word", a, b, __pdg__return_sig_expected, __pdg__return_sig_expected, __pdg__return_sig_found);
      end
    end
  endtask

  task test_word_complement_word;
    begin : test_word_complement_word_task
      reg signed [15:0] __pdg__return_sig_expected;
      reg signed [15:0] __pdg__return_sig_found;
      reg signed [15:0] a;
      r = $sscanf(line, "%s %h %h ", command, a, __pdg__return_sig_expected);
      word_complement_word(__pdg__return_sig_found, a);
      if (__pdg__return_sig_expected !== __pdg__return_sig_found)
      begin
        $display("FAILURE: %s %h %h , expected %h, found %h", "word_complement_word", a, __pdg__return_sig_expected, __pdg__return_sig_expected, __pdg__return_sig_found);
        $fdisplay(out_file, "%s %h %h // expected %h, found %h", "word_complement_word", a, __pdg__return_sig_expected, __pdg__return_sig_expected, __pdg__return_sig_found);
      end
    end
  endtask

  task test_word_extend_sign_word;
    begin : test_word_extend_sign_word_task
      reg signed [15:0] __pdg__return_sig_expected;
      reg signed [15:0] __pdg__return_sig_found;
      reg signed [15:0] a;
      r = $sscanf(line, "%s %h %h ", command, a, __pdg__return_sig_expected);
      word_extend_sign_word(__pdg__return_sig_found, a);
      if (__pdg__return_sig_expected !== __pdg__return_sig_found)
      begin
        $display("FAILURE: %s %h %h , expected %h, found %h", "word_extend_sign_word", a, __pdg__return_sig_expected, __pdg__return_sig_expected, __pdg__return_sig_found);
        $fdisplay(out_file, "%s %h %h // expected %h, found %h", "word_extend_sign_word", a, __pdg__return_sig_expected, __pdg__return_sig_expected, __pdg__return_sig_found);
      end
    end
  endtask

  task test_word_asr_word_word;
    begin : test_word_asr_word_word_task
      reg signed [15:0] __pdg__return_sig_expected;
      reg signed [15:0] __pdg__return_sig_found;
      reg signed [15:0] a;
      reg signed [15:0] f;
      r = $sscanf(line, "%s %h %h %h ", command, a, f, __pdg__return_sig_expected);
      word_asr_word_word(__pdg__return_sig_found, a, f);
      if (__pdg__return_sig_expected !== __pdg__return_sig_found)
      begin
        $display("FAILURE: %s %h %h %h , expected %h, found %h", "word_asr_word_word", a, f, __pdg__return_sig_expected, __pdg__return_sig_expected, __pdg__return_sig_found);
        $fdisplay(out_file, "%s %h %h %h // expected %h, found %h", "word_asr_word_word", a, f, __pdg__return_sig_expected, __pdg__return_sig_expected, __pdg__return_sig_found);
      end
    end
  endtask

  task test_word_lsr_word_word;
    begin : test_word_lsr_word_word_task
      reg signed [15:0] __pdg__return_sig_expected;
      reg signed [15:0] __pdg__return_sig_found;
      reg signed [15:0] a;
      reg signed [15:0] f;
      r = $sscanf(line, "%s %h %h %h ", command, a, f, __pdg__return_sig_expected);
      word_lsr_word_word(__pdg__return_sig_found, a, f);
      if (__pdg__return_sig_expected !== __pdg__return_sig_found)
      begin
        $display("FAILURE: %s %h %h %h , expected %h, found %h", "word_lsr_word_word", a, f, __pdg__return_sig_expected, __pdg__return_sig_expected, __pdg__return_sig_found);
        $fdisplay(out_file, "%s %h %h %h // expected %h, found %h", "word_lsr_word_word", a, f, __pdg__return_sig_expected, __pdg__return_sig_expected, __pdg__return_sig_found);
      end
    end
  endtask

  task test_word_lsl_word_word;
    begin : test_word_lsl_word_word_task
      reg signed [15:0] __pdg__return_sig_expected;
      reg signed [15:0] __pdg__return_sig_found;
      reg signed [15:0] a;
      reg signed [15:0] f;
      r = $sscanf(line, "%s %h %h %h ", command, a, f, __pdg__return_sig_expected);
      word_lsl_word_word(__pdg__return_sig_found, a, f);
      if (__pdg__return_sig_expected !== __pdg__return_sig_found)
      begin
        $display("FAILURE: %s %h %h %h , expected %h, found %h", "word_lsl_word_word", a, f, __pdg__return_sig_expected, __pdg__return_sig_expected, __pdg__return_sig_found);
        $fdisplay(out_file, "%s %h %h %h // expected %h, found %h", "word_lsl_word_word", a, f, __pdg__return_sig_expected, __pdg__return_sig_expected, __pdg__return_sig_found);
      end
    end
  endtask

  task test_void_mulss_word_word_word_word;
    begin : test_void_mulss_word_word_word_word_task
      reg signed [15:0] a;
      reg signed [15:0] b;
      reg signed [15:0] rl_expected;
      reg signed [15:0] rl_found;
      reg signed [15:0] rh_expected;
      reg signed [15:0] rh_found;
      r = $sscanf(line, "%s %h %h %h %h ", command, a, b, rl_expected, rh_expected);
      void_mulss_word_word_word_word(a, b, rl_found, rh_found);
      if (rl_expected !== rl_found)
      begin
        $display("FAILURE: %s %h %h %h %h , expected %h, found %h", "void_mulss_word_word_word_word", a, b, rl_expected, rh_expected, rl_expected, rl_found);
        $fdisplay(out_file, "%s %h %h %h %h // expected %h, found %h", "void_mulss_word_word_word_word", a, b, rl_expected, rh_expected, rl_expected, rl_found);
      end
      if (rh_expected !== rh_found)
      begin
        $display("FAILURE: %s %h %h %h %h , expected %h, found %h", "void_mulss_word_word_word_word", a, b, rl_expected, rh_expected, rh_expected, rh_found);
        $fdisplay(out_file, "%s %h %h %h %h // expected %h, found %h", "void_mulss_word_word_word_word", a, b, rl_expected, rh_expected, rh_expected, rh_found);
      end
    end
  endtask

  task test_void_muluu_word_word_word_word;
    begin : test_void_muluu_word_word_word_word_task
      reg signed [15:0] a;
      reg signed [15:0] b;
      reg signed [15:0] rl_expected;
      reg signed [15:0] rl_found;
      reg signed [15:0] rh_expected;
      reg signed [15:0] rh_found;
      r = $sscanf(line, "%s %h %h %h %h ", command, a, b, rl_expected, rh_expected);
      void_muluu_word_word_word_word(a, b, rl_found, rh_found);
      if (rl_expected !== rl_found)
      begin
        $display("FAILURE: %s %h %h %h %h , expected %h, found %h", "void_muluu_word_word_word_word", a, b, rl_expected, rh_expected, rl_expected, rl_found);
        $fdisplay(out_file, "%s %h %h %h %h // expected %h, found %h", "void_muluu_word_word_word_word", a, b, rl_expected, rh_expected, rl_expected, rl_found);
      end
      if (rh_expected !== rh_found)
      begin
        $display("FAILURE: %s %h %h %h %h , expected %h, found %h", "void_muluu_word_word_word_word", a, b, rl_expected, rh_expected, rh_expected, rh_found);
        $fdisplay(out_file, "%s %h %h %h %h // expected %h, found %h", "void_muluu_word_word_word_word", a, b, rl_expected, rh_expected, rh_expected, rh_found);
      end
    end
  endtask

  task test_void_divstep_word_word_word_word_word;
    begin : test_void_divstep_word_word_word_word_word_task
      reg signed [15:0] a;
      reg signed [15:0] q;
      reg signed [15:0] m;
      reg signed [15:0] new_q_expected;
      reg signed [15:0] new_q_found;
      reg signed [15:0] new_m_expected;
      reg signed [15:0] new_m_found;
      r = $sscanf(line, "%s %h %h %h %h %h ", command, a, q, m, new_q_expected, new_m_expected);
      void_divstep_word_word_word_word_word(a, q, m, new_q_found, new_m_found);
      if (new_q_expected !== new_q_found)
      begin
        $display("FAILURE: %s %h %h %h %h %h , expected %h, found %h", "void_divstep_word_word_word_word_word", a, q, m, new_q_expected, new_m_expected, new_q_expected, new_q_found);
        $fdisplay(out_file, "%s %h %h %h %h %h // expected %h, found %h", "void_divstep_word_word_word_word_word", a, q, m, new_q_expected, new_m_expected, new_q_expected, new_q_found);
      end
      if (new_m_expected !== new_m_found)
      begin
        $display("FAILURE: %s %h %h %h %h %h , expected %h, found %h", "void_divstep_word_word_word_word_word", a, q, m, new_q_expected, new_m_expected, new_m_expected, new_m_found);
        $fdisplay(out_file, "%s %h %h %h %h %h // expected %h, found %h", "void_divstep_word_word_word_word_word", a, q, m, new_q_expected, new_m_expected, new_m_expected, new_m_found);
      end
    end
  endtask

  task test_void_nop;
    begin : test_void_nop_task
      r = $sscanf(line, "%s ", command);
      void_nop();
    end
  endtask

  task test_addr_incr_addr;
    begin : test_addr_incr_addr_task
      reg        [15:0] __pdg__return_sig_expected;
      reg        [15:0] __pdg__return_sig_found;
      reg        [15:0] a;
      r = $sscanf(line, "%s %h %h ", command, a, __pdg__return_sig_expected);
      addr_incr_addr(__pdg__return_sig_found, a);
      if (__pdg__return_sig_expected !== __pdg__return_sig_found)
      begin
        $display("FAILURE: %s %h %h , expected %h, found %h", "addr_incr_addr", a, __pdg__return_sig_expected, __pdg__return_sig_expected, __pdg__return_sig_found);
        $fdisplay(out_file, "%s %h %h // expected %h, found %h", "addr_incr_addr", a, __pdg__return_sig_expected, __pdg__return_sig_expected, __pdg__return_sig_found);
      end
    end
  endtask

  task test_uint2_incr_uint2;
    begin : test_uint2_incr_uint2_task
      reg         [1:0] __pdg__return_sig_expected;
      reg         [1:0] __pdg__return_sig_found;
      reg         [1:0] a;
      r = $sscanf(line, "%s %h %h ", command, a, __pdg__return_sig_expected);
      uint2_incr_uint2(__pdg__return_sig_found, a);
      if (__pdg__return_sig_expected !== __pdg__return_sig_found)
      begin
        $display("FAILURE: %s %h %h , expected %h, found %h", "uint2_incr_uint2", a, __pdg__return_sig_expected, __pdg__return_sig_expected, __pdg__return_sig_found);
        $fdisplay(out_file, "%s %h %h // expected %h, found %h", "uint2_incr_uint2", a, __pdg__return_sig_expected, __pdg__return_sig_expected, __pdg__return_sig_found);
      end
    end
  endtask

  task test_uint2_decr_uint2;
    begin : test_uint2_decr_uint2_task
      reg         [1:0] __pdg__return_sig_expected;
      reg         [1:0] __pdg__return_sig_found;
      reg         [1:0] a;
      r = $sscanf(line, "%s %h %h ", command, a, __pdg__return_sig_expected);
      uint2_decr_uint2(__pdg__return_sig_found, a);
      if (__pdg__return_sig_expected !== __pdg__return_sig_found)
      begin
        $display("FAILURE: %s %h %h , expected %h, found %h", "uint2_decr_uint2", a, __pdg__return_sig_expected, __pdg__return_sig_expected, __pdg__return_sig_found);
        $fdisplay(out_file, "%s %h %h // expected %h, found %h", "uint2_decr_uint2", a, __pdg__return_sig_expected, __pdg__return_sig_expected, __pdg__return_sig_found);
      end
    end
  endtask

  task test_void_halt;
    begin : test_void_halt_task
      r = $sscanf(line, "%s ", command);
      void_halt();
    end
  endtask

  initial
  begin : file_block
    file = $fopen("tmicro_testcases.txt", "r");
    out_file = $fopen("tmicro_verilog_failures.txt", "w");
    while (!$feof(file))
    begin
      r = $fgets(line, file);
      r = $sscanf(line, " %s ", command);
      case (command)
        "word_add_word_word":
          test_word_add_word_word();
        "word_add_word_word_uint1":
          test_word_add_word_word_uint1();
        "word_addc_word_word_uint1_uint1":
          test_word_addc_word_word_uint1_uint1();
        "word_sub_word_word_uint1":
          test_word_sub_word_word_uint1();
        "word_subb_word_word_uint1_uint1":
          test_word_subb_word_word_uint1_uint1();
        "word_andw_word_word":
          test_word_andw_word_word();
        "word_orw_word_word":
          test_word_orw_word_word();
        "word_xorw_word_word":
          test_word_xorw_word_word();
        "word_minw_word_word":
          test_word_minw_word_word();
        "word_maxw_word_word":
          test_word_maxw_word_word();
        "word_select_bool_word_word":
          test_word_select_bool_word_word();
        "word_ext_abs_word":
          test_word_ext_abs_word();
        "bool_lts_word_word":
          test_bool_lts_word_word();
        "bool_ltu_word_word":
          test_bool_ltu_word_word();
        "bool_les_word_word":
          test_bool_les_word_word();
        "bool_leu_word_word":
          test_bool_leu_word_word();
        "bool_gts_word_word":
          test_bool_gts_word_word();
        "bool_gtu_word_word":
          test_bool_gtu_word_word();
        "bool_ges_word_word":
          test_bool_ges_word_word();
        "bool_geu_word_word":
          test_bool_geu_word_word();
        "bool_eq_word_word":
          test_bool_eq_word_word();
        "bool_ne_word_word":
          test_bool_ne_word_word();
        "word_complement_word":
          test_word_complement_word();
        "word_extend_sign_word":
          test_word_extend_sign_word();
        "word_asr_word_word":
          test_word_asr_word_word();
        "word_lsr_word_word":
          test_word_lsr_word_word();
        "word_lsl_word_word":
          test_word_lsl_word_word();
        "void_mulss_word_word_word_word":
          test_void_mulss_word_word_word_word();
        "void_muluu_word_word_word_word":
          test_void_muluu_word_word_word_word();
        "void_divstep_word_word_word_word_word":
          test_void_divstep_word_word_word_word_word();
        "void_nop":
          test_void_nop();
        "addr_incr_addr":
          test_addr_incr_addr();
        "uint2_incr_uint2":
          test_uint2_incr_uint2();
        "uint2_decr_uint2":
          test_uint2_decr_uint2();
        "void_halt":
          test_void_halt();
      endcase
    end
    $fclose(file);
    $fclose(out_file);
  end
endmodule
