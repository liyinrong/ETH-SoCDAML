
// File generated by Go version O-2018.09#f5599cac26#190121, Tue May 28 10:45:21 2024
// Copyright 2014-2018 Synopsys, Inc. All rights reserved.
// go -B -I../lib -F -D__tct_patch__=300 -Verilog -otmicro_vlog -cgo_options.cfg -Itmicro_vlog/tmp_pdg -updg -updg_controller tmicro



`timescale 1ns/1ps

// module mux_pm_write : mux_pm_write
module mux_pm_write
  ( input              [2:0] bin_selector_E1,
    input                    __ocd_st_PME1_r_in, // bool
    input      signed [15:0] __pm_write_r_ILR_in, // word
    input      signed [15:0] __pm_write_r_ISR_in, // word
    input      signed [15:0] __pm_write_r_LR_in, // word
    input      signed [15:0] __pm_write_r_SP_in, // word
    input                    __pm_write_r_SR_el1_in, // uint1
    input                    __pm_write_r_SR_el2_in, // uint1
    input              [1:0] __pm_write_r_SR_el3_in, // uint2
    input              [2:0] __pm_write_r_SR_el4_in, // uint3
    input              [7:0] __pm_write_r_SR_el5_in, // ubyte
    input                    __pm_write_r_SR_el_in, // bool
    input             [15:0] pm_write1_in, // iword
    input      signed [15:0] rse1_in, // word
    output reg        [15:0] pm_write_out // iword
  );


  always @ (*)

  begin : p_mux_pm_write


    reg    signed [15:0] __pm_write_r_ILR; // word
    reg    signed [15:0] __pm_write_r_ISR; // word
    reg    signed [15:0] __pm_write_r_LR; // word
    reg    signed [15:0] __pm_write_r_SP; // word
    reg    __pm_write_r_SR_el1; // uint1
    reg    __pm_write_r_SR_el2; // uint1
    reg    [1:0] __pm_write_r_SR_el3; // uint2
    reg    [2:0] __pm_write_r_SR_el4; // uint3
    reg    [7:0] __pm_write_r_SR_el5; // ubyte
    reg    __pm_write_r_SR_el; // bool
    reg    signed [15:0] rse1; // word

    pm_write_out = 0;

    // operand isolation
    if (bin_selector_E1 == 0)
    begin
      __pm_write_r_ILR = 0;
      __pm_write_r_ISR = 0;
      __pm_write_r_LR = 0;
      __pm_write_r_SP = 0;
      rse1 = 0;
      __pm_write_r_SR_el5 = 0;
      __pm_write_r_SR_el4 = 0;
      __pm_write_r_SR_el3 = 0;
      __pm_write_r_SR_el1 = 0;
      __pm_write_r_SR_el2 = 0;
      __pm_write_r_SR_el = 0;
    end
    else
    begin
      __pm_write_r_ILR = __pm_write_r_ILR_in;
      __pm_write_r_ISR = __pm_write_r_ISR_in;
      __pm_write_r_LR = __pm_write_r_LR_in;
      __pm_write_r_SP = __pm_write_r_SP_in;
      rse1 = rse1_in;
      __pm_write_r_SR_el5 = __pm_write_r_SR_el5_in;
      __pm_write_r_SR_el4 = __pm_write_r_SR_el4_in;
      __pm_write_r_SR_el3 = __pm_write_r_SR_el3_in;
      __pm_write_r_SR_el1 = __pm_write_r_SR_el1_in;
      __pm_write_r_SR_el2 = __pm_write_r_SR_el2_in;
      __pm_write_r_SR_el = __pm_write_r_SR_el_in;
    end


    // (pm_write_copy_pm_write1___ocd_st_PME1_r_E1)
    if (__ocd_st_PME1_r_in)
    begin
      // [ocd_if.n:46]
      pm_write_out = pm_write1_in;
    end

    case (bin_selector_E1)
      3'b001 : // (pm_write_copy0___pm_write_r_ILR_E1)
      begin
        // [load_store.n:130](tmicro.n:134)
        pm_write_out = $unsigned(__pm_write_r_ILR);
      end
      3'b010 : // (pm_write_copy0___pm_write_r_ISR_E1)
      begin
        // [load_store.n:130](tmicro.n:135)
        pm_write_out = $unsigned(__pm_write_r_ISR);
      end
      3'b011 : // (pm_write_copy0___pm_write_r_LR_E1)
      begin
        // [load_store.n:130](tmicro.n:131)
        pm_write_out = $unsigned(__pm_write_r_LR);
      end
      3'b100 : // (pm_write_copy0___pm_write_r_SP_E1)
      begin
        // [load_store.n:130](tmicro.n:130)
        pm_write_out = $unsigned(__pm_write_r_SP);
      end
      3'b101 : // (pm_write_copy0___pm_write_r_SR_E1)
      begin
        // [load_store.n:130](tmicro.n:132)
        pm_write_out = {__pm_write_r_SR_el5, __pm_write_r_SR_el4, __pm_write_r_SR_el3, __pm_write_r_SR_el2, __pm_write_r_SR_el1, __pm_write_r_SR_el};
      end
      3'b110 : // (pm_write_copy0_rse1_E1)
      begin
        // [load_store.n:130](tmicro.n:125)
        pm_write_out = $unsigned(rse1);
      end
      default :
        ; // null
    endcase

  end

endmodule
