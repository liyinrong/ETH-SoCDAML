
// File generated by Go version O-2018.09#f5599cac26#190121, Tue May 28 10:45:21 2024
// Copyright 2014-2018 Synopsys, Inc. All rights reserved.
// go -B -I../lib -F -D__tct_patch__=300 -Verilog -otmicro_vlog -cgo_options.cfg -Itmicro_vlog/tmp_pdg -updg -updg_controller tmicro



`timescale 1ns/1ps

// module reg_R : reg_R
module reg_R
  // synopsys translate_off
  #(parameter reg_log = 1'b1,
    parameter reg_log_name = "R"
  )
  // synopsys translate_on
  ( input                    clock,
    input                    ohe_selector_E1,
    input              [1:0] bin_selector_E1,
    input                    ohe_selector_ID,
    input              [2:0] R_ag1p_graddr_in, // uint3
    input              [2:0] R_rre1_graddr_in, // uint3
    input              [2:0] R_rse1_graddr_in, // uint3
    input              [2:0] R_rtid_gwaddr_in, // uint3
    input              [2:0] __R_rte1_waddr_in, // uint3
    input      signed [15:0] mulx_in, // word
    input      signed [15:0] muly_in, // word
    input      signed [15:0] rte1_in, // word
    input      signed [15:0] rtid_in, // word
    output reg signed [15:0] ag1p_out, // word
    output reg signed [15:0] mulu_out, // word
    output reg signed [15:0] mulv_out, // word
    output reg signed [15:0] rre1_out, // word
    output reg signed [15:0] rse1_out // word
  );


  reg signed [15:0] reg_val[0:7];

  reg signed [15:0] reg_val_next[0:7];

  reg  [7:0] reg_write_enab;


  // synopsys translate_off

  reg [7:0] reg_write_log;
  reg [7:0] old_reg_write_log;
  initial reg_write_log <= {8{1'b0}};
  initial old_reg_write_log <= {8{1'b0}};

  always @ (negedge clock)
  begin : p_reg_R_log

    integer k;

    if (reg_log)
    begin
      for (k = 0; k <= 7; k = k + 1)
      begin
        if (reg_write_log[k] != old_reg_write_log[k])
        begin
          $fdisplay(tmicro.inst_reg_PC.log_file, "%s[%0d] = %0d", reg_log_name, k, $signed(reg_val[k]));
        end
        old_reg_write_log[k] <= reg_write_log[k];
      end
    end
  end
  // synopsys translate_on

  always @ (*)
  begin : p_read_reg_R

    // ag1p_out = 0;
    // mulu_out = 0;
    // mulv_out = 0;
    // rre1_out = 0;
    // rse1_out = 0;

    // (rre1_rd_R_R_rre1_grad_E1)
    // [alu.n:65][alu.n:183][alu.n:215][alu.n:232][alu.n:86][alu.n:107][alu.n:137][alu.n:153][alu.n:166](tmicro.n:159)
    rre1_out = reg_val[R_rre1_graddr_in];

    // (rse1_rd_R_R_rse1_grad_E1)
    // [alu.n:66][alu.n:184][alu.n:216][alu.n:87][alu.n:108][alu.n:122][alu.n:138][alu.n:154][move.n:48][move.n:96][load_store.n:57][load_store.n:99][load_store.n:130][control.n:112][control.n:145][control.n:191][dma.n:51](tmicro.n:160)(tmicro.n:125)
    rse1_out = reg_val[R_rse1_graddr_in];

    // (mulu_rd_PL_E1)
    // [alu.n:232]
    mulu_out = reg_val[6];

    // (mulv_rd_PH_E1)
    // [alu.n:221][alu.n:232]
    mulv_out = reg_val[7];

    // (ag1p_rd_R_R_ag1p_grad_ID)
    // [load_store.n:75][load_store.n:76][load_store.n:77](tmicro.n:154)
    ag1p_out = reg_val[R_ag1p_graddr_in];

  end

  always @ (*)
  begin : p_write_combin_reg_R

    integer j;

    reg_write_enab = 0;
    for ( j = 0; j <= 7; j = j + 1)
      reg_val_next[j] = 0;


    if (ohe_selector_E1) // (PH_wr_muly_E1)
    begin
      // [alu.n:218][alu.n:219][alu.n:221][alu.n:232]
      reg_write_enab[7] = 1'b1;
      reg_val_next[7] = muly_in;
    end

    case (bin_selector_E1)
      2'b01 : // (R_wr_rte1___R_rte1_wad_E1)
      begin
        // [alu.n:76][alu.n:190][alu.n:127][alu.n:143][alu.n:156][move.n:48][move.n:55][move.n:62][move.n:106][load_store.n:51][load_store.n:93][load_store.n:116][dma.n:70][alu.n:168](tmicro.n:161)(tmicro.n:125)
        reg_write_enab[__R_rte1_waddr_in] = 1'b1;
        reg_val_next[__R_rte1_waddr_in] = rte1_in;
      end
      2'b10 : // (PL_wr_mulx_E1)
      begin
        // [alu.n:218][alu.n:219][alu.n:232]
        reg_write_enab[6] = 1'b1;
        reg_val_next[6] = mulx_in;
      end
      default :
        ; // null
    endcase

    if (ohe_selector_ID) // (R_wr_rtid_R_rtid_gwad_ID)
    begin
      // [load_store.n:76][load_store.n:77](tmicro.n:154)
      reg_write_enab[R_rtid_gwaddr_in] = 1'b1;
      reg_val_next[R_rtid_gwaddr_in] = rtid_in;
    end

  end

  always @ (posedge clock)
  begin : p_write_reg_R

    integer j;
    for ( j = 0; j <= 7; j = j + 1)
    begin
      if (reg_write_enab[j])
      begin
        reg_val[j] <= reg_val_next[j];
        // synopsys translate_off
        reg_write_log[j] <= ~reg_write_log[j];
        // synopsys translate_on
      end
    end
  end

endmodule
