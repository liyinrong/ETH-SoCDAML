
// File generated by noodle version O-2018.09#f5599cac26#190121, Tue May 28 10:41:29 2024
// Copyright 2014-2018 Synopsys, Inc. All rights reserved.
// noodle -Pc -B -Iisg +wisg -Iruntime/include -D__tct_patch__=300 -D__chess__ -D__programmers_view__ tmicro

toolrelease _18R3;

//-- SPILLING --

pattern {
}

constant_load_parent : pattern {
}
stack_load_parent : pattern {
}
stack_store_parent : pattern {
}

constant_load : constant_load_parent {
}
stack_load : stack_load_parent {
}
stack_store : stack_store_parent {
}

constant_load_indirect : constant_load_parent {
}
stack_load_indirect : stack_load_parent {
}
stack_store_indirect : stack_store_parent {
}

init_rp : pattern {
}
update_cp : pattern {
}
update_rp : pattern {
}
pop_regs : pattern {
}
push_regs : pattern {
}

complex_pattern : pattern {
}

complex_ctpat : complex_pattern {
}
complex_load : complex_pattern {
}
complex_store : complex_pattern {
}
complex_move : complex_pattern {
}

complex_tie : event_opn {
}

complex_ctpat_tie : complex_tie {
}
complex_load_tie : complex_tie {
}
complex_store_tie : complex_tie {
}

// auxiliary patterns defined in the source function sfg file:

aux_pattern {
}

complex_const : aux_pattern {
}


//-- APPLICATION LAYER TYPES --

typ __cchar<16t>[-32768,32767,1];
typ __schar<16t>[-32768,32767,1];
typ __uchar<16u>[0,65535,1];
typ __sshort<16t>[-32768,32767,1];
typ __ushort<16u>[0,65535,1];
typ __sint<16t>[-32768,32767,1];
typ __uint<16u>[0,65535,1];
typ __slong<32t>[-2147483648,2147483647,1];
typ __ulong<32u>[0,4294967295,1];
typ __slonglong<64t>[-9223372036854775808,9223372036854775807,1];
typ __ulonglong<64u>[-9223372036854775808,9223372036854775807,1];
typ __Pvoid<16u>[0,65535,1];

// type promotions
promo(word,s) = { addr iword } 
promo(addr,s) = { word iword } 

// spill & constant memory differentiation
mem __spill_DM[0..65535,1]<word,addr> alias DM[0] align 1;

// chess_properties
prop release_q = ( q18R3 );
prop allow_callee_saved_inputs = ( on );
prop breakpoint_focus_stage = ( 2 );
prop ctor_list_memory = ( DM );
prop default_memory = ( DM );
prop indirect_stack_access_0 = ( 0 );
prop isr_link_register = ( ILR );
prop link_register = ( LR );
prop no_redundant_loads = ( PM );
prop nr_stacks = ( 1 );
prop representation = ( __sint word __uint word __Pvoid addr __slong dint __ulong dint __slonglong dlong __ulonglong dlong );
prop reserved = ( SRa SRb IE IM LF LS LE LC ISR PC ocd_addr ocd_data ocd_instr ireq_pcu_inp dma_ready iack_pcu_out halted_out debug_out ILR SP );
prop sp_alignment_0 = ( 1 );
prop sp_location_0 = ( free );
prop sp_offset_type_0 = ( nint9 );
prop spill_memory_0 = ( __spill_DM );
prop stack_pointer_0 = ( SP );
prop status_register = ( CND CB );
prop subsume_constant = ( addr word pad0 iword word pad0 iword addr pad0 word addr pad0 );


//-- APPLICATION LAYER OPERATIONS --

// additional  /*primitive*/ bool lts(word, word)
bool_lts_word_word {
    cpl : bool_ges_word_word;
}

// additional  /*primitive*/ bool ltu(word, word)
bool_ltu_word_word {
    cpl : bool_geu_word_word;
}

// additional  /*primitive*/ bool les(word, word)
bool_les_word_word {
    cpl : bool_gts_word_word;
}

// additional  /*primitive*/ bool leu(word, word)
bool_leu_word_word {
    cpl : bool_gtu_word_word;
}

// additional  /*primitive*/ bool gts(word, word)
bool_gts_word_word {
    cpl : bool_les_word_word;
}

// additional  /*primitive*/ bool gtu(word, word)
bool_gtu_word_word {
    cpl : bool_leu_word_word;
}

// additional  /*primitive*/ bool ges(word, word)
bool_ges_word_word {
    cpl : bool_lts_word_word;
}

// additional  /*primitive*/ bool geu(word, word)
bool_geu_word_word {
    cpl : bool_ltu_word_word;
}

// additional  /*primitive*/ bool eq(word, word)
bool_eq_word_word {
    cpl : bool_ne_word_word;
}

// additional  /*primitive*/ bool ne(word, word)
bool_ne_word_word {
    cpl : bool_eq_word_word;
}

// additional  /*primitive*/ word::word(addr)
word_word_addr : promotion_conversion {
}

// additional  /*primitive*/ word::word(iword)
word_word_iword : promotion_conversion {
}

// additional  /*primitive*/ addr::addr(word)
addr_addr_word : promotion_conversion {
}

// additional  /*primitive*/ iword::iword(word)
iword_iword_word : promotion_conversion {
}

// int operator+(int, int)
__sint__pl___sint___sint : user_defined, commutative, inlined, promoted {
    fnm : "operator+" 'int operator+(int, int)'; 
    arg : ( __sint:r __sint:i __sint:i );
    prm : ( word_add_word_word_uint1 word_add_word_word );
}

// int operator-(int, int)
__sint__mi___sint___sint : user_defined, inlined, promoted {
    fnm : "operator-" 'int operator-(int, int)'; 
    arg : ( __sint:r __sint:i __sint:i );
    prm : ( word_sub_word_word_uint1 );
}

// int operator&(int, int)
__sint__ad___sint___sint : user_defined, commutative, inlined, promoted {
    fnm : "operator&" 'int operator&(int, int)'; 
    arg : ( __sint:r __sint:i __sint:i );
    prm : ( word_andw_word_word );
}

// int operator|(int, int)
__sint__or___sint___sint : user_defined, commutative, inlined, promoted {
    fnm : "operator|" 'int operator|(int, int)'; 
    arg : ( __sint:r __sint:i __sint:i );
    prm : ( word_orw_word_word );
}

// int operator^(int, int)
__sint__er___sint___sint : user_defined, commutative, inlined, promoted {
    fnm : "operator^" 'int operator^(int, int)'; 
    arg : ( __sint:r __sint:i __sint:i );
    prm : ( word_xorw_word_word );
}

// int operator<<(int, int)
__sint__ls___sint___sint : user_defined, inlined, promoted {
    fnm : "operator<<" 'int operator<<(int, int)'; 
    arg : ( __sint:r __sint:i __sint:i );
    prm : ( word_lsl_word_word );
}

// int operator>>(int, int)
__sint__rs___sint___sint : user_defined, inlined, promoted {
    fnm : "operator>>" 'int operator>>(int, int)'; 
    arg : ( __sint:r __sint:i __sint:i );
    prm : ( word_asr_word_word );
}

// int operator~(int)
__sint__co___sint : user_defined, inlined, promoted {
    fnm : "operator~" 'int operator~(int)'; 
    arg : ( __sint:r __sint:i );
    prm : ( word_complement_word );
}

// bool operator<(int, int)
bool__lt___sint___sint : user_defined, inlined, promoted {
    fnm : "operator<" 'bool operator<(int, int)'; 
    arg : ( bool:r __sint:i __sint:i );
    cpl : bool__ge___sint___sint;
    prm : ( bool_lts_word_word );
}

// bool operator>=(int, int)
bool__ge___sint___sint : user_defined, inlined, promoted {
    fnm : "operator>=" 'bool operator>=(int, int)'; 
    arg : ( bool:r __sint:i __sint:i );
    cpl : bool__lt___sint___sint;
    prm : ( bool_ges_word_word );
}

// bool operator>(int, int)
bool__gt___sint___sint : user_defined, inlined, promoted {
    fnm : "operator>" 'bool operator>(int, int)'; 
    arg : ( bool:r __sint:i __sint:i );
    cpl : bool__le___sint___sint;
    prm : ( bool_gts_word_word );
}

// bool operator<=(int, int)
bool__le___sint___sint : user_defined, inlined, promoted {
    fnm : "operator<=" 'bool operator<=(int, int)'; 
    arg : ( bool:r __sint:i __sint:i );
    cpl : bool__gt___sint___sint;
    prm : ( bool_les_word_word );
}

// bool operator==(int, int)
bool__eq___sint___sint : user_defined, commutative, inlined, promoted {
    fnm : "operator==" 'bool operator==(int, int)'; 
    arg : ( bool:r __sint:i __sint:i );
    cpl : bool__ne___sint___sint;
    prm : ( bool_eq_word_word );
}

// bool operator!=(int, int)
bool__ne___sint___sint : user_defined, commutative, inlined, promoted {
    fnm : "operator!=" 'bool operator!=(int, int)'; 
    arg : ( bool:r __sint:i __sint:i );
    cpl : bool__eq___sint___sint;
    prm : ( bool_ne_word_word );
}

// unsigned operator+(unsigned, unsigned)
__uint__pl___uint___uint : user_defined, commutative, inlined, promoted {
    fnm : "operator+" 'unsigned operator+(unsigned, unsigned)'; 
    arg : ( __uint:r __uint:i __uint:i );
    prm : ( word_add_word_word_uint1 word_add_word_word );
}

// unsigned operator-(unsigned, unsigned)
__uint__mi___uint___uint : user_defined, inlined, promoted {
    fnm : "operator-" 'unsigned operator-(unsigned, unsigned)'; 
    arg : ( __uint:r __uint:i __uint:i );
    prm : ( word_sub_word_word_uint1 );
}

// unsigned operator&(unsigned, unsigned)
__uint__ad___uint___uint : user_defined, commutative, inlined, promoted {
    fnm : "operator&" 'unsigned operator&(unsigned, unsigned)'; 
    arg : ( __uint:r __uint:i __uint:i );
    prm : ( word_andw_word_word );
}

// unsigned operator|(unsigned, unsigned)
__uint__or___uint___uint : user_defined, commutative, inlined, promoted {
    fnm : "operator|" 'unsigned operator|(unsigned, unsigned)'; 
    arg : ( __uint:r __uint:i __uint:i );
    prm : ( word_orw_word_word );
}

// unsigned operator^(unsigned, unsigned)
__uint__er___uint___uint : user_defined, commutative, inlined, promoted {
    fnm : "operator^" 'unsigned operator^(unsigned, unsigned)'; 
    arg : ( __uint:r __uint:i __uint:i );
    prm : ( word_xorw_word_word );
}

// unsigned operator<<(unsigned, int)
__uint__ls___uint___sint : user_defined, inlined, promoted {
    fnm : "operator<<" 'unsigned operator<<(unsigned, int)'; 
    arg : ( __uint:r __uint:i __sint:i );
    prm : ( word_lsl_word_word );
}

// unsigned operator>>(unsigned, int)
__uint__rs___uint___sint : user_defined, inlined, promoted {
    fnm : "operator>>" 'unsigned operator>>(unsigned, int)'; 
    arg : ( __uint:r __uint:i __sint:i );
    prm : ( word_lsr_word_word );
}

// unsigned operator~(unsigned)
__uint__co___uint : user_defined, inlined, promoted {
    fnm : "operator~" 'unsigned operator~(unsigned)'; 
    arg : ( __uint:r __uint:i );
    prm : ( word_complement_word );
}

// bool operator<(unsigned, unsigned)
bool__lt___uint___uint : user_defined, inlined, promoted {
    fnm : "operator<" 'bool operator<(unsigned, unsigned)'; 
    arg : ( bool:r __uint:i __uint:i );
    cpl : bool__ge___uint___uint;
    prm : ( bool_ltu_word_word );
}

// bool operator>=(unsigned, unsigned)
bool__ge___uint___uint : user_defined, inlined, promoted {
    fnm : "operator>=" 'bool operator>=(unsigned, unsigned)'; 
    arg : ( bool:r __uint:i __uint:i );
    cpl : bool__lt___uint___uint;
    prm : ( bool_geu_word_word );
}

// bool operator>(unsigned, unsigned)
bool__gt___uint___uint : user_defined, inlined, promoted {
    fnm : "operator>" 'bool operator>(unsigned, unsigned)'; 
    arg : ( bool:r __uint:i __uint:i );
    cpl : bool__le___uint___uint;
    prm : ( bool_gtu_word_word );
}

// bool operator<=(unsigned, unsigned)
bool__le___uint___uint : user_defined, inlined, promoted {
    fnm : "operator<=" 'bool operator<=(unsigned, unsigned)'; 
    arg : ( bool:r __uint:i __uint:i );
    cpl : bool__gt___uint___uint;
    prm : ( bool_leu_word_word );
}

// bool operator==(unsigned, unsigned)
bool__eq___uint___uint : user_defined, commutative, inlined, promoted {
    fnm : "operator==" 'bool operator==(unsigned, unsigned)'; 
    arg : ( bool:r __uint:i __uint:i );
    cpl : bool__ne___uint___uint;
    prm : ( bool_eq_word_word );
}

// bool operator!=(unsigned, unsigned)
bool__ne___uint___uint : user_defined, commutative, inlined, promoted {
    fnm : "operator!=" 'bool operator!=(unsigned, unsigned)'; 
    arg : ( bool:r __uint:i __uint:i );
    cpl : bool__eq___uint___uint;
    prm : ( bool_ne_word_word );
}

// void *operator+(void *, int)
__Pvoid__pl___Pvoid___sint : user_defined, inlined, promoted {
    fnm : "operator+" 'void *operator+(void *, int)'; 
    arg : ( __Pvoid:r __Pvoid:i __sint:i );
    prm : ( word_add_word_word_uint1 word_add_word_word );
}

// void *operator-(void *, int)
__Pvoid__mi___Pvoid___sint : user_defined, inlined, promoted {
    fnm : "operator-" 'void *operator-(void *, int)'; 
    arg : ( __Pvoid:r __Pvoid:i __sint:i );
    prm : ( word_sub_word_word_uint1 );
}

// int operator-(void *, void *)
__sint__mi___Pvoid___Pvoid : user_defined, inlined, promoted {
    fnm : "operator-" 'int operator-(void *, void *)'; 
    arg : ( __sint:r __Pvoid:i __Pvoid:i );
    prm : ( word_sub_word_word_uint1 );
}

// bool operator<(void *, void *)
bool__lt___Pvoid___Pvoid : user_defined, inlined, promoted {
    fnm : "operator<" 'bool operator<(void *, void *)'; 
    arg : ( bool:r __Pvoid:i __Pvoid:i );
    cpl : bool__ge___Pvoid___Pvoid;
    prm : ( bool_ltu_word_word );
}

// bool operator>=(void *, void *)
bool__ge___Pvoid___Pvoid : user_defined, inlined, promoted {
    fnm : "operator>=" 'bool operator>=(void *, void *)'; 
    arg : ( bool:r __Pvoid:i __Pvoid:i );
    cpl : bool__lt___Pvoid___Pvoid;
    prm : ( bool_geu_word_word );
}

// bool operator>(void *, void *)
bool__gt___Pvoid___Pvoid : user_defined, inlined, promoted {
    fnm : "operator>" 'bool operator>(void *, void *)'; 
    arg : ( bool:r __Pvoid:i __Pvoid:i );
    cpl : bool__le___Pvoid___Pvoid;
    prm : ( bool_gtu_word_word );
}

// bool operator<=(void *, void *)
bool__le___Pvoid___Pvoid : user_defined, inlined, promoted {
    fnm : "operator<=" 'bool operator<=(void *, void *)'; 
    arg : ( bool:r __Pvoid:i __Pvoid:i );
    cpl : bool__gt___Pvoid___Pvoid;
    prm : ( bool_leu_word_word );
}

// bool operator==(void *, void *)
bool__eq___Pvoid___Pvoid : user_defined, commutative, inlined, promoted {
    fnm : "operator==" 'bool operator==(void *, void *)'; 
    arg : ( bool:r __Pvoid:i __Pvoid:i );
    cpl : bool__ne___Pvoid___Pvoid;
    prm : ( bool_eq_word_word );
}

// bool operator!=(void *, void *)
bool__ne___Pvoid___Pvoid : user_defined, commutative, inlined, promoted {
    fnm : "operator!=" 'bool operator!=(void *, void *)'; 
    arg : ( bool:r __Pvoid:i __Pvoid:i );
    cpl : bool__eq___Pvoid___Pvoid;
    prm : ( bool_ne_word_word );
}

// void chess_stop()
chess_stop : chess_hosted, volatile {
}

// void chess_separator()
chess_separator : called {
}

// void chess_separator_scheduler()
chess_separator_scheduler : chess_separator {
}

// void chess_separator_scheduler(int)
chess_separator_scheduler : chess_separator {
}

// void chess_instruction_tracing_begin()
chess_instruction_tracing_begin : chess_separator_scheduler {
}

// void chess_instruction_tracing_end()
chess_instruction_tracing_end : chess_separator_scheduler {
}

// void chess_profile_begin()
chess_profile_begin : chess_separator_scheduler {
}

// void chess_profile_end()
chess_profile_end : chess_separator_scheduler {
}

// void divstep(unsigned, unsigned, unsigned, unsigned &, unsigned &)
void_divstep___uint___uint___uint___uint___uint : user_defined, promoted {
    fnm : "divstep" 'void divstep(unsigned, unsigned, unsigned, unsigned &, unsigned &)'; 
    arg : ( __uint:i __uint:i __uint:i __uint:o __uint:o );
    prm : ( void_divstep_word_word_word_word_word );
}

// int extend_sign(int)
__sint_extend_sign___sint : user_defined, promoted {
    fnm : "extend_sign" 'int extend_sign(int)'; 
    arg : ( __sint:r __sint:i );
    prm : ( word_extend_sign_word );
}

// unsigned add(unsigned, unsigned, uint1 &)
__uint_add___uint___uint_uint1 : user_defined, commutative, promoted {
    fnm : "add" 'unsigned add(unsigned, unsigned, uint1 &)'; 
    arg : ( __uint:r __uint:i __uint:i uint1:o );
    prm : ( word_add_word_word_uint1 );
}

// unsigned addc(unsigned, unsigned, uint1, uint1 &)
__uint_addc___uint___uint_uint1_uint1 : user_defined, commutative, promoted {
    fnm : "addc" 'unsigned addc(unsigned, unsigned, uint1, uint1 &)'; 
    arg : ( __uint:r __uint:i __uint:i uint1:i uint1:o );
    prm : ( word_addc_word_word_uint1_uint1 );
}

// unsigned sub(unsigned, unsigned, uint1 &)
__uint_sub___uint___uint_uint1 : user_defined, promoted {
    fnm : "sub" 'unsigned sub(unsigned, unsigned, uint1 &)'; 
    arg : ( __uint:r __uint:i __uint:i uint1:o );
    prm : ( word_sub_word_word_uint1 );
}

// unsigned subb(unsigned, unsigned, uint1, uint1 &)
__uint_subb___uint___uint_uint1_uint1 : user_defined, promoted {
    fnm : "subb" 'unsigned subb(unsigned, unsigned, uint1, uint1 &)'; 
    arg : ( __uint:r __uint:i __uint:i uint1:i uint1:o );
    prm : ( word_subb_word_word_uint1_uint1 );
}

// void mulss(int, int, int &, int &)
void_mulss___sint___sint___sint___sint : user_defined, commutative, promoted {
    fnm : "mulss" 'void mulss(int, int, int &, int &)'; 
    arg : ( __sint:i __sint:i __sint:o __sint:o );
    prm : ( void_mulss_word_word_word_word );
}

// void muluu(int, int, int &, int &)
void_muluu___sint___sint___sint___sint : user_defined, commutative, promoted {
    fnm : "muluu" 'void muluu(int, int, int &, int &)'; 
    arg : ( __sint:i __sint:i __sint:o __sint:o );
    prm : ( void_muluu_word_word_word_word );
}

// int min_(int, int)
__sint_min____sint___sint : user_defined, promoted {
    fnm : "min_" 'int min_(int, int)'; 
    arg : ( __sint:r __sint:i __sint:i );
    prm : ( word_minw_word_word );
}

// int max_(int, int)
__sint_max____sint___sint : user_defined, promoted {
    fnm : "max_" 'int max_(int, int)'; 
    arg : ( __sint:r __sint:i __sint:i );
    prm : ( word_maxw_word_word );
}

// int select(bool, int, int)
__sint_select_bool___sint___sint : user_defined, select, promoted {
    fnm : "select" 'int select(bool, int, int)'; 
    arg : ( __sint:r bool:i __sint:i __sint:i );
    prm : ( word_select_bool_word_word );
}

// unsigned select(bool, unsigned, unsigned)
__uint_select_bool___uint___uint : user_defined, select, promoted {
    fnm : "select" 'unsigned select(bool, unsigned, unsigned)'; 
    arg : ( __uint:r bool:i __uint:i __uint:i );
    prm : ( word_select_bool_word_word );
}

// int ext_abs_(int)
__sint_ext_abs____sint : user_defined, promoted {
    fnm : "ext_abs_" 'int ext_abs_(int)'; 
    arg : ( __sint:r __sint:i );
    prm : ( word_ext_abs_word );
}

// void chess_assert(bool)
void_chess_assert_bool : chess_assert {
    fnm : "chess_assert" 'void chess_assert(bool)'; 
    arg : ( word:i );
}

// void chess_report(bool)
void_chess_report_bool : chess_report {
    fnm : "chess_report" 'void chess_report(bool)'; 
    arg : ( word:i );
}

// void chess_assert(char)
void_chess_assert___cchar : chess_assert {
    fnm : "chess_assert" 'void chess_assert(char)'; 
    arg : ( word:i );
}

// void chess_report(char)
void_chess_report___cchar : chess_report {
    fnm : "chess_report" 'void chess_report(char)'; 
    arg : ( word:i );
}

// void chess_assert(signed char)
void_chess_assert___schar : chess_assert {
    fnm : "chess_assert" 'void chess_assert(signed char)'; 
    arg : ( word:i );
}

// void chess_report(signed char)
void_chess_report___schar : chess_report {
    fnm : "chess_report" 'void chess_report(signed char)'; 
    arg : ( word:i );
}

// void chess_assert(unsigned char)
void_chess_assert___uchar : chess_assert {
    fnm : "chess_assert" 'void chess_assert(unsigned char)'; 
    arg : ( word:i );
}

// void chess_report(unsigned char)
void_chess_report___uchar : chess_report {
    fnm : "chess_report" 'void chess_report(unsigned char)'; 
    arg : ( word:i );
}

// void chess_assert(short)
void_chess_assert___sshort : chess_assert {
    fnm : "chess_assert" 'void chess_assert(short)'; 
    arg : ( word:i );
}

// void chess_report(short)
void_chess_report___sshort : chess_report {
    fnm : "chess_report" 'void chess_report(short)'; 
    arg : ( word:i );
}

// void chess_assert(unsigned short)
void_chess_assert___ushort : chess_assert {
    fnm : "chess_assert" 'void chess_assert(unsigned short)'; 
    arg : ( word:i );
}

// void chess_report(unsigned short)
void_chess_report___ushort : chess_report {
    fnm : "chess_report" 'void chess_report(unsigned short)'; 
    arg : ( word:i );
}

// void chess_assert(int)
void_chess_assert___sint : chess_assert {
    fnm : "chess_assert" 'void chess_assert(int)'; 
    arg : ( word:i );
}

// void chess_report(int)
void_chess_report___sint : chess_report {
    fnm : "chess_report" 'void chess_report(int)'; 
    arg : ( word:i );
}

// void chess_assert(unsigned)
void_chess_assert___uint : chess_assert {
    fnm : "chess_assert" 'void chess_assert(unsigned)'; 
    arg : ( word:i );
}

// void chess_report(unsigned)
void_chess_report___uint : chess_report {
    fnm : "chess_report" 'void chess_report(unsigned)'; 
    arg : ( word:i );
}

// void chess_assert(long)
void_chess_assert___slong : chess_assert {
    fnm : "chess_assert" 'void chess_assert(long)'; 
    arg : ( word:i word:i );
}

// void chess_report(long)
void_chess_report___slong : chess_report {
    fnm : "chess_report" 'void chess_report(long)'; 
    arg : ( word:i word:i );
}

// void chess_assert(unsigned long)
void_chess_assert___ulong : chess_assert {
    fnm : "chess_assert" 'void chess_assert(unsigned long)'; 
    arg : ( word:i word:i );
}

// void chess_report(unsigned long)
void_chess_report___ulong : chess_report {
    fnm : "chess_report" 'void chess_report(unsigned long)'; 
    arg : ( word:i word:i );
}

// void chess_assert(long long)
void_chess_assert___slonglong : chess_assert {
    fnm : "chess_assert" 'void chess_assert(long long)'; 
    arg : ( word:i word:i word:i word:i );
}

// void chess_report(long long)
void_chess_report___slonglong : chess_report {
    fnm : "chess_report" 'void chess_report(long long)'; 
    arg : ( word:i word:i word:i word:i );
}

// void chess_assert(unsigned long long)
void_chess_assert___ulonglong : chess_assert {
    fnm : "chess_assert" 'void chess_assert(unsigned long long)'; 
    arg : ( word:i word:i word:i word:i );
}

// void chess_report(unsigned long long)
void_chess_report___ulonglong : chess_report {
    fnm : "chess_report" 'void chess_report(unsigned long long)'; 
    arg : ( word:i word:i word:i word:i );
}

// void chess_assert(void *)
void_chess_assert___Pvoid : chess_assert {
    fnm : "chess_assert" 'void chess_assert(void *)'; 
    arg : ( addr:i );
}

// void chess_report(void *)
void_chess_report___Pvoid : chess_report {
    fnm : "chess_report" 'void chess_report(void *)'; 
    arg : ( addr:i );
}

// void chess_assert(void chess_storage(PM) *)
void_chess_assert___PPMvoid : chess_assert {
    fnm : "chess_assert" 'void chess_assert(void chess_storage(PM) *)'; 
    arg : ( addr:i );
}

// void chess_report(void chess_storage(PM) *)
void_chess_report___PPMvoid : chess_report {
    fnm : "chess_report" 'void chess_report(void chess_storage(PM) *)'; 
    arg : ( addr:i );
}

// void chess_assert(void chess_storage(DM) *)
void_chess_assert___PDMvoid : chess_assert {
    fnm : "chess_assert" 'void chess_assert(void chess_storage(DM) *)'; 
    arg : ( addr:i );
}

// void chess_report(void chess_storage(DM) *)
void_chess_report___PDMvoid : chess_report {
    fnm : "chess_report" 'void chess_report(void chess_storage(DM) *)'; 
    arg : ( addr:i );
}

// void chess_assert(word)
void_chess_assert_word : chess_assert {
    fnm : "chess_assert" 'void chess_assert(word)'; 
    arg : ( word:i );
}

// void chess_report(word)
void_chess_report_word : chess_report {
    fnm : "chess_report" 'void chess_report(word)'; 
    arg : ( word:i );
}

// void chess_assert(addr)
void_chess_assert_addr : chess_assert {
    fnm : "chess_assert" 'void chess_assert(addr)'; 
    arg : ( addr:i );
}

// void chess_report(addr)
void_chess_report_addr : chess_report {
    fnm : "chess_report" 'void chess_report(addr)'; 
    arg : ( addr:i );
}

// void chess_assert(nint9)
void_chess_assert_nint9 : chess_assert {
    fnm : "chess_assert" 'void chess_assert(nint9)'; 
    arg : ( nint9:i );
}

// void chess_report(nint9)
void_chess_report_nint9 : chess_report {
    fnm : "chess_report" 'void chess_report(nint9)'; 
    arg : ( nint9:i );
}

// void chess_assert(sbyte)
void_chess_assert_sbyte : chess_assert {
    fnm : "chess_assert" 'void chess_assert(sbyte)'; 
    arg : ( sbyte:i );
}

// void chess_report(sbyte)
void_chess_report_sbyte : chess_report {
    fnm : "chess_report" 'void chess_report(sbyte)'; 
    arg : ( sbyte:i );
}

// void chess_assert(ubyte)
void_chess_assert_ubyte : chess_assert {
    fnm : "chess_assert" 'void chess_assert(ubyte)'; 
    arg : ( ubyte:i );
}

// void chess_report(ubyte)
void_chess_report_ubyte : chess_report {
    fnm : "chess_report" 'void chess_report(ubyte)'; 
    arg : ( ubyte:i );
}

// void chess_assert(uint1)
void_chess_assert_uint1 : chess_assert {
    fnm : "chess_assert" 'void chess_assert(uint1)'; 
    arg : ( uint1:i );
}

// void chess_report(uint1)
void_chess_report_uint1 : chess_report {
    fnm : "chess_report" 'void chess_report(uint1)'; 
    arg : ( uint1:i );
}

// void chess_assert(uint2)
void_chess_assert_uint2 : chess_assert {
    fnm : "chess_assert" 'void chess_assert(uint2)'; 
    arg : ( uint2:i );
}

// void chess_report(uint2)
void_chess_report_uint2 : chess_report {
    fnm : "chess_report" 'void chess_report(uint2)'; 
    arg : ( uint2:i );
}

// void chess_assert(uint3)
void_chess_assert_uint3 : chess_assert {
    fnm : "chess_assert" 'void chess_assert(uint3)'; 
    arg : ( uint3:i );
}

// void chess_report(uint3)
void_chess_report_uint3 : chess_report {
    fnm : "chess_report" 'void chess_report(uint3)'; 
    arg : ( uint3:i );
}

// void chess_assert(uint4)
void_chess_assert_uint4 : chess_assert {
    fnm : "chess_assert" 'void chess_assert(uint4)'; 
    arg : ( uint4:i );
}

// void chess_report(uint4)
void_chess_report_uint4 : chess_report {
    fnm : "chess_report" 'void chess_report(uint4)'; 
    arg : ( uint4:i );
}

// void chess_assert(iword)
void_chess_assert_iword : chess_assert {
    fnm : "chess_assert" 'void chess_assert(iword)'; 
    arg : ( iword:i );
}

// void chess_report(iword)
void_chess_report_iword : chess_report {
    fnm : "chess_report" 'void chess_report(iword)'; 
    arg : ( iword:i );
}

// unsigned long chess_cycle_count()
__ulong_chess_cycle_count : chess_cycle_count {
    fnm : "chess_cycle_count" 'unsigned long chess_cycle_count()'; 
    arg : ( word:r word:r );
    loc : ( R[0] R[1] );
}

// void chess_storage(PM) *chess_return_address()
__PPMvoid_chess_return_address : event_opn {
    fnm : "chess_return_address" 'void chess_storage(PM) *chess_return_address()'; 
    arg : ( __Pvoid:r );
}

// void chess_memory_fence()
void_chess_memory_fence : event_opn {
    fnm : "chess_memory_fence" 'void chess_memory_fence()'; 
}

// void chess_exit(int)
void_chess_exit___sint : chess_exit {
    fnm : "chess_exit" 'void chess_exit(int)'; 
    arg : ( word:i );
}

// void chess_hosted_io(void *)
void_chess_hosted_io___Pvoid : chess_hosted_io {
    fnm : "chess_hosted_io" 'void chess_hosted_io(void *)'; 
    arg : ( addr:i );
}

// void __pat1_stack_load(word &)
void___pat1_stack_load_word : stack_load {
    fnm : "__pat1_stack_load" 'void __pat1_stack_load(word &)'; 
    arg : ( word:o );
}

// void __pat2_stack_store(const word &)
void___pat2_stack_store_word : stack_store {
    fnm : "__pat2_stack_store" 'void __pat2_stack_store(const word &)'; 
    arg : ( word:i );
}

