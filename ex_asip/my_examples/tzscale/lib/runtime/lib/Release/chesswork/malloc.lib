
// File generated by noodle version O-2018.09#f5599cac26#190121, Tue May 28 12:03:42 2024
// Copyright 2014-2018 Synopsys, Inc. All rights reserved.
// noodle -B -I.. -I../isg -I../runtime/include -I../runtime/include -D__tct_patch__=300 -itzscale_chess.h -itzscale_chess.h +wlib/Release/chesswork ../runtime/src/malloc.c tzscale

toolrelease _18R3;

// void *malloc(size_t)
Fmalloc : user_defined, called {
    fnm : "malloc" 'void *malloc(size_t)'; 
    arg : ( w32:i w32:r w32:i );
    loc : ( R[1] R[10] R[11] );
    frm : ( );
    llv : 0 0 0 0 0 ;
}

// void free(void *)
Ffree : user_defined, called {
    fnm : "free" 'void free(void *)'; 
    arg : ( w32:i w32:i );
    loc : ( R[1] R[10] );
    frm : ( );
    llv : 0 0 0 0 0 ;
}

// void *calloc(size_t, size_t)
Fcalloc : user_defined, called {
    fnm : "calloc" 'void *calloc(size_t, size_t)'; 
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( R[1] R[10] R[11] R[12] );
    frm : ( );
    llv : 0 0 0 0 0 ;
}

// void *realloc(void *, size_t)
Frealloc : user_defined, called {
    fnm : "realloc" 'void *realloc(void *, size_t)'; 
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( R[1] R[10] R[11] R[12] );
    frm : ( );
    llv : 0 0 0 0 0 ;
}

// void *memcpy(void * restrict, const void * restrict, size_t)
Fmemcpy : user_defined, called {
    fnm : "memcpy" 'void *memcpy(void * restrict, const void * restrict, size_t)'; 
    arg : ( w32:i w32:r w32:i w32:i w32:i );
    loc : ( R[1] R[10] R[11] R[12] R[13] );
}

// void *memset(void *, int, size_t)
Fmemset : user_defined, called {
    fnm : "memset" 'void *memset(void *, int, size_t)'; 
    arg : ( w32:i w32:r w32:i w32:i w32:i );
    loc : ( R[1] R[10] R[11] R[12] R[13] );
}

// void init()
F__malloc_void_init : user_defined, called {
    fnm : "init" 'void init()'; 
    arg : ( w32:i );
    loc : ( R[1] );
    frm : ( );
    llv : 0 0 0 0 0 ;
}

// int block_size(void *)
F__sint_block_size___Pvoid : user_defined, called {
    fnm : "block_size" 'int block_size(void *)'; 
    arg : ( w32:i w32:r w32:i );
    loc : ( R[1] R[10] R[11] );
    frm : ( );
    llv : 0 0 0 0 0 ;
}

