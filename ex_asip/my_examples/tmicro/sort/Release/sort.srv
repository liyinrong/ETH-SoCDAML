
// File generated by darts version O-2018.09#f5599cac26#190121, Tue May 28 09:51:23 2024
// Copyright 2014-2018 Synopsys, Inc. All rights reserved.
// darts -B -I../lib +p -d -h -I../lib/runtime/include -D__tct_patch__=300 -L +Mhex +Ihex +u Release/sort tmicro

// Release: ipd O-2018.09-SP3
.label tmicro_init
.function tmicro_init tmicro_init
.src_ref 0 "tmicro_init.s" 10 first
	     0      "0010010000011010" // 	mvi sp,0x1 /* MW 2 */
	     1      "0000000000000001" // /* MW 1 */
.label _start_basic
.function _start_basic _start_basic
.src_ref 0 "tmicro_basic.c" 3 first
.src_ref 0 "tmicro_basic.c" 5 15 first
.no_stack_arguments
	     2      "0010111010011000" // 	cl 0x38 /* MW 2 */
	     3      "0000000000111000" // /* MW 1 */
.src_ref 0 "tmicro_basic.c" 5 4 first
.return_address
.swstall for_chess_exit
.exit
	     4      "0010111000000000" // 	nop 
.src_ref 0 "tmicro_basic.c" 6 4 first
.loop_nesting 1
	     5      "0010110111111111" // 	jr -1
.label __sint_find_min_location___P__sint___sint___sint
.function find_min_location __sint_find_min_location___P__sint___sint___sint
.src_ref 1 "sort.c" 9 first
	     6      "0000010101011010" // 	sub r5,r3,r2
	     7      "0000000001001010" // 	add r1,r1,r2
.src_ref 1 "sort.c" 11 12 first
	     8      "0010010000010011" // 	mvi r3,0x7fff /* MW 2 */
	     9      "0111111111111111" // /* MW 1 */
.src_ref 1 "sort.c" 13 4 first
	    10      "0010111011011101" // 	do r5,0x11 /* MW 2 */
	    11      "0000000000010001" // /* MW 1 */
.src_ref 1 "sort.c" 12 14 first
.delay_slot
	    12      "0011111111110000" // 	mvib r0,-0x1
.src_ref 1 "sort.c" 14 6 first
.loop_nesting 1
	    13      "0100000001010100" // 	ld r4,dm(r1++)
.src_ref 1 "sort.c" 14 10
	    14      "0000111000100011" // 	lt r4,r3
.src_ref 1 "sort.c" 14 1
	    15      "0010001011100011" // 	sel r3,r4,r3
.src_ref 1 "sort.c" 14 1
	    16      "0010001000010000" // 	sel r0,r2,r0
.src_ref 1 "sort.c" 13 34
.end_of_loop
.noswbrkpt
	    17      "0100000010010100" // 	ld r4,dm(r2++)
.src_ref 1 "sort.c" 19 4 first
.loop_nesting 0
	    18      "0010111010111000" // 	rt 
.label void_sort___P__sint___sint
.function sort void_sort___P__sint___sint
.src_ref 1 "sort.c" 24 first
.src_ref 1 "sort.c" 24 5
	    19      "0101000001010000" // 	addb sp, 5
	    20      "0111111111110001" // 	st r1,dm(sp-1)
.src_ref 1 "sort.c" 26 17
	    21      "0011000000000010" // 	mvib r2,0x0
.src_ref 1 "sort.c" 26 4 first
	    22      "0100000001100011" // 	ld r3,dm(r1--)
	    23      "0111111111100000" // 	st r0,dm(sp-2)
.src_ref 1 "sort.c" 26 4
	    24      "0000111010001010" // 	le r1,r2
	    25      "0111111111011011" // 	st lr,dm(sp-3)
	    26      "0111111111000010" // 	st r2,dm(sp-4)
.src_ref 1 "sort.c" 26 4
	    27      "0010111100010111" // 	jcr 23
.src_ref 1 "sort.c" 27 11
	    28      "0010010000010100" // 	mvi r4,0x6 /* MW 2 */
	    29      "0000000000000110" // /* MW 1 */
.src_ref 1 "sort.c" 26 4
	    30      "0010010100110001" // 	mv r3,r1
.src_ref 1 "sort.c" 26 4
	    31      "0010111011011011" // 	do r3,0x31 /* MW 2 */
	    32      "0000000000110001" // /* MW 1 */
.src_ref 1 "sort.c" 27 29
.delay_slot
	    33      "0110111111100001" // 	ld r1,dm(sp-2)
.loop_nesting 1
	    34      "0111111110110000" // 	st r0,dm(sp-5)
.src_ref 1 "sort.c" 27 11 first
.no_stack_arguments
	    35      "0010111010100100" // 	clid r4
.delay_slot
.swstall delay_slot
	    36      "0010111000000000" // 	nop 
.src_ref 1 "sort.c" 27 33
.delay_slot
	    37      "0110111111110011" // 	ld r3,dm(sp-1)
.src_ref 1 "sort.c" 29 9
.return_address
	    38      "0110111111100001" // 	ld r1,dm(sp-2)
.src_ref 1 "sort.c" 29 9 first
	    39      "0000000011000001" // 	add r3,r0,r1
.src_ref 1 "sort.c" 29 2
.src_ref 1 "sort.c" 28 13
	    40      "0110111110110000" // 	ld r0,dm(sp-5)
.src_ref 1 "sort.c" 29 9
	    41      "0100000011000101" // 	ld r5,dm(r3)
.src_ref 1 "sort.c" 28 13 first
	    42      "0100000000000100" // 	ld r4,dm(r0)
.src_ref 1 "sort.c" 26 33
	    43      "0110111111000010" // 	ld r2,dm(sp-4)
.src_ref 1 "sort.c" 29 2 first
	    44      "0100001000010101" // 	st r5,dm(r0++)
.src_ref 1 "sort.c" 30 2 first
	    45      "0100001011000100" // 	st r4,dm(r3)
.src_ref 1 "sort.c" 27 11
	    46      "0010010000010100" // 	mvi r4,0x6 /* MW 2 */
	    47      "0000000000000110" // /* MW 1 */
.src_ref 1 "sort.c" 26 33
	    48      "0100000010010110" // 	ld r6,dm(r2++)
.end_of_loop
.noswbrkpt
	    49      "0111111111000010" // 	st r2,dm(sp-4)
.loop_nesting 0
	    50      "0010110000000010" // 	jrd 2
.src_ref 1 "sort.c" 32
.delay_slot
	    51      "0110111111011011" // 	ld lr,dm(sp-3)
.src_ref 1 "sort.c" 32
	    52      "0110111111011011" // 	ld lr,dm(sp-3)
.src_ref 1 "sort.c" 32 first
	    53      "0010111011000000" // 	rtd 
.src_ref 1 "sort.c" 32
.delay_slot
	    54      "0101111110110000" // 	addb sp, -5
.delay_slot
.swstall delay_slot
	    55      "0010111000000000" // 	nop 
.label _main
.function main _main
.src_ref 1 "sort.c" 41 first
.src_ref 1 "sort.c" 41 4
	    56      "0101000010000000" // 	addb sp, 8
	    57      "0111111111011011" // 	st lr,dm(sp-3)
.src_ref 1 "sort.c" 43 4
	    58      "0010010000010000" // 	mvi r0,0xa1 /* MW 2 */
	    59      "0000000010100001" // /* MW 1 */
.src_ref 1 "sort.c" 43 4 first
	    60      "0010111010100000" // 	clid r0
.src_ref 1 "sort.c" 43 11
.delay_slot
	    61      "0010010000010001" // 	mvi r1,0x200a /* MW 2 */
	    62      "0010000000001010" // /* MW 1 */
.return_address
	    63      "0010010000010001" // 	mvi r1,0x2000 /* MW 2 */
	    64      "0010000000000000" // /* MW 1 */
	    65      "0111111111000001" // 	st r1,dm(sp-4)
.src_ref 1 "sort.c" 44 4
	    66      "0011000010100001" // 	mvib r1,0xa
.src_ref 1 "sort.c" 44 4 first
	    67      "0010111011011001" // 	do r1,0x50 /* MW 2 */
	    68      "0000000001010000" // /* MW 1 */
.delay_slot
.swstall delay_slot
	    69      "0010111000000000" // 	nop 
.src_ref 1 "sort.c" 44 57
.loop_nesting 1
	    70      "0110111111000000" // 	ld r0,dm(sp-4)
.src_ref 1 "sort.c" 44 40
	    71      "0010010000010001" // 	mvi r1,0x201b /* MW 2 */
	    72      "0010000000011011" // /* MW 1 */
.src_ref 1 "sort.c" 44 57
	    73      "0100000000010010" // 	ld r2,dm(r0++)
	    74      "0111111111000000" // 	st r0,dm(sp-4)
.src_ref 1 "sort.c" 44 33
	    75      "0010010000010000" // 	mvi r0,0xa1 /* MW 2 */
	    76      "0000000010100001" // /* MW 1 */
.src_ref 1 "sort.c" 44 33
	    77      "0010111010100000" // 	clid r0
.delay_slot
	    78      "0111111111110010" // 	st r2,dm(sp-1)
.delay_slot
.swstall delay_slot
	    79      "0010111000000000" // 	nop 
.end_of_loop
.return_address
.noswbrkpt
.swstall bsr_to_loop_end
	    80      "0010111000000000" // 	nop 
.src_ref 1 "sort.c" 45 4
.loop_nesting 0
	    81      "0010010000010000" // 	mvi r0,0xa1 /* MW 2 */
	    82      "0000000010100001" // /* MW 1 */
.src_ref 1 "sort.c" 45 4 first
	    83      "0010111010100000" // 	clid r0
.src_ref 1 "sort.c" 45 11
.delay_slot
	    84      "0010010000010001" // 	mvi r1,0x201f /* MW 2 */
	    85      "0010000000011111" // /* MW 1 */
.src_ref 1 "sort.c" 47 25 first
.return_address
.cycle_count
	    86      "0111111111000001" // 	st r1,dm(sp-4)
	    87      "0111111110110000" // 	st r0,dm(sp-5)
.src_ref 1 "sort.c" 44 4
	    88      "0011000010100001" // 	mvib r1,0xa
.src_ref 1 "sort.c" 49 9
	    89      "0010010000010000" // 	mvi r0,0x2000 /* MW 2 */
	    90      "0010000000000000" // /* MW 1 */
.src_ref 1 "sort.c" 49 4 first
.no_stack_arguments
	    91      "0010111010011000" // 	cl 0x13 /* MW 2 */
	    92      "0000000000010011" // /* MW 1 */
.src_ref 1 "sort.c" 51 24 first
.return_address
.cycle_count
	    93      "0111111110010000" // 	st r0,dm(sp-7)
	    94      "0111111110100001" // 	st r1,dm(sp-6)
.src_ref 1 "sort.c" 53 4
	    95      "0010010000010000" // 	mvi r0,0xa1 /* MW 2 */
	    96      "0000000010100001" // /* MW 1 */
.src_ref 1 "sort.c" 53 4 first
	    97      "0010111010100000" // 	clid r0
.src_ref 1 "sort.c" 53 11
.delay_slot
	    98      "0010010000010001" // 	mvi r1,0x2021 /* MW 2 */
	    99      "0010000000100001" // /* MW 1 */
.return_address
	   100      "0010010000010001" // 	mvi r1,0x2000 /* MW 2 */
	   101      "0010000000000000" // /* MW 1 */
	   102      "0111111110000001" // 	st r1,dm(sp-8)
.src_ref 1 "sort.c" 54 4
	   103      "0011000010100001" // 	mvib r1,0xa
.src_ref 1 "sort.c" 54 4 first
	   104      "0010111011011001" // 	do r1,0x75 /* MW 2 */
	   105      "0000000001110101" // /* MW 1 */
.delay_slot
.swstall delay_slot
	   106      "0010111000000000" // 	nop 
.src_ref 1 "sort.c" 54 57
.loop_nesting 1
	   107      "0110111110000000" // 	ld r0,dm(sp-8)
.src_ref 1 "sort.c" 54 40
	   108      "0010010000010001" // 	mvi r1,0x201b /* MW 2 */
	   109      "0010000000011011" // /* MW 1 */
.src_ref 1 "sort.c" 54 57
	   110      "0100000000010010" // 	ld r2,dm(r0++)
	   111      "0111111110000000" // 	st r0,dm(sp-8)
.src_ref 1 "sort.c" 54 33
	   112      "0010010000010000" // 	mvi r0,0xa1 /* MW 2 */
	   113      "0000000010100001" // /* MW 1 */
.src_ref 1 "sort.c" 54 33
	   114      "0010111010100000" // 	clid r0
.delay_slot
	   115      "0111111111110010" // 	st r2,dm(sp-1)
.delay_slot
.swstall delay_slot
	   116      "0010111000000000" // 	nop 
.end_of_loop
.return_address
.noswbrkpt
.swstall bsr_to_loop_end
	   117      "0010111000000000" // 	nop 
.src_ref 1 "sort.c" 55 4
.loop_nesting 0
	   118      "0010010000010000" // 	mvi r0,0xa1 /* MW 2 */
	   119      "0000000010100001" // /* MW 1 */
.src_ref 1 "sort.c" 55 4 first
	   120      "0010111010100000" // 	clid r0
.src_ref 1 "sort.c" 55 11
.delay_slot
	   121      "0010010000010001" // 	mvi r1,0x201f /* MW 2 */
	   122      "0010000000011111" // /* MW 1 */
.src_ref 1 "sort.c" 57 75
.return_address
	   123      "0110111110110001" // 	ld r1,dm(sp-5)
.src_ref 1 "sort.c" 57 75
	   124      "0110111110010000" // 	ld r0,dm(sp-7)
.src_ref 1 "sort.c" 57 75 first
	   125      "0000010000000001" // 	sub r0,r0,r1
.src_ref 1 "sort.c" 57 75
	   126      "0110111111000001" // 	ld r1,dm(sp-4)
.src_ref 1 "sort.c" 57 75
	   127      "0110111110100010" // 	ld r2,dm(sp-6)
	   128      "0111111111100000" // 	st r0,dm(sp-2)
.src_ref 1 "sort.c" 57 75
	   129      "0000011010010001" // 	subb r2,r2,r1
.src_ref 1 "sort.c" 57 4
	   130      "0010010000010000" // 	mvi r0,0xa1 /* MW 2 */
	   131      "0000000010100001" // /* MW 1 */
.src_ref 1 "sort.c" 57 11
	   132      "0010010000010001" // 	mvi r1,0x2030 /* MW 2 */
	   133      "0010000000110000" // /* MW 1 */
.src_ref 1 "sort.c" 57 4
	   134      "0010111010100000" // 	clid r0
.delay_slot
	   135      "0111111111110010" // 	st r2,dm(sp-1)
.delay_slot
.swstall delay_slot
	   136      "0010111000000000" // 	nop 
.src_ref 1 "sort.c" 59 4
.return_address
	   137      "0110111111011011" // 	ld lr,dm(sp-3)
.src_ref 1 "sort.c" 59 4 first
.end_of_main
	   138      "0010111011000000" // 	rtd 
.src_ref 1 "sort.c" 44 17
.delay_slot
	   139      "0011000000000000" // 	mvib r0,0x0
.src_ref 1 "sort.c" 59 4
.delay_slot
	   140      "0101111110000000" // 	addb sp, -8
.label __stdio_void_clib_hosted_io___PHosted_clib_vars
.function clib_hosted_io __stdio_void_clib_hosted_io___PHosted_clib_vars
.src_ref 2 "stdio.c" 86 first
.src_ref 2 "stdio.c" 93 first
.src_ref 2 "stdio.c" 92 4 first
.hosted_io
	   141      "0010111010111000" // 	rt 
.label vfprintf
.function vfprintf vfprintf
.src_ref 2 "stdio.c" 335 first
.src_ref 2 "stdio.c" 335 4
	   142      "0101000100110000" // 	addb sp, 19
.src_ref 2 "stdio.c" 337 11
	   143      "0010010100001010" // 	mv r0,sp
.src_ref 2 "stdio.c" 337 11
	   144      "0011111011010100" // 	mvib r4,-0x13
.src_ref 2 "stdio.c" 337 11 first
	   145      "0100000001000101" // 	ld r5,dm(r1)
.src_ref 2 "stdio.c" 337 11
	   146      "0000000000000100" // 	add r0,r0,r4
.src_ref 2 "stdio.c" 337 11
	   147      "0011111111110001" // 	mvib r1,-0x1
.src_ref 2 "stdio.c" 337 11
	   148      "0011000000100100" // 	mvib r4,0x2
	   149      "0111111111111011" // 	st lr,dm(sp-1)
.src_ref 2 "stdio.c" 337 11
	   150      "0111111011100101" // 	st r5,dm(sp-18)
.src_ref 2 "stdio.c" 337 11
	   151      "0111111100100010" // 	st r2,dm(sp-14)
.src_ref 2 "stdio.c" 337 11
	   152      "0111111111100011" // 	st r3,dm(sp-2)
.src_ref 2 "stdio.c" 337 11
	   153      "0111111011110001" // 	st r1,dm(sp-17)
.src_ref 2 "stdio.c" 337 11
	   154      "0100001000000100" // 	st r4,dm(r0)
.src_ref 2 "stdio.c" 337 11
.no_stack_arguments
	   155      "0010111010011000" // 	cl 0x8d /* MW 2 */
	   156      "0000000010001101" // /* MW 1 */
.src_ref 2 "stdio.c" 337 4
.return_address
	   157      "0110111111111011" // 	ld lr,dm(sp-1)
.src_ref 2 "stdio.c" 337 4
	   158      "0010111011000000" // 	rtd 
.src_ref 2 "stdio.c" 337 11
.delay_slot
	   159      "0110111011110000" // 	ld r0,dm(sp-17)
.src_ref 2 "stdio.c" 337 4
.delay_slot
	   160      "0101111011010000" // 	addb sp, -19
.label printf
.function printf printf
.src_ref 2 "stdio.c" 349 first
.src_ref 2 "stdio.c" 353 13
	   161      "0010010000010000" // 	mvi r0,0x2062 /* MW 2 */
	   162      "0010000001100010" // /* MW 1 */
.src_ref 2 "stdio.c" 349 4
	   163      "0010010100111010" // 	mv r3,sp
.src_ref 2 "stdio.c" 349 4
	   164      "0011000000000100" // 	mvib r4,0x0
.src_ref 2 "stdio.c" 353 13
	   165      "0010010100100001" // 	mv r2,r1
.src_ref 2 "stdio.c" 353 13 first
	   166      "0100000000000001" // 	ld r1,dm(r0)
.src_ref 2 "stdio.c" 349 4
	   167      "0000000011011100" // 	add r3,r3,r4
.src_ref 2 "stdio.c" 353 13
.tail_call
	   168      "0010111010000000" // 	j 0x8e /* MW 2 */
	   169      "0000000010001110" // /* MW 1 */
.dir 0 "%PROCDIR%"
.dir 1 "/home/soc_fs23_13/your_home/ex_asip/my_examples/tmicro/sort"
.dir 2 "%PROCDIR%/runtime/src"
