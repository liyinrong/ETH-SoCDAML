
// File generated by Go version O-2018.09#f5599cac26#190121, Tue May 28 10:45:22 2024
// Copyright 2014-2018 Synopsys, Inc. All rights reserved.
// go -B -I../lib -F -D__tct_patch__=300 -Verilog -otmicro_vlog -cgo_options.cfg -Itmicro_vlog/tmp_pdg -updg -updg_controller tmicro



`timescale 1ns/1ps

module tmicro
  #(// synopsys translate_off
    parameter reg_log = 1'b1,
    // synopsys translate_on
    parameter nid = 1
  )
  ( input                clock,
    input                reset_ext,
    input         [15:0] pm_read_in, // iword
    output        [15:0] pm_addr_out, // addr
    output        [15:0] pm_write_out, // iword
    output               pm_st_out, // std_logic
    output               pm_ld_out, // std_logic
    input  signed [15:0] dm_read_in, // word
    output        [15:0] dm_addr_out, // addr
    output signed [15:0] dm_write_out, // word
    output               dm_st_out, // std_logic
    output               dm_ld_out, // std_logic
    input                dma_ready_in, // uint1
    input          [7:0] ireq_inp_in, // ubyte
    output               halted_out_out, // uint1
    output               debug_out_out, // uint1
    output               trace_data_valid_out, // uint1
    output        [15:0] trace_data_out, // addr
    output         [7:0] iack_out_out, // ubyte
    input                jtag_tck_in,
    input         [15:0] jtag_ireg_in,
    input                jtag_si_in,
    output               jtag_so_out,
    input                jtag_capture_dr_in,
    input                jtag_update_dr_in,
    input                jtag_shift_dr_in,
    input                jtag_update_ir_in,
    input                dbg_ext_break_in,
    output               dbg_set_break_out
  );


  wire   [1:0] lfr; // uint2
  wire   [1:0] lfw2; // uint2
  wire   ocd_incr_addr; // bool
  wire   [15:0] ocd_addr_r; // addr
  wire   [15:0] ocd_addr_w; // addr
  wire   signed [15:0] alur; // word
  wire   signed [15:0] alus; // word
  wire   cbr; // uint1
  wire   cndr; // bool
  wire   signed [15:0] mulu; // word
  wire   signed [15:0] mulv; // word
  wire   signed [15:0] alut; // word
  wire   cbw; // uint1
  wire   cndw; // bool
  wire   signed [15:0] mulx1; // word
  wire   signed [15:0] muly1; // word
  wire   signed [15:0] shf; // word
  wire   signed [15:0] shr; // word
  wire   signed [15:0] sht; // word
  wire   signed [15:0] mulr; // word
  wire   signed [15:0] muls; // word
  wire   signed [15:0] mulx2; // word
  wire   signed [15:0] muly_acc; // word
  wire   signed [15:0] muly2; // word
  wire   signed [15:0] ag1m; // word
  wire   signed [15:0] ag1p; // word
  wire   signed [15:0] ag1q; // word
  wire   [7:0] iack_pcu_out; // ubyte
  wire   [7:0] ireq_inp; // ubyte
  wire   proc_stall;
  wire   [7:0] iack_out; // ubyte
  wire   [7:0] ireq_pcu_inp; // ubyte
  wire   die1; // bool
  wire   diid; // bool
  wire   ier; // uint1
  wire   [7:0] imr; // ubyte
  wire   issue_sig;
  wire   jc; // bool
  wire   jcr; // bool
  wire   [15:0] lcr; // addr
  wire   [15:0] ler; // addr
  wire   [1:0] lfra; // uint2
  wire   [15:0] lsr; // addr
  wire   mw_stall;
  wire   ocd_dis_int; // uint1
  wire   ocd_exe; // uint1
  wire   [15:0] ocd_instr_r; // iword
  wire   ocd_req; // uint1
  wire   signed [7:0] offs; // sbyte
  wire   [15:0] pcr; // addr
  wire   [15:0] pm_read_dp; // iword
  wire   tcc; // bool
  wire   [15:0] trgt; // addr
  wire   [1:0] LC_lcr_cntrl_nxtpc_pdg_r_a; // uint2
  wire   LC_lcr_cntrl_nxtpc_pdg_r_en; // std_logic
  wire   LC_lcw_cntrl_nxtpc_pdg_en; // std_logic
  wire   [1:0] LC_lcw_cntrl_nxtpc_pdg_w_a; // uint2
  wire   [1:0] LE_ler_cntrl_nxtpc_pdg_r_a; // uint2
  wire   LE_ler_cntrl_nxtpc_pdg_r_en; // std_logic
  wire   LF_lfw_cntrl_nxtpc_pdg_en; // std_logic
  wire   [1:0] LS_lsr_cntrl_nxtpc_pdg_r_a; // uint2
  wire   LS_lsr_cntrl_nxtpc_pdg_r_en; // std_logic
  wire   PC_pcw_cntrl_nxtpc_pdg_en; // std_logic
  wire   debug_out; // uint1
  wire   halted_out; // uint1
  wire   kill_ID;
  wire   [15:0] lcw1; // addr
  wire   [1:0] lfw1; // uint2
  wire   [15:0] lnk_if; // addr
  wire   [15:0] lnk_pf; // addr
  wire   mcw_kill;
  wire   [15:0] pcw; // addr
  wire   [15:0] pm_addr1; // addr
  wire   pm_ld_pdg_en; // std_logic
  wire   [15:0] trace_data; // addr
  wire   trace_data_valid; // uint1
  wire   trn_ID_valid;
  wire   [15:0] trn_IR_ID;
  wire   [2:0] R_ag1p_graddr; // uint3
  wire   [2:0] R_rre1_graddr; // uint3
  wire   [2:0] R_rse1_graddr; // uint3
  wire   [2:0] R_rtid_gwaddr; // uint3
  wire   [2:0] __R_rte1_waddr; // uint3
  wire   signed [15:0] mulx; // word
  wire   signed [15:0] muly; // word
  wire   signed [15:0] rte1; // word
  wire   signed [15:0] rtid; // word
  wire   signed [15:0] ag1p1; // word
  wire   signed [15:0] rre1; // word
  wire   signed [15:0] rse1; // word
  wire   signed [15:0] __lnk_pf_w_LR; // word
  wire   signed [15:0] __pm_read_w_LR; // word
  wire   signed [15:0] dm_read_dp; // word
  wire   signed [15:0] wbus; // word
  wire   signed [15:0] __pm_write_r_LR; // word
  wire   signed [15:0] __trgt_r_LR; // word
  wire   signed [15:0] dm_write3; // word
  wire   signed [15:0] wbus3; // word
  wire   signed [15:0] __pm_read_w_SP; // word
  wire   signed [15:0] __pm_write_r_SP; // word
  wire   signed [15:0] ag1p2; // word
  wire   signed [15:0] dm_write4; // word
  wire   signed [15:0] wbus4; // word
  wire   [1:0] lfw; // uint2
  wire   [15:0] lsw; // addr
  wire   [15:0] lew; // addr
  wire   [1:0] __LC_lcw_wad; // uint2
  wire   [15:0] lcw; // addr
  wire   __pm_read_w_SR_el; // bool
  wire   dm_read_rec1; // bool
  wire   wbus_rec8; // bool
  wire   __pm_write_r_SR_el; // bool
  wire   dm_write_rec1; // bool
  wire   wbus_rec1; // bool
  wire   __pm_read_w_SR_el1; // uint1
  wire   dm_read_rec2; // uint1
  wire   wbus_rec9; // uint1
  wire   __pm_write_r_SR_el1; // uint1
  wire   dm_write_rec2; // uint1
  wire   wbus_rec2; // uint1
  wire   __pm_read_w_SR_el2; // uint1
  wire   dm_read_rec3; // uint1
  wire   iew; // uint1
  wire   wbus_rec10; // uint1
  wire   __pm_write_r_SR_el2; // uint1
  wire   dm_write_rec3; // uint1
  wire   wbus_rec3; // uint1
  wire   [1:0] __pm_read_w_SR_el3; // uint2
  wire   [1:0] dm_read_rec4; // uint2
  wire   [1:0] wbus_rec11; // uint2
  wire   [1:0] __pm_write_r_SR_el3; // uint2
  wire   [1:0] dm_write_rec4; // uint2
  wire   [1:0] wbus_rec4; // uint2
  wire   [2:0] __pm_read_w_SR_el4; // uint3
  wire   [2:0] dm_read_rec5; // uint3
  wire   [2:0] wbus_rec12; // uint3
  wire   [2:0] __pm_write_r_SR_el4; // uint3
  wire   [2:0] dm_write_rec5; // uint3
  wire   [2:0] wbus_rec5; // uint3
  wire   [7:0] __pm_read_w_SR_el5; // ubyte
  wire   [7:0] dm_read_rec6; // ubyte
  wire   [7:0] wbus_rec13; // ubyte
  wire   [7:0] __pm_write_r_SR_el5; // ubyte
  wire   [7:0] dm_write_rec6; // ubyte
  wire   [7:0] wbus_rec6; // ubyte
  wire   signed [15:0] __lnk_if_w_ILR; // word
  wire   signed [15:0] __pm_read_w_ILR; // word
  wire   signed [15:0] __pm_write_r_ILR; // word
  wire   signed [15:0] __trgt_r_ILR; // word
  wire   signed [15:0] dm_write1; // word
  wire   signed [15:0] wbus1; // word
  wire   signed [15:0] __pm_read_w_ISR; // word
  wire   signed [15:0] __pm_write_r_ISR; // word
  wire   signed [15:0] dm_write2; // word
  wire   signed [15:0] wbus2; // word
  wire   en_ocd_addr_pdcw; // std_logic
  wire   ocd_ld_DM; // bool
  wire   ocd_ld_PM; // bool
  wire   ocd_st_DM; // bool
  wire   ocd_st_PM; // bool
  wire   [15:0] ocd_addr_pdcw; // addr
  wire   [15:0] ocd_addr_pdcr; // addr
  wire   __ocd_ld_DME1_r; // bool
  wire   __ocd_st_DME1_r; // bool
  wire   en_ocd_data_pdcw; // std_logic
  wire   signed [15:0] ocd_data_pdcw; // word
  wire   signed [15:0] dm_write5; // word
  wire   signed [15:0] ocd_data_pdcr; // word
  wire   signed [15:0] wbus5; // word
  wire   __ocd_ld_PME1_r; // bool
  wire   __ocd_st_PME1_r; // bool
  wire   en_ocd_instr_pdcw; // std_logic
  wire   [15:0] ocd_instr_pdcw; // iword
  wire   [15:0] ocd_instr_pdcr; // iword
  wire   [15:0] pm_write1; // iword
  wire   [15:0] pm_addr_dp; // addr
  wire   [15:0] pm_read; // iword
  wire   [15:0] pm_write_dp; // iword
  wire   [15:0] pm_addr; // addr
  wire   pm_ld; // std_logic
  wire   pm_st; // std_logic
  wire   [15:0] pm_write; // iword
  wire   [15:0] dm_addr_dp; // addr
  wire   signed [15:0] dm_read; // word
  wire   signed [15:0] dm_write_dp; // word
  wire   [15:0] dm_addr; // addr
  wire   dm_ld; // std_logic
  wire   dm_st; // std_logic
  wire   signed [15:0] dm_write; // word
  wire   [15:0] __pm_addr_pipe_r; // addr
  wire   [15:0] __dm_addr_pipe_r; // addr
  wire   signed [7:0] C_sbyte_E1_11_4; // sbyte
  wire   signed [15:0] C_word_E1_ID_15_0; // word
  wire   dma_ready; // uint1
  wire   signed [8:0] C_nint9_ID_11_4; // nint9
  wire   signed [7:0] C_sbyte_ID_11_4; // sbyte
  wire   signed [15:0] C_word_ID_IF_15_0; // word
  wire   signed [7:0] C_sbyte_E1_7_0; // sbyte
  wire   signed [7:0] C_sbyte_ID_7_0; // sbyte
  wire   ocd_swbreak_req; // bool
  wire   [1:0] cbus; // uint2
  wire   [15:0] __pm_addr_pipe_w; // addr
  wire   [15:0] __dm_addr_pipe_w; // addr
  wire   __ocd_ld_DMID_w; // bool
  wire   __ocd_st_DMID_w; // bool
  wire   __ocd_ld_PMID_w; // bool
  wire   __ocd_st_PMID_w; // bool
  wire   [15:0] dbg_data_pi;
  wire   dbg_data_we;
  wire   dbg_ext_break;
  wire   dbg_instr_exec;
  wire   [15:0] jtag_ireg;
  wire   [15:0] dbg_data_po;
  wire   dbg_reset;
  wire   dbg_set_break;
  wire   dbg_trace_cfg_wr; // uint1
  wire   dbg_trace_rd_cnt; // uint1
  wire   dbg_trace_rd; // uint1
  wire   jtag_capture_dr;
  wire   jtag_shift_dr;
  wire   jtag_si;
  wire   jtag_tck;
  wire   jtag_update_dr;
  wire   jtag_update_ir;
  wire   jtag_so;
  wire   [85:0] E1_enabling;
  wire   [25:0] ID_enabling;
  wire   [15:0] reg_IR_E1;
  wire   [15:0] reg_IR_ID;

  wire reset;

  assign reset = reset_ext || dbg_reset;

  assign pm_read = pm_read_in;
  assign pm_addr_out = pm_addr;
  assign pm_write_out = pm_write;
  assign pm_st_out = pm_st;
  assign pm_ld_out = pm_ld;
  assign dm_read = dm_read_in;
  assign dm_addr_out = dm_addr;
  assign dm_write_out = dm_write;
  assign dm_st_out = dm_st;
  assign dm_ld_out = dm_ld;
  assign dma_ready = dma_ready_in;
  assign ireq_inp = ireq_inp_in;
  assign halted_out_out = halted_out;
  assign debug_out_out = debug_out;
  assign trace_data_valid_out = trace_data_valid;
  assign trace_data_out = trace_data;
  assign iack_out_out = iack_out;
  assign jtag_tck = jtag_tck_in;
  assign jtag_ireg = jtag_ireg_in;
  assign jtag_si = jtag_si_in;
  assign jtag_so_out = jtag_so;
  assign jtag_capture_dr = jtag_capture_dr_in;
  assign jtag_update_dr = jtag_update_dr_in;
  assign jtag_shift_dr = jtag_shift_dr_in;
  assign jtag_update_ir = jtag_update_ir_in;
  assign dbg_ext_break = dbg_ext_break_in;
  assign dbg_set_break_out = dbg_set_break;

  assign C_sbyte_E1_11_4 = $signed(reg_IR_E1[11:4]);
  assign C_word_E1_ID_15_0 = $signed(reg_IR_ID[15:0]);
  assign C_nint9_ID_11_4 = $signed({1'b1, reg_IR_ID[11:4]});
  assign C_sbyte_ID_11_4 = $signed(reg_IR_ID[11:4]);
  assign C_word_ID_IF_15_0 = $signed(trn_IR_ID[15:0]);
  assign C_sbyte_E1_7_0 = $signed(reg_IR_E1[7:0]);
  assign C_sbyte_ID_7_0 = $signed(reg_IR_ID[7:0]);

  // expanded mux_rtid
  // (rtid_copy0_ag1q_ID)
  // [load_store.n:76][load_store.n:77](tmicro.n:154)
  assign rtid = ag1q;

  // expanded mux_lsw
  // (lsw_copy0_lnk_pf_E1)
  // [control.n:179]
  assign lsw = lnk_pf;

  // expanded mux_lew
  // (lew_copy0___CTaddr_cstP16_E1)
  // [control.n:174]
  assign lew = reg_IR_ID[15:0];

  // expanded mux_alur
  // (alur_copy0_rre1_E1)
  // [alu.n:65][alu.n:232][alu.n:86][alu.n:107][alu.n:137][alu.n:153][alu.n:166](tmicro.n:159)
  assign alur = rre1;

  // expanded mux_alus
  // (alus_copy0_rse1_E1)
  // [alu.n:66][alu.n:87][alu.n:108][alu.n:122][alu.n:138][alu.n:154](tmicro.n:160)
  assign alus = rse1;

  // expanded mux_shr
  // (shr_copy0_rre1_E1)
  // [alu.n:183](tmicro.n:159)
  assign shr = rre1;

  // expanded mux_shf
  // (shf_copy0_rse1_E1)
  // [alu.n:184](tmicro.n:160)
  assign shf = rse1;

  // expanded mux_mulr
  // (mulr_copy0_rre1_E1)
  // [alu.n:215](tmicro.n:159)
  assign mulr = rre1;

  // expanded mux_muls
  // (muls_copy0_rse1_E1)
  // [alu.n:216](tmicro.n:160)
  assign muls = rse1;

  // expanded mux___pm_read_w_SP
  // (__pm_read_w_SP_copy0_pm_read_E1)
  // [load_store.n:116](tmicro.n:130)
  assign __pm_read_w_SP = $signed(pm_read_dp);

  // expanded mux___pm_read_w_LR
  // (__pm_read_w_LR_copy0_pm_read_E1)
  // [load_store.n:116](tmicro.n:131)
  assign __pm_read_w_LR = $signed(pm_read_dp);

  // expanded mux___pm_read_w_SR
  // (__pm_read_w_SR_copy0_pm_read_E1)
  // [load_store.n:116](tmicro.n:132)
  assign __pm_read_w_SR_el5 = pm_read_dp[15:8];
  assign __pm_read_w_SR_el4 = pm_read_dp[7:5];
  assign __pm_read_w_SR_el3 = pm_read_dp[4:3];
  assign __pm_read_w_SR_el2 = pm_read_dp[2];
  assign __pm_read_w_SR_el1 = pm_read_dp[1];
  assign __pm_read_w_SR_el = pm_read_dp[0];

  // expanded mux___pm_read_w_ILR
  // (__pm_read_w_ILR_copy0_pm_read_E1)
  // [load_store.n:116](tmicro.n:134)
  assign __pm_read_w_ILR = $signed(pm_read_dp);

  // expanded mux___pm_read_w_ISR
  // (__pm_read_w_ISR_copy0_pm_read_E1)
  // [load_store.n:116](tmicro.n:135)
  assign __pm_read_w_ISR = $signed(pm_read_dp);

  // expanded mux___lnk_pf_w_LR
  // (__lnk_pf_w_LR_copy0_lnk_pf_ID)
  // [control.n:132]
  assign __lnk_pf_w_LR = $signed(lnk_pf);

  // expanded mux___lnk_if_w_ILR
  // (__lnk_if_w_ILR_copy0_lnk_if_ID)
  // [control.n:220]
  assign __lnk_if_w_ILR = $signed(lnk_if);

  // expanded mux___ocd_ld_DMID_w
  // (__ocd_ld_DMID_w_cp_ocd_ld_DM_ID)
  assign __ocd_ld_DMID_w = ocd_ld_DM;

  // expanded mux___ocd_st_DMID_w
  // (__ocd_st_DMID_w_cp_ocd_st_DM_ID)
  assign __ocd_st_DMID_w = ocd_st_DM;

  // expanded mux___ocd_ld_PMID_w
  // (__ocd_ld_PMID_w_cp_ocd_ld_PM_ID)
  assign __ocd_ld_PMID_w = ocd_ld_PM;

  // expanded mux___ocd_st_PMID_w
  // (__ocd_st_PMID_w_cp_ocd_st_PM_ID)
  assign __ocd_st_PMID_w = ocd_st_PM;

  // expanded mux_wbus_rec7
  // (cp_wbus_rec7_E1)
  // [move.n:48][move.n:55][move.n:62][move.n:106][control.n:238][dma.n:70](tmicro.n:132)
  assign wbus_rec13 = wbus[15:8];
  assign wbus_rec12 = wbus[7:5];
  assign wbus_rec11 = wbus[4:3];
  assign wbus_rec10 = wbus[2];
  assign wbus_rec9 = wbus[1];
  assign wbus_rec8 = wbus[0];

  // expanded mux_dm_read_rec
  // (cp_dm_read_rec_E1)
  // [load_store.n:51][load_store.n:93](tmicro.n:132)
  assign dm_read_rec6 = dm_read_dp[15:8];
  assign dm_read_rec5 = dm_read_dp[7:5];
  assign dm_read_rec4 = dm_read_dp[4:3];
  assign dm_read_rec3 = dm_read_dp[2];
  assign dm_read_rec2 = dm_read_dp[1];
  assign dm_read_rec1 = dm_read_dp[0];

  dlflg inst_dlflg(
      .bin_selector_E1(E1_enabling[1:0]),
      .lfr_in(lfr),
      .lfw_out(lfw2));

  ocd_addr_incr inst_ocd_addr_incr(
      .ocd_incr_addr_in(ocd_incr_addr),
      .ocd_addr_r_in(ocd_addr_r),
      .ocd_addr_w_out(ocd_addr_w));

  alu inst_alu(
      .bin_selector_E1(E1_enabling[6:2]),
      .alur_in(alur),
      .alus_in(alus),
      .cbr_in(cbr),
      .cndr_in(cndr),
      .mulu_in(mulu),
      .mulv_in(mulv),
      .alut_out(alut),
      .cbw_out(cbw),
      .cndw_out(cndw),
      .mulx_out(mulx1),
      .muly_out(muly1));

  sh inst_sh(
      .bin_selector_E1(E1_enabling[8:7]),
      .shf_in(shf),
      .shr_in(shr),
      .sht_out(sht));

  mul inst_mul(
      .bin_selector_E1(E1_enabling[10:9]),
      .mulr_in(mulr),
      .muls_in(muls),
      .mulv_in(mulv),
      .mulx_out(mulx2),
      .muly_acc_out(muly_acc),
      .muly_out(muly2));

  ag1 inst_ag1(
      .ohe_selector_ID(ID_enabling[0]),
      .ag1m_in(ag1m),
      .ag1p_in(ag1p),
      .ag1q_out(ag1q));

  interrupt_io inst_interrupt_io(
      .reset(reset),
      .clock(clock),
      .iack_pcu_out_in(iack_pcu_out),
      .ireq_inp_in(ireq_inp),
      .proc_stall_in(proc_stall),
      .iack_out_out(iack_out),
      .ireq_pcu_inp_out(ireq_pcu_inp));

  controller inst_controller(
      .reset(reset),
      .clock(clock),
      .bin_selector_E1(E1_enabling[13:11]),
      .bin_selector_ID(ID_enabling[3:1]),
      .die1_in(die1),
      .diid_in(diid),
      .ier_in(ier),
      .imr_in(imr),
      .ireq_pcu_inp_in(ireq_pcu_inp),
      .issue_sig_in(issue_sig),
      .jc_in(jc),
      .jcr_in(jcr),
      .lcr_in(lcr),
      .ler_in(ler),
      .lfra_in(lfra),
      .lsr_in(lsr),
      .mw_stall_in(mw_stall),
      .ocd_dis_int_in(ocd_dis_int),
      .ocd_exe_in(ocd_exe),
      .ocd_instr_r_in(ocd_instr_r),
      .ocd_req_in(ocd_req),
      .offs_in(offs),
      .pcr_in(pcr),
      .pm_read_in(pm_read_dp),
      .tcc_in(tcc),
      .trgt_in(trgt),
      .LC_lcr_cntrl_nxtpc_pdg_r_a_out(LC_lcr_cntrl_nxtpc_pdg_r_a),
      .LC_lcr_cntrl_nxtpc_pdg_r_en_out(LC_lcr_cntrl_nxtpc_pdg_r_en),
      .LC_lcw_cntrl_nxtpc_pdg_en_out(LC_lcw_cntrl_nxtpc_pdg_en),
      .LC_lcw_cntrl_nxtpc_pdg_w_a_out(LC_lcw_cntrl_nxtpc_pdg_w_a),
      .LE_ler_cntrl_nxtpc_pdg_r_a_out(LE_ler_cntrl_nxtpc_pdg_r_a),
      .LE_ler_cntrl_nxtpc_pdg_r_en_out(LE_ler_cntrl_nxtpc_pdg_r_en),
      .LF_lfw_cntrl_nxtpc_pdg_en_out(LF_lfw_cntrl_nxtpc_pdg_en),
      .LS_lsr_cntrl_nxtpc_pdg_r_a_out(LS_lsr_cntrl_nxtpc_pdg_r_a),
      .LS_lsr_cntrl_nxtpc_pdg_r_en_out(LS_lsr_cntrl_nxtpc_pdg_r_en),
      .PC_pcw_cntrl_nxtpc_pdg_en_out(PC_pcw_cntrl_nxtpc_pdg_en),
      .debug_out_out(debug_out),
      .halted_out_out(halted_out),
      .iack_pcu_out_out(iack_pcu_out),
      .kill_ID_out(kill_ID),
      .lcw_out(lcw1),
      .lfw_out(lfw1),
      .lnk_if_out(lnk_if),
      .lnk_pf_out(lnk_pf),
      .mcw_kill_out(mcw_kill),
      .pcw_out(pcw),
      .pm_addr_out(pm_addr1),
      .pm_ld_pdg_en_out(pm_ld_pdg_en),
      .proc_stall_out(proc_stall),
      .trace_data_out(trace_data),
      .trace_data_valid_out(trace_data_valid),
      .trn_ID_valid_out(trn_ID_valid),
      .trn_IR_ID_out(trn_IR_ID));

  reg_R
  // synopsys translate_off
  #(reg_log, "R")
  // synopsys translate_on
  inst_reg_R(
      .clock(clock),
      .ohe_selector_E1(E1_enabling[16]),
      .bin_selector_E1(E1_enabling[15:14]),
      .ohe_selector_ID(ID_enabling[4]),
      .R_ag1p_graddr_in(R_ag1p_graddr),
      .R_rre1_graddr_in(R_rre1_graddr),
      .R_rse1_graddr_in(R_rse1_graddr),
      .R_rtid_gwaddr_in(R_rtid_gwaddr),
      .__R_rte1_waddr_in(__R_rte1_waddr),
      .mulx_in(mulx),
      .muly_in(muly),
      .rte1_in(rte1),
      .rtid_in(rtid),
      .ag1p_out(ag1p1),
      .mulu_out(mulu),
      .mulv_out(mulv),
      .rre1_out(rre1),
      .rse1_out(rse1));

  reg_LR
  // synopsys translate_off
  #(reg_log, "LR")
  // synopsys translate_on
  inst_reg_LR(
      .reset(reset),
      .clock(clock),
      .bin_selector_E1(E1_enabling[19:17]),
      .ohe_selector_ID(ID_enabling[5]),
      .__lnk_pf_w_LR_in(__lnk_pf_w_LR),
      .__pm_read_w_LR_in(__pm_read_w_LR),
      .dm_read_dp_in(dm_read_dp),
      .wbus_in(wbus),
      .__pm_write_r_LR_out(__pm_write_r_LR),
      .__trgt_r_LR_out(__trgt_r_LR),
      .dm_write_out(dm_write3),
      .wbus_out(wbus3));

  reg_SP
  // synopsys translate_off
  #(reg_log, "SP")
  // synopsys translate_on
  inst_reg_SP(
      .clock(clock),
      .bin_selector_E1(E1_enabling[21:20]),
      .ohe_selector_ID(ID_enabling[6]),
      .__pm_read_w_SP_in(__pm_read_w_SP),
      .ag1q_in(ag1q),
      .dm_read_dp_in(dm_read_dp),
      .wbus_in(wbus),
      .__pm_write_r_SP_out(__pm_write_r_SP),
      .ag1p_out(ag1p2),
      .dm_write_out(dm_write4),
      .wbus_out(wbus4));

  reg_PC
  // synopsys translate_off
  #(reg_log, "PC")
  // synopsys translate_on
  inst_reg_PC(
      .reset(reset),
      .clock(clock),
      .PC_pcw_cntrl_nxtpc_pdg_en_in(PC_pcw_cntrl_nxtpc_pdg_en),
      .pcw_in(pcw),
      .pcr_out(pcr));

  reg_LF
  // synopsys translate_off
  #(reg_log, "LF")
  // synopsys translate_on
  inst_reg_LF(
      .reset(reset),
      .clock(clock),
      .ohe_selector_E1(E1_enabling[22]),
      .LF_lfw_cntrl_nxtpc_pdg_en_in(LF_lfw_cntrl_nxtpc_pdg_en),
      .lfw_in(lfw),
      .lfr_out(lfr),
      .lfra_out(lfra));

  reg_LS
  // synopsys translate_off
  #(reg_log, "LS")
  // synopsys translate_on
  inst_reg_LS(
      .clock(clock),
      .ohe_selector_E1(E1_enabling[23]),
      .LS_lsr_cntrl_nxtpc_pdg_r_en_in(LS_lsr_cntrl_nxtpc_pdg_r_en),
      .LS_lsr_cntrl_nxtpc_pdg_r_a_in(LS_lsr_cntrl_nxtpc_pdg_r_a),
      .lfw_in(lfw),
      .lsw_in(lsw),
      .lsr_out(lsr));

  reg_LE
  // synopsys translate_off
  #(reg_log, "LE")
  // synopsys translate_on
  inst_reg_LE(
      .clock(clock),
      .ohe_selector_E1(E1_enabling[24]),
      .LE_ler_cntrl_nxtpc_pdg_r_en_in(LE_ler_cntrl_nxtpc_pdg_r_en),
      .LE_ler_cntrl_nxtpc_pdg_r_a_in(LE_ler_cntrl_nxtpc_pdg_r_a),
      .lew_in(lew),
      .lfw_in(lfw),
      .ler_out(ler));

  reg_LC
  // synopsys translate_off
  #(reg_log, "LC")
  // synopsys translate_on
  inst_reg_LC(
      .clock(clock),
      .ohe_selector_E1(E1_enabling[25]),
      .LC_lcr_cntrl_nxtpc_pdg_r_en_in(LC_lcr_cntrl_nxtpc_pdg_r_en),
      .LC_lcw_cntrl_nxtpc_pdg_en_in(LC_lcw_cntrl_nxtpc_pdg_en),
      .LC_lcr_cntrl_nxtpc_pdg_r_a_in(LC_lcr_cntrl_nxtpc_pdg_r_a),
      .__LC_lcw_wad_in(__LC_lcw_wad),
      .lcw_in(lcw),
      .lcr_out(lcr));

  reg_CND
  // synopsys translate_off
  #(reg_log, "CND")
  // synopsys translate_on
  inst_reg_CND(
      .reset(reset),
      .clock(clock),
      .ohe_selector_E1(E1_enabling[26]),
      .bin_selector_E1(E1_enabling[29:27]),
      .__pm_read_w_SR_el_in(__pm_read_w_SR_el),
      .cndw_in(cndw),
      .dm_read_rec1_in(dm_read_rec1),
      .wbus_rec8_in(wbus_rec8),
      .__pm_write_r_SR_el_out(__pm_write_r_SR_el),
      .cndr_out(cndr),
      .dm_write_rec1_out(dm_write_rec1),
      .wbus_rec1_out(wbus_rec1));

  reg_CB
  // synopsys translate_off
  #(reg_log, "CB")
  // synopsys translate_on
  inst_reg_CB(
      .clock(clock),
      .bin_selector_E1(E1_enabling[32:30]),
      .__pm_read_w_SR_el1_in(__pm_read_w_SR_el1),
      .cbw_in(cbw),
      .dm_read_rec2_in(dm_read_rec2),
      .wbus_rec9_in(wbus_rec9),
      .__pm_write_r_SR_el1_out(__pm_write_r_SR_el1),
      .cbr_out(cbr),
      .dm_write_rec2_out(dm_write_rec2),
      .wbus_rec2_out(wbus_rec2));

  reg_IE
  // synopsys translate_off
  #(reg_log, "IE")
  // synopsys translate_on
  inst_reg_IE(
      .reset(reset),
      .clock(clock),
      .bin_selector_E1(E1_enabling[35:33]),
      .__pm_read_w_SR_el2_in(__pm_read_w_SR_el2),
      .dm_read_rec3_in(dm_read_rec3),
      .iew_in(iew),
      .wbus_rec10_in(wbus_rec10),
      .__pm_write_r_SR_el2_out(__pm_write_r_SR_el2),
      .dm_write_rec3_out(dm_write_rec3),
      .ier_out(ier),
      .wbus_rec3_out(wbus_rec3));

  reg_SRa
  // synopsys translate_off
  #(reg_log, "SRa")
  // synopsys translate_on
  inst_reg_SRa(
      .clock(clock),
      .bin_selector_E1(E1_enabling[37:36]),
      .__pm_read_w_SR_el3_in(__pm_read_w_SR_el3),
      .dm_read_rec4_in(dm_read_rec4),
      .wbus_rec11_in(wbus_rec11),
      .__pm_write_r_SR_el3_out(__pm_write_r_SR_el3),
      .dm_write_rec4_out(dm_write_rec4),
      .wbus_rec4_out(wbus_rec4));

  reg_SRb
  // synopsys translate_off
  #(reg_log, "SRb")
  // synopsys translate_on
  inst_reg_SRb(
      .clock(clock),
      .bin_selector_E1(E1_enabling[39:38]),
      .__pm_read_w_SR_el4_in(__pm_read_w_SR_el4),
      .dm_read_rec5_in(dm_read_rec5),
      .wbus_rec12_in(wbus_rec12),
      .__pm_write_r_SR_el4_out(__pm_write_r_SR_el4),
      .dm_write_rec5_out(dm_write_rec5),
      .wbus_rec5_out(wbus_rec5));

  reg_IM
  // synopsys translate_off
  #(reg_log, "IM")
  // synopsys translate_on
  inst_reg_IM(
      .clock(clock),
      .bin_selector_E1(E1_enabling[42:40]),
      .__CTubyte_cstP8_E1_in(reg_IR_E1[7:0]),
      .__pm_read_w_SR_el5_in(__pm_read_w_SR_el5),
      .dm_read_rec6_in(dm_read_rec6),
      .wbus_rec13_in(wbus_rec13),
      .__pm_write_r_SR_el5_out(__pm_write_r_SR_el5),
      .dm_write_rec6_out(dm_write_rec6),
      .imr_out(imr),
      .wbus_rec6_out(wbus_rec6));

  reg_ILR
  // synopsys translate_off
  #(reg_log, "ILR")
  // synopsys translate_on
  inst_reg_ILR(
      .clock(clock),
      .bin_selector_E1(E1_enabling[44:43]),
      .ohe_selector_ID(ID_enabling[7]),
      .__lnk_if_w_ILR_in(__lnk_if_w_ILR),
      .__pm_read_w_ILR_in(__pm_read_w_ILR),
      .dm_read_dp_in(dm_read_dp),
      .wbus_in(wbus),
      .__pm_write_r_ILR_out(__pm_write_r_ILR),
      .__trgt_r_ILR_out(__trgt_r_ILR),
      .dm_write_out(dm_write1),
      .wbus_out(wbus1));

  reg_ISR
  // synopsys translate_off
  #(reg_log, "ISR")
  // synopsys translate_on
  inst_reg_ISR(
      .clock(clock),
      .bin_selector_E1(E1_enabling[46:45]),
      .__pm_read_w_ISR_in(__pm_read_w_ISR),
      .dm_read_dp_in(dm_read_dp),
      .wbus_in(wbus),
      .__pm_write_r_ISR_out(__pm_write_r_ISR),
      .dm_write_out(dm_write2),
      .wbus_out(wbus2));

  reg_ocd_addr
  // synopsys translate_off
  #(reg_log, "ocd_addr")
  // synopsys translate_on
  inst_reg_ocd_addr(
      .clock(clock),
      .en_ocd_addr_pdcw_in(en_ocd_addr_pdcw),
      .ocd_incr_addr_in(ocd_incr_addr),
      .ocd_ld_DM_in(ocd_ld_DM),
      .ocd_ld_PM_in(ocd_ld_PM),
      .ocd_st_DM_in(ocd_st_DM),
      .ocd_st_PM_in(ocd_st_PM),
      .ocd_addr_pdcw_in(ocd_addr_pdcw),
      .ocd_addr_w_in(ocd_addr_w),
      .ocd_addr_pdcr_out(ocd_addr_pdcr),
      .ocd_addr_r_out(ocd_addr_r));

  reg_ocd_data
  // synopsys translate_off
  #(reg_log, "ocd_data")
  // synopsys translate_on
  inst_reg_ocd_data(
      .clock(clock),
      .ohe_selector_E1(E1_enabling[47]),
      .__ocd_ld_DME1_r_in(__ocd_ld_DME1_r),
      .__ocd_st_DME1_r_in(__ocd_st_DME1_r),
      .en_ocd_data_pdcw_in(en_ocd_data_pdcw),
      .dm_read_dp_in(dm_read_dp),
      .ocd_data_pdcw_in(ocd_data_pdcw),
      .wbus_in(wbus),
      .dm_write_out(dm_write5),
      .ocd_data_pdcr_out(ocd_data_pdcr),
      .wbus_out(wbus5));

  reg_ocd_instr
  // synopsys translate_off
  #(reg_log, "ocd_instr")
  // synopsys translate_on
  inst_reg_ocd_instr(
      .clock(clock),
      .__ocd_ld_PME1_r_in(__ocd_ld_PME1_r),
      .__ocd_st_PME1_r_in(__ocd_st_PME1_r),
      .en_ocd_instr_pdcw_in(en_ocd_instr_pdcw),
      .ocd_instr_pdcw_in(ocd_instr_pdcw),
      .pm_read_dp_in(pm_read_dp),
      .ocd_instr_pdcr_out(ocd_instr_pdcr),
      .ocd_instr_r_out(ocd_instr_r),
      .pm_write_out(pm_write1));

  mem_PM inst_mem_PM(
      .bin_selector_E1(E1_enabling[49:48]),
      .ohe_selector_ID(ID_enabling[8]),
      .__ocd_st_PME1_r_in(__ocd_st_PME1_r),
      .ocd_ld_PM_in(ocd_ld_PM),
      .pm_ld_pdg_en_in(pm_ld_pdg_en),
      .pm_addr_dp_in(pm_addr_dp),
      .pm_read_in(pm_read),
      .pm_write_dp_in(pm_write_dp),
      .pm_addr_out(pm_addr),
      .pm_ld_out(pm_ld),
      .pm_read_dp_out(pm_read_dp),
      .pm_st_out(pm_st),
      .pm_write_out(pm_write));

  mem_DM inst_mem_DM(
      .bin_selector_E1(E1_enabling[51:50]),
      .ohe_selector_ID(ID_enabling[9]),
      .__ocd_st_DME1_r_in(__ocd_st_DME1_r),
      .ocd_ld_DM_in(ocd_ld_DM),
      .dm_addr_dp_in(dm_addr_dp),
      .dm_read_in(dm_read),
      .dm_write_dp_in(dm_write_dp),
      .dm_addr_out(dm_addr),
      .dm_ld_out(dm_ld),
      .dm_read_dp_out(dm_read_dp),
      .dm_st_out(dm_st),
      .dm_write_out(dm_write));

  mux_pm_addr inst_mux_pm_addr(
      .ohe_selector_E1(E1_enabling[52]),
      .ohe_selector_ID(ID_enabling[10]),
      .__ocd_st_PME1_r_in(__ocd_st_PME1_r),
      .ocd_ld_PM_in(ocd_ld_PM),
      .pm_ld_pdg_en_in(pm_ld_pdg_en),
      .__pm_addr_pipe_r_in(__pm_addr_pipe_r),
      .ag1p_in(ag1p),
      .ocd_addr_r_in(ocd_addr_r),
      .pm_addr1_in(pm_addr1),
      .pm_addr_out(pm_addr_dp));

  mux_pm_write inst_mux_pm_write(
      .bin_selector_E1(E1_enabling[55:53]),
      .__ocd_st_PME1_r_in(__ocd_st_PME1_r),
      .__pm_write_r_ILR_in(__pm_write_r_ILR),
      .__pm_write_r_ISR_in(__pm_write_r_ISR),
      .__pm_write_r_LR_in(__pm_write_r_LR),
      .__pm_write_r_SP_in(__pm_write_r_SP),
      .__pm_write_r_SR_el1_in(__pm_write_r_SR_el1),
      .__pm_write_r_SR_el2_in(__pm_write_r_SR_el2),
      .__pm_write_r_SR_el3_in(__pm_write_r_SR_el3),
      .__pm_write_r_SR_el4_in(__pm_write_r_SR_el4),
      .__pm_write_r_SR_el5_in(__pm_write_r_SR_el5),
      .__pm_write_r_SR_el_in(__pm_write_r_SR_el),
      .pm_write1_in(pm_write1),
      .rse1_in(rse1),
      .pm_write_out(pm_write_dp));

  mux_dm_addr inst_mux_dm_addr(
      .ohe_selector_E1(E1_enabling[56]),
      .bin_selector_ID(ID_enabling[12:11]),
      .__ocd_st_DME1_r_in(__ocd_st_DME1_r),
      .ocd_ld_DM_in(ocd_ld_DM),
      .__dm_addr_pipe_r_in(__dm_addr_pipe_r),
      .ag1p_in(ag1p),
      .ag1q_in(ag1q),
      .ocd_addr_r_in(ocd_addr_r),
      .dm_addr_out(dm_addr_dp));

  mux_dm_write inst_mux_dm_write(
      .bin_selector_E1(E1_enabling[59:57]),
      .__ocd_st_DME1_r_in(__ocd_st_DME1_r),
      .dm_write1_in(dm_write1),
      .dm_write2_in(dm_write2),
      .dm_write3_in(dm_write3),
      .dm_write4_in(dm_write4),
      .dm_write5_in(dm_write5),
      .dm_write_rec1_in(dm_write_rec1),
      .dm_write_rec2_in(dm_write_rec2),
      .dm_write_rec3_in(dm_write_rec3),
      .dm_write_rec4_in(dm_write_rec4),
      .dm_write_rec5_in(dm_write_rec5),
      .dm_write_rec6_in(dm_write_rec6),
      .rse1_in(rse1),
      .dm_write_out(dm_write_dp));

  mux_rte1 inst_mux_rte1(
      .bin_selector_E1(E1_enabling[62:60]),
      .alut_in(alut),
      .dm_read_dp_in(dm_read_dp),
      .pm_read_dp_in(pm_read_dp),
      .sht_in(sht),
      .wbus_in(wbus),
      .rte1_out(rte1));

  mux_lfw inst_mux_lfw(
      .ohe_selector_E1(E1_enabling[63]),
      .LF_lfw_cntrl_nxtpc_pdg_en_in(LF_lfw_cntrl_nxtpc_pdg_en),
      .lfw1_in(lfw1),
      .lfw2_in(lfw2),
      .lfw_out(lfw));

  mux_lcw inst_mux_lcw(
      .bin_selector_E1(E1_enabling[65:64]),
      .LC_lcw_cntrl_nxtpc_pdg_en_in(LC_lcw_cntrl_nxtpc_pdg_en),
      .__CTaddr_cstP32_E1_in(trn_IR_ID[15:0]),
      .lcw1_in(lcw1),
      .rse1_in(rse1),
      .lcw_out(lcw));

  mux_iew inst_mux_iew(
      .bin_selector_E1(E1_enabling[67:66]),
      .iew_out(iew));

  mux1 inst_mux_mulx(
      .bin_selector_E1(E1_enabling[69:68]),
      .in0(mulx1),
      .in1(mulx2),
      .out0(mulx));

  mux1 inst_mux_muly(
      .bin_selector_E1(E1_enabling[71:70]),
      .in0(muly1),
      .in1(muly2),
      .out0(muly));

  mux_wbus inst_mux_wbus(
      .bin_selector_E1(E1_enabling[75:72]),
      .__CTsbyte_cstP4_E1_in(C_sbyte_E1_11_4),
      .__CTword_cstP16_E1_in(C_word_E1_ID_15_0),
      .dma_ready_in(dma_ready),
      .rse1_in(rse1),
      .wbus1_in(wbus1),
      .wbus2_in(wbus2),
      .wbus3_in(wbus3),
      .wbus4_in(wbus4),
      .wbus5_in(wbus5),
      .wbus_rec1_in(wbus_rec1),
      .wbus_rec2_in(wbus_rec2),
      .wbus_rec3_in(wbus_rec3),
      .wbus_rec4_in(wbus_rec4),
      .wbus_rec5_in(wbus_rec5),
      .wbus_rec6_in(wbus_rec6),
      .wbus_out(wbus));

  mux_ag1p inst_mux_ag1p(
      .bin_selector_ID(ID_enabling[14:13]),
      .ag1p1_in(ag1p1),
      .ag1p2_in(ag1p2),
      .ag1p_out(ag1p));

  mux_ag1m inst_mux_ag1m(
      .bin_selector_ID(ID_enabling[17:15]),
      .__CTnint9_cstP4_7_0_ID_in(C_nint9_ID_11_4),
      .__CTsbyte_cstP4_ID_in(C_sbyte_ID_11_4),
      .__CTword_cstP16_ID_in(C_word_ID_IF_15_0),
      .ag1m_out(ag1m));

  mux_trgt inst_mux_trgt(
      .bin_selector_E1(E1_enabling[77:76]),
      .bin_selector_ID(ID_enabling[19:18]),
      .__CTaddr_cstP16_E1_in(reg_IR_ID[15:0]),
      .__CTaddr_cstP16_ID_in(trn_IR_ID[15:0]),
      .__CTuint4_cstP12_ID_in(reg_IR_ID[3:0]),
      .__trgt_r_ILR_in(__trgt_r_ILR),
      .__trgt_r_LR_in(__trgt_r_LR),
      .rse1_in(rse1),
      .trgt_out(trgt));

  mux_offs inst_mux_offs(
      .ohe_selector_E1(E1_enabling[78]),
      .ohe_selector_ID(ID_enabling[20]),
      .__CTsbyte_cstP8_E1_in(C_sbyte_E1_7_0),
      .__CTsbyte_cstP8_ID_in(C_sbyte_ID_7_0),
      .offs_out(offs));

  mux_tcc inst_mux_tcc(
      .ohe_selector_E1(E1_enabling[79]),
      .cndr_in(cndr),
      .tcc_out(tcc));

  mux2 inst_mux_diid(
      .ohe_selector_ID(ID_enabling[21]),
      .out0(diid));

  mux3 inst_mux_die1(
      .ohe_selector_E1(E1_enabling[80]),
      .out0(die1));

  mux3 inst_mux_jcr(
      .ohe_selector_E1(E1_enabling[81]),
      .out0(jcr));

  mux3 inst_mux_jc(
      .ohe_selector_E1(E1_enabling[82]),
      .out0(jc));

  mux2 inst_mux_ocd_swbreak_req(
      .ohe_selector_ID(ID_enabling[22]),
      .out0(ocd_swbreak_req));

  mux_cbus inst_mux_cbus(
      .bin_selector_E1(E1_enabling[84:83]),
      .__CTuint2_cstP10_E1_in(reg_IR_E1[5:4]),
      .cbus_out(cbus));

  pipe1 inst_pipe___pm_addr_pipe(
      .clock(clock),
      .in0(__pm_addr_pipe_w),
      .out0(__pm_addr_pipe_r));

  mux___pm_addr_pipe_w inst_mux___pm_addr_pipe_w(
      .ohe_selector_ID(ID_enabling[23]),
      .ocd_st_PM_in(ocd_st_PM),
      .ag1p_in(ag1p),
      .ocd_addr_r_in(ocd_addr_r),
      .__pm_addr_pipe_w_out(__pm_addr_pipe_w));

  pipe1 inst_pipe___dm_addr_pipe(
      .clock(clock),
      .in0(__dm_addr_pipe_w),
      .out0(__dm_addr_pipe_r));

  mux___dm_addr_pipe_w inst_mux___dm_addr_pipe_w(
      .bin_selector_ID(ID_enabling[25:24]),
      .ocd_st_DM_in(ocd_st_DM),
      .ag1p_in(ag1p),
      .ag1q_in(ag1q),
      .ocd_addr_r_in(ocd_addr_r),
      .__dm_addr_pipe_w_out(__dm_addr_pipe_w));

  mux___LC_lcw_wad inst_mux___LC_lcw_wad(
      .ohe_selector_E1(E1_enabling[85]),
      .LC_lcw_cntrl_nxtpc_pdg_en_in(LC_lcw_cntrl_nxtpc_pdg_en),
      .LC_lcw_cntrl_nxtpc_pdg_w_a_in(LC_lcw_cntrl_nxtpc_pdg_w_a),
      .lfw_in(lfw),
      .__LC_lcw_wad_out(__LC_lcw_wad));

  pipe2 inst_pipe___ocd_ld_DME1(
      .clock(clock),
      .in0(__ocd_ld_DMID_w),
      .out0(__ocd_ld_DME1_r));

  pipe2 inst_pipe___ocd_st_DME1(
      .clock(clock),
      .in0(__ocd_st_DMID_w),
      .out0(__ocd_st_DME1_r));

  pipe2 inst_pipe___ocd_ld_PME1(
      .clock(clock),
      .in0(__ocd_ld_PMID_w),
      .out0(__ocd_ld_PME1_r));

  pipe2 inst_pipe___ocd_st_PME1(
      .clock(clock),
      .in0(__ocd_st_PMID_w),
      .out0(__ocd_st_PME1_r));

  debug_controller #(nid) inst_debug_controller(
      .reset_ext(reset_ext),
      .clock(clock),
      .dbg_data_pi_in(dbg_data_pi),
      .dbg_data_we_in(dbg_data_we),
      .dbg_ext_break_in(dbg_ext_break),
      .dbg_instr_exec_in(dbg_instr_exec),
      .dm_addr_in(dm_addr),
      .dm_st_in(dm_st),
      .jtag_ireg_in(jtag_ireg),
      .ocd_addr_pdcr_in(ocd_addr_pdcr),
      .ocd_data_pdcr_in(ocd_data_pdcr),
      .ocd_instr_pdcr_in(ocd_instr_pdcr),
      .ocd_swbreak_req_in(ocd_swbreak_req),
      .pcw_in(pcw),
      .pm_addr_in(pm_addr),
      .pm_st_in(pm_st),
      .dbg_data_po_out(dbg_data_po),
      .dbg_reset_out(dbg_reset),
      .dbg_set_break_out(dbg_set_break),
      .dbg_trace_cfg_wr_out(dbg_trace_cfg_wr),
      .dbg_trace_rd_cnt_out(dbg_trace_rd_cnt),
      .dbg_trace_rd_out(dbg_trace_rd),
      .en_ocd_addr_pdcw_out(en_ocd_addr_pdcw),
      .en_ocd_data_pdcw_out(en_ocd_data_pdcw),
      .en_ocd_instr_pdcw_out(en_ocd_instr_pdcw),
      .ocd_addr_pdcw_out(ocd_addr_pdcw),
      .ocd_data_pdcw_out(ocd_data_pdcw),
      .ocd_dis_int_out(ocd_dis_int),
      .ocd_exe_out(ocd_exe),
      .ocd_incr_addr_out(ocd_incr_addr),
      .ocd_instr_pdcw_out(ocd_instr_pdcw),
      .ocd_ld_DM_out(ocd_ld_DM),
      .ocd_ld_PM_out(ocd_ld_PM),
      .ocd_req_out(ocd_req),
      .ocd_st_DM_out(ocd_st_DM),
      .ocd_st_PM_out(ocd_st_PM));

  jtag_interface inst_jtag_interface(
      .reset_ext(reset_ext),
      .clock(clock),
      .dbg_data_po_in(dbg_data_po),
      .jtag_capture_dr_in(jtag_capture_dr),
      .jtag_shift_dr_in(jtag_shift_dr),
      .jtag_si_in(jtag_si),
      .jtag_tck_in(jtag_tck),
      .jtag_update_dr_in(jtag_update_dr),
      .jtag_update_ir_in(jtag_update_ir),
      .dbg_data_pi_out(dbg_data_pi),
      .dbg_data_we_out(dbg_data_we),
      .dbg_instr_exec_out(dbg_instr_exec),
      .jtag_so_out(jtag_so));

  decoder inst_decoder(
      .reset(reset),
      .clock(clock),
      .kill_ID_in(kill_ID),
      .mcw_kill_in(mcw_kill),
      .trn_ID_valid_in(trn_ID_valid),
      .trn_IR_ID(trn_IR_ID),
      .E1_enabling_out(E1_enabling),
      .ID_enabling_out(ID_enabling),
      .R_ag1p_grad_out(R_ag1p_graddr),
      .R_rre1_grad_out(R_rre1_graddr),
      .R_rse1_grad_out(R_rse1_graddr),
      .R_rtid_gwad_out(R_rtid_gwaddr),
      .__R_rte1_wad_out(__R_rte1_waddr),
      .issue_sig_out(issue_sig),
      .mw_stall_out(mw_stall),
      .reg_IR_E1_out(reg_IR_E1),
      .reg_IR_ID_out(reg_IR_ID));

endmodule
