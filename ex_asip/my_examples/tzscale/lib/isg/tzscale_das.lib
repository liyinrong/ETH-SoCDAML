
// File generated by noodle version O-2018.09#f5599cac26#190121, Tue May 28 12:03:14 2024
// Copyright 2014-2018 Synopsys, Inc. All rights reserved.
// noodle -pa -B -Iisg +wisg -Iruntime/include -D__tct_patch__=300 -D__darts__ -D__programmers_view__ tzscale

toolrelease _18R3;

//-- CHESS GENERIC TYPES AND PRIMITIVES --

typ any<0>;
typ void<0>;
prim typ bool<1u>[0,1,1];

// general properties:

add_sub_inv {
}
chess_view {
}
chess_view_opn {
}
commutative {
}
conversion {
}
dont_disable_chess_view {
}
envelope {
}
envelope_open : envelope {
}
envelope_close : envelope {
}
isr_envelope_open : envelope_open {
}
isr_envelope_close : envelope_close {
}
event_opn {
}
early_clobbers {
}
expensive {
}
explicit {
}
immediate_repeat_count {
}
inlined {
}
isolate_status_uses {
}
multicycle {
}
no_duplicate_move {
}
no_pdg_definition {
}
primitive {
}
promoted {
}
promotion_conversion {
}
right_padding {
}
right_truncate {
}
unfoldable {
}
unused {
}
user_defined {
}
volatile {
}

assembly : event_opn, volatile {
}
called : event_opn {
}
chess_hosted : called {
}
chess_assert : chess_hosted, volatile {
}
chess_report : chess_hosted, volatile {
}
chess_stop : chess_hosted, volatile {
}
chess_cycle_count : chess_hosted {
}
chess_exit : chess_hosted, volatile {
}
chess_hosted_io : chess_hosted, volatile {
}
chess_separator : called {
}
chess_separator_scheduler : chess_separator {
}
chess_instruction_tracing_begin : chess_separator_scheduler {
}
chess_instruction_tracing_end : chess_separator_scheduler {
}
chess_profile_begin : chess_separator_scheduler {
}
chess_profile_end : chess_separator_scheduler {
}
chess_seqloop_test : chess_separator_scheduler {
}
chess_seqloop_end : chess_separator_scheduler {
}
chess_tcl_break : chess_separator_scheduler {
}
isr : event_opn {
}

nop : volatile {
}
never_returns : volatile {
}

instruction_properties {
}
instruction_class : instruction_properties {
}
cycles : instruction_properties {
}
words : instruction_properties {
}
alt_cycles : instruction_properties {
}
delay_slots : instruction_properties {
}
pc_offset : instruction_properties {
}

// SFG annotations:

chess_frequent_else : event_opn {
}
chess_frequent_then : event_opn {
}
chess_no_warn_pipelining : event_opn {
}
chess_adjust_preamble_size : event_opn {
    arg : ( any:i );
}
chess_minimum_folded_loop_size : event_opn {
    arg : ( any:i );
}
chess_modulo_scheduling_budget_ratio : event_opn {
    arg : ( any:i );
}
chess_pipeline_non_leaf_loop_select_solution : event_opn {
    arg : ( any:i );
}

// source/sink operations:

inp : event_opn {
    arg : ( any:o );
}
out : event_opn {
    arg : ( any:i );
}
tr_inp : event_opn {
    arg : ( any:o );
}
tr_out : event_opn {
    arg : ( any:i );
}

st_def : event_opn {
    arg : ( any:o );
}
source : event_opn {
    arg : ( any:o );
}
sink : event_opn {
    arg : ( any:i );
}
sync_sink : sink {
}
to_route_sink : sink {
}
seqif_sink : event_opn {
    arg : ( any:i );
}

const : event_opn {
    arg : ( any:o );
}
const_inp : event_opn {
    arg : ( any:o );
}

undefined : event_opn {
    arg : ( any:o );
}
never : undefined {
}

chain_tie : event_opn {
}

keep_dead : event_opn {
    arg : ( any:i );
}

// flow operations:

flow_opn : event_opn {
}
fork : flow_opn {
    arg : ( any:o any:o any:i );
}
join : flow_opn {
    arg : ( any:o any:i any:i );
}

branch : fork {
}
merge : join {
}
gmerge : join {
}

entry : join {
}
exit : fork {
}

call_link : flow_opn {
    arg : ( any:o any:i );
}
// irremovable call link:
defval_call_link : event_opn {
    arg : ( any:o any:i );
}

sync_link : flow_opn {
    arg : ( any:o any:i );
}
sync_never : flow_opn {
    arg : ( any:o any:i );
}
// var assignment in C:
assign : event_opn {
    arg : ( any:r any:i );
}
deassign : assign {
}
direct_assign : assign {
}
strict_assign : assign {
}
// conversion without move:
in_situ_conv : event_opn {
    arg : ( any:r any:i );
}
// trn assignment in nML:
copy {
    arg : ( any:r any:i );
}
excl_in_move {
}

// heading operations:

heading : event_opn {
    arg : ( any:i );
}
if_expr : heading {
}
else_expr : event_opn {
    arg : ( any:i );
}
while_expr : heading {
}
for_count : heading {
}

// control operations:

cntrl {
}
absolute {
}
relative {
}
seqelsif {
}

call : cntrl {
}
near_call : cntrl {
}
doloop : cntrl {
}
doloop_no_cntrl : cntrl {
}
repeat : cntrl {
}
halt : cntrl, volatile {
}
jump : cntrl {
}
jti : jump {
}
ret : cntrl {
}
near_ret : cntrl {
}
rti : ret {
}
zloop_sink : event_opn {
    arg : ( any:i any:i any:i );
}
zloop_sink_absolute : zloop_sink, absolute {
}
zloop_sink_relative : zloop_sink, relative {
}

multi_register_pop {
}
multi_register_push {
}

// storage operations:

storage_opn {
}
l_storage_opn : storage_opn {
}
s_storage_opn : storage_opn {
}

a_fetch : l_storage_opn {
    arg : ( any:r any:i any:i );
}
a_update : s_storage_opn {
    arg : ( any:o any:i any:i );
}

load : a_fetch {
}
store : a_update {
}

read_file : a_fetch {
}
write_file : a_update {
}

read_reg : l_storage_opn {
    arg : ( any:r any:i );
}
write_reg : s_storage_opn {
    arg : ( any:r any:i );
}

// alternate storage operations:

alt_load {
}
alt_store {
}
guarded_load : alt_load {
}
guarded_store : alt_store {
}
select {
}

// reserved register access:
rd_res_reg {
    arg : ( any:r any:i );
}
wr_res_reg {
    arg : ( any:o any:i );
}

// bundles:

bndl_opn {
}
// functional bundle generated by cosel:
func_bndl : bndl_opn {
}
// move bundle generated by amnesia, showcolor & rover:
mv_bndl : bndl_opn {
    arg : ( any:r any:i );
}

namespace {
}

right_padding12 : right_padding {
}

multicycle32 : multicycle {
}


//-- PRIMITIVE TYPES --

prim typ w08<8t>[-128,127,1];
prim typ w16<16t>[-32768,32767,1];
prim typ w32<32t>[-2147483648,2147483647,1];
prim typ addr<32u>[0,4294967295,1];
prim typ iword<32u>[0,4294967295,1];
prim typ uint1<1u>[0,1,1];
prim typ uint3<3u>[0,7,1];
prim typ uint4<4u>[0,15,1];
prim typ uint5<5u>[0,31,1];
prim typ uint5nz<5u>[1,31,1];
prim typ uint6_1_31<6u>[1,31,1];
prim typ uint7s4<7u>[0,127,4];
prim typ uint8<8u>[0,255,1];
prim typ uint8s4<8u>[0,255,4];
prim typ uint10nz4<10u>[4,1023,4];
prim typ uint12<12u>[0,4095,1];
prim typ uint16<16u>[0,65535,1];
prim typ int3<3t>[-4,3,1];
prim typ int5<5t>[-16,15,1];
prim typ int6n<6t>[-32,-1,1];
prim typ int6p<6t>[1,31,1];
prim typ int6<6t>[-32,31,1];
prim typ int9s2<9t>[-256,255,2];
prim typ int10ns16<10t>[-512,-16,16];
prim typ int10ps16<10t>[16,496,16];
prim typ int12<12t>[-2048,2047,1];
prim typ int12s2<12t>[-2048,2047,2];
prim typ int13s2<13t>[-4096,4095,2];
prim typ int16<16t>[-32768,32767,1];
prim typ int20<20t>[-524288,524287,1];
prim typ int20p<20t>[-524288,524287,1];
prim typ int21s2<21t>[-1048576,1048575,2];
prim typ int26<26t>[-33554432,33554431,1];
prim typ v4uint1<4e>[0,15,1] v(uint1,4);
prim typ v4uint8<32e>[0,4294967295,1] v(uint8,4);


//-- PRIMITIVE OPERATIONS --

// /*primitive*/ w32 add(w32, w32)
w32_add_w32_w32 : user_defined, commutative, primitive {
    fnm : "add" '/*primitive*/ w32 add(w32, w32)'; 
    arg : ( w32:r w32:i w32:i );
}

// /*primitive*/ w32 sub(w32, w32)
w32_sub_w32_w32 : user_defined, primitive {
    fnm : "sub" '/*primitive*/ w32 sub(w32, w32)'; 
    arg : ( w32:r w32:i w32:i );
}

// /*primitive*/ w32 band(w32, w32)
w32_band_w32_w32 : user_defined, commutative, primitive {
    fnm : "band" '/*primitive*/ w32 band(w32, w32)'; 
    arg : ( w32:r w32:i w32:i );
}

// /*primitive*/ w32 bor(w32, w32)
w32_bor_w32_w32 : user_defined, commutative, primitive {
    fnm : "bor" '/*primitive*/ w32 bor(w32, w32)'; 
    arg : ( w32:r w32:i w32:i );
}

// /*primitive*/ w32 bxor(w32, w32)
w32_bxor_w32_w32 : user_defined, commutative, primitive {
    fnm : "bxor" '/*primitive*/ w32 bxor(w32, w32)'; 
    arg : ( w32:r w32:i w32:i );
}

// /*primitive*/ w32 mul(w32, w32)
w32_mul_w32_w32 : user_defined, commutative, primitive {
    fnm : "mul" '/*primitive*/ w32 mul(w32, w32)'; 
    arg : ( w32:r w32:i w32:i );
}

// /*primitive*/ w32 mulh(w32, w32)
w32_mulh_w32_w32 : user_defined, commutative, primitive {
    fnm : "mulh" '/*primitive*/ w32 mulh(w32, w32)'; 
    arg : ( w32:r w32:i w32:i );
}

// /*primitive*/ w32 mulhsu(w32, w32)
w32_mulhsu_w32_w32 : user_defined, primitive {
    fnm : "mulhsu" '/*primitive*/ w32 mulhsu(w32, w32)'; 
    arg : ( w32:r w32:i w32:i );
}

// /*primitive*/ w32 mulhu(w32, w32)
w32_mulhu_w32_w32 : user_defined, commutative, primitive {
    fnm : "mulhu" '/*primitive*/ w32 mulhu(w32, w32)'; 
    arg : ( w32:r w32:i w32:i );
}

// /*primitive*/ w32 mac(w32, w32, w32)
w32_mac_w32_w32_w32 : user_defined, primitive {
    fnm : "mac" '/*primitive*/ w32 mac(w32, w32, w32)'; 
    arg : ( w32:r w32:i w32:i w32:i );
}

// /*primitive*/ w32 dotp(w32, w32)
w32_dotp_w32_w32 : user_defined, commutative, primitive {
    fnm : "dotp" '/*primitive*/ w32 dotp(w32, w32)'; 
    arg : ( w32:r w32:i w32:i );
}

// /*primitive*/ w32 sdotp(w32, w32, w32)
w32_sdotp_w32_w32_w32 : user_defined, primitive {
    fnm : "sdotp" '/*primitive*/ w32 sdotp(w32, w32, w32)'; 
    arg : ( w32:r w32:i w32:i w32:i );
}

// /*primitive*/ w32 sll(w32, w32)
w32_sll_w32_w32 : user_defined, primitive {
    fnm : "sll" '/*primitive*/ w32 sll(w32, w32)'; 
    arg : ( w32:r w32:i w32:i );
}

// /*primitive*/ w32 srl(w32, w32)
w32_srl_w32_w32 : user_defined, primitive {
    fnm : "srl" '/*primitive*/ w32 srl(w32, w32)'; 
    arg : ( w32:r w32:i w32:i );
}

// /*primitive*/ w32 sra(w32, w32)
w32_sra_w32_w32 : user_defined, primitive {
    fnm : "sra" '/*primitive*/ w32 sra(w32, w32)'; 
    arg : ( w32:r w32:i w32:i );
}

// /*primitive*/ w32 slt(w32, w32)
w32_slt_w32_w32 : user_defined, primitive {
    fnm : "slt" '/*primitive*/ w32 slt(w32, w32)'; 
    arg : ( w32:r w32:i w32:i );
}

// /*primitive*/ w32 sltu(w32, w32)
w32_sltu_w32_w32 : user_defined, primitive {
    fnm : "sltu" '/*primitive*/ w32 sltu(w32, w32)'; 
    arg : ( w32:r w32:i w32:i );
}

// /*primitive*/ bool eq(w32, w32)
bool_eq_w32_w32 : user_defined, primitive {
    fnm : "eq" '/*primitive*/ bool eq(w32, w32)'; 
    arg : ( bool:r w32:i w32:i );
}

// /*primitive*/ bool ne(w32, w32)
bool_ne_w32_w32 : user_defined, primitive {
    fnm : "ne" '/*primitive*/ bool ne(w32, w32)'; 
    arg : ( bool:r w32:i w32:i );
}

// /*primitive*/ bool lt(w32, w32)
bool_lt_w32_w32 : user_defined, primitive {
    fnm : "lt" '/*primitive*/ bool lt(w32, w32)'; 
    arg : ( bool:r w32:i w32:i );
}

// /*primitive*/ bool ge(w32, w32)
bool_ge_w32_w32 : user_defined, primitive {
    fnm : "ge" '/*primitive*/ bool ge(w32, w32)'; 
    arg : ( bool:r w32:i w32:i );
}

// /*primitive*/ bool ltu(w32, w32)
bool_ltu_w32_w32 : user_defined, primitive {
    fnm : "ltu" '/*primitive*/ bool ltu(w32, w32)'; 
    arg : ( bool:r w32:i w32:i );
}

// /*primitive*/ bool geu(w32, w32)
bool_geu_w32_w32 : user_defined, primitive {
    fnm : "geu" '/*primitive*/ bool geu(w32, w32)'; 
    arg : ( bool:r w32:i w32:i );
}

// /*primitive*/ w32 lui(int20p)
w32_lui_int20p : user_defined, promotion_conversion, right_padding12, primitive {
    fnm : "lui" '/*primitive*/ w32 lui(int20p)'; 
    arg : ( w32:r int20p:i );
}

// /*primitive*/ w32 extend_sign(w08)
w32_extend_sign_w08 : user_defined, promotion_conversion, primitive {
    fnm : "extend_sign" '/*primitive*/ w32 extend_sign(w08)'; 
    arg : ( w32:r w08:i );
}

// /*primitive*/ w32 extend_zero(w08)
w32_extend_zero_w08 : user_defined, promotion_conversion, primitive {
    fnm : "extend_zero" '/*primitive*/ w32 extend_zero(w08)'; 
    arg : ( w32:r w08:i );
}

// /*primitive*/ w32 extend_sign(w16)
w32_extend_sign_w16 : user_defined, promotion_conversion, primitive {
    fnm : "extend_sign" '/*primitive*/ w32 extend_sign(w16)'; 
    arg : ( w32:r w16:i );
}

// /*primitive*/ w32 extend_zero(w16)
w32_extend_zero_w16 : user_defined, promotion_conversion, primitive {
    fnm : "extend_zero" '/*primitive*/ w32 extend_zero(w16)'; 
    arg : ( w32:r w16:i );
}

// /*primitive*/ w08 extract_w08(w32)
w08_extract_w08_w32 : user_defined, promotion_conversion, primitive {
    fnm : "extract_w08" '/*primitive*/ w08 extract_w08(w32)'; 
    arg : ( w08:r w32:i );
}

// /*primitive*/ w16 extract_w16(w32)
w16_extract_w16_w32 : user_defined, promotion_conversion, primitive {
    fnm : "extract_w16" '/*primitive*/ w16 extract_w16(w32)'; 
    arg : ( w16:r w32:i );
}

// /*primitive*/ w32 divs(w32, w32)
w32_divs_w32_w32 : user_defined, multicycle32, primitive {
    fnm : "divs" '/*primitive*/ w32 divs(w32, w32)'; 
    arg : ( w32:r w32:i w32:i );
}

// /*primitive*/ w32 rems(w32, w32)
w32_rems_w32_w32 : user_defined, multicycle32, primitive {
    fnm : "rems" '/*primitive*/ w32 rems(w32, w32)'; 
    arg : ( w32:r w32:i w32:i );
}

// /*primitive*/ w32 divu(w32, w32)
w32_divu_w32_w32 : user_defined, multicycle32, primitive {
    fnm : "divu" '/*primitive*/ w32 divu(w32, w32)'; 
    arg : ( w32:r w32:i w32:i );
}

// /*primitive*/ w32 remu(w32, w32)
w32_remu_w32_w32 : user_defined, multicycle32, primitive {
    fnm : "remu" '/*primitive*/ w32 remu(w32, w32)'; 
    arg : ( w32:r w32:i w32:i );
}

// /*primitive*/ void br(bool, int21s2)
void_br_bool_int21s2 : user_defined, jump, relative, primitive {
    fnm : "br" '/*primitive*/ void br(bool, int21s2)'; 
    arg : ( bool:i int21s2:i );
}

// /*primitive*/ w32 jal(int21s2)
w32_jal_int21s2 : user_defined, call, relative, primitive {
    fnm : "jal" '/*primitive*/ w32 jal(int21s2)'; 
    arg : ( w32:r int21s2:i );
}

// /*primitive*/ w32 jalr(w32)
w32_jalr_w32 : user_defined, absolute, call, primitive {
    fnm : "jalr" '/*primitive*/ w32 jalr(w32)'; 
    arg : ( w32:r w32:i );
}

// /*primitive*/ void j(int21s2)
void_j_int21s2 : user_defined, chess_view_opn, jump, relative, primitive {
    fnm : "j" '/*primitive*/ void j(int21s2)'; 
    arg : ( int21s2:i );
}

// /*primitive*/ void jr(w32)
void_jr_w32 : user_defined, absolute, chess_view_opn, jump, ret, primitive {
    fnm : "jr" '/*primitive*/ void jr(w32)'; 
    arg : ( w32:i );
}

// /*primitive*/ void nop()
void_nop : user_defined, chess_view_opn, nop, primitive {
    fnm : "nop" '/*primitive*/ void nop()'; 
}

// /*primitive*/ w32 zero_extend_08(w32)
w32_zero_extend_08_w32 : user_defined, chess_view_opn, primitive {
    fnm : "zero_extend_08" '/*primitive*/ w32 zero_extend_08(w32)'; 
    arg : ( w32:r w32:i );
}

// /*primitive*/ w32 zero_extend_16(w32)
w32_zero_extend_16_w32 : user_defined, chess_view_opn, primitive {
    fnm : "zero_extend_16" '/*primitive*/ w32 zero_extend_16(w32)'; 
    arg : ( w32:r w32:i );
}

// /*primitive*/ uint5::uint5(uint5nz)
uint5_uint5_uint5nz : user_defined, conversion, primitive {
    fnm : "uint5" '/*primitive*/ uint5::uint5(uint5nz)'; 
    arg : ( uint5:r uint5nz:i );
}

// /*primitive*/ w32::w32(uint5)
w32_w32_uint5 : user_defined, conversion, primitive {
    fnm : "w32" '/*primitive*/ w32::w32(uint5)'; 
    arg : ( w32:r uint5:i );
}

// /*primitive*/ w32::w32(int6)
w32_w32_int6 : user_defined, conversion, primitive {
    fnm : "w32" '/*primitive*/ w32::w32(int6)'; 
    arg : ( w32:r int6:i );
}

// /*primitive*/ w32::w32(int6p)
w32_w32_int6p : user_defined, conversion, primitive {
    fnm : "w32" '/*primitive*/ w32::w32(int6p)'; 
    arg : ( w32:r int6p:i );
}

// /*primitive*/ w32::w32(int6n)
w32_w32_int6n : user_defined, conversion, primitive {
    fnm : "w32" '/*primitive*/ w32::w32(int6n)'; 
    arg : ( w32:r int6n:i );
}

// /*primitive*/ w32::w32(uint6_1_31)
w32_w32_uint6_1_31 : user_defined, conversion, primitive {
    fnm : "w32" '/*primitive*/ w32::w32(uint6_1_31)'; 
    arg : ( w32:r uint6_1_31:i );
}

// /*primitive*/ w32::w32(uint7s4)
w32_w32_uint7s4 : user_defined, conversion, primitive {
    fnm : "w32" '/*primitive*/ w32::w32(uint7s4)'; 
    arg : ( w32:r uint7s4:i );
}

// /*primitive*/ w32::w32(uint8s4)
w32_w32_uint8s4 : user_defined, conversion, primitive {
    fnm : "w32" '/*primitive*/ w32::w32(uint8s4)'; 
    arg : ( w32:r uint8s4:i );
}

// /*primitive*/ w32::w32(int10ns16)
w32_w32_int10ns16 : user_defined, conversion, primitive {
    fnm : "w32" '/*primitive*/ w32::w32(int10ns16)'; 
    arg : ( w32:r int10ns16:i );
}

// /*primitive*/ w32::w32(int10ps16)
w32_w32_int10ps16 : user_defined, conversion, primitive {
    fnm : "w32" '/*primitive*/ w32::w32(int10ps16)'; 
    arg : ( w32:r int10ps16:i );
}

// /*primitive*/ w32::w32(int12)
w32_w32_int12 : user_defined, conversion, primitive {
    fnm : "w32" '/*primitive*/ w32::w32(int12)'; 
    arg : ( w32:r int12:i );
}

// /*primitive*/ w32::w32(uint12)
w32_w32_uint12 : user_defined, conversion, primitive {
    fnm : "w32" '/*primitive*/ w32::w32(uint12)'; 
    arg : ( w32:r uint12:i );
}

// /*primitive*/ w32::w32(uint10nz4)
w32_w32_uint10nz4 : user_defined, conversion, primitive {
    fnm : "w32" '/*primitive*/ w32::w32(uint10nz4)'; 
    arg : ( w32:r uint10nz4:i );
}

// /*primitive*/ addr::addr(w32)
addr_addr_w32 : user_defined, conversion, primitive {
    fnm : "addr" '/*primitive*/ addr::addr(w32)'; 
    arg : ( addr:r w32:i );
}

// /*primitive*/ int21s2::int21s2(int13s2)
int21s2_int21s2_int13s2 : user_defined, conversion, primitive {
    fnm : "int21s2" '/*primitive*/ int21s2::int21s2(int13s2)'; 
    arg : ( int21s2:r int13s2:i );
}

// /*primitive*/ int21s2::int21s2(int12s2)
int21s2_int21s2_int12s2 : user_defined, conversion, primitive {
    fnm : "int21s2" '/*primitive*/ int21s2::int21s2(int12s2)'; 
    arg : ( int21s2:r int12s2:i );
}

// /*primitive*/ int21s2::int21s2(int9s2)
int21s2_int21s2_int9s2 : user_defined, conversion, primitive {
    fnm : "int21s2" '/*primitive*/ int21s2::int21s2(int9s2)'; 
    arg : ( int21s2:r int9s2:i );
}

