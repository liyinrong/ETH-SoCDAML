
// File generated by Go version O-2018.09#f5599cac26#190121, Tue May 28 12:03:22 2024
// Copyright 2014-2018 Synopsys, Inc. All rights reserved.

HW conflicts on transitories of tzscale


<<<< Enable option -s to see instruction patterns (may be slow). >>>>


<<<< Enable debug mode (option -d1) to see HW conflicts between
     operations with different 'strength'. >>>>


<<<< Enable option -n to obtain an nML rule derivation for each source reference (may be slow). >>>>


<<<< Enable option -v to obtain all source references for each conflict (may be slow). >>>>



dmb_wr stage 1 : conflict for
		<option -s prints instruction bit pattern here (may be slow)>
  dmb_wr_copy0_sxB_DE  : IN( sxB `DE` ) OUT( dmb_wr `DE` )
  <---> 
  dmb_wr_rd_ocd_data_ocd_st_DMb_DE_alw  : IN( ocd_data `DE` ) GRD( ocd_st_DMb `DE` ) OUT( dmb_wr `DE` )


      source code reference for conflict
      [ldst.n:58] dmb_wr `DE` = sxB `DE` = extract_w08 (sxW `DE` = rs2 `DE`)  @sx;
        <>
      [ocd_if.n:61] DMb[dm_addr = ocd_addr_r] `DE` = dmb_wr `DE` = ocd_data `DE`;


      (refined) source code reference for conflict
      [ldst.n:58] dmb_wr `DE` = sxB `DE`
        <>
      [ocd_if.n:61] DMb[dm_addr = ocd_addr_r] `DE` = dmb_wr `DE` = ocd_data `DE`


dm_addr stage 1 : conflict for
		<option -s prints instruction bit pattern here (may be slow)>
  dm_addr_copy0_aluC_DE  : IN( aluC `DE` ) OUT( dm_addr `DE` )
  <---> 
  dm_addr_copy0_ocd_addr_r_ocd_ld_DMb_DE_alw  : IN( ocd_addr_r `DE` ) GRD( ocd_ld_DMb `DE` ) OUT( dm_addr `DE` )


      source code reference for conflict
      [ldst.n:33] dm_addr `DE` = aluC `DE` = add (aluA `DE` = rs1 `DE`, aluB `DE` = i `DE`)  @alu;
        <>
      [ocd_if.n:56] ocd_data `WB` = dmb_rd = DMb[dm_addr `DE` = ocd_addr_r `DE`] `WB`;


      (refined) source code reference for conflict
      [ldst.n:33] dm_addr `DE` = aluC `DE`
        <>
      [ocd_if.n:56] dm_addr `DE` = ocd_addr_r `DE`


dm_addr stage 1 : conflict for
		<option -s prints instruction bit pattern here (may be slow)>
  dm_addr_copy0_aluC_DE  : IN( aluC `DE` ) OUT( dm_addr `DE` )
  <---> 
  dm_addr_copy0_ocd_addr_r_ocd_st_DMb_DE_alw  : IN( ocd_addr_r `DE` ) GRD( ocd_st_DMb `DE` ) OUT( dm_addr `DE` )


      source code reference for conflict
      [ldst.n:33] dm_addr `DE` = aluC `DE` = add (aluA `DE` = rs1 `DE`, aluB `DE` = i `DE`)  @alu;
        <>
      [ocd_if.n:61] DMb[dm_addr = ocd_addr_r] `DE` = dmb_wr `DE` = ocd_data `DE`;


      (refined) source code reference for conflict
      [ldst.n:33] dm_addr `DE` = aluC `DE`
        <>
      [ocd_if.n:61] dm_addr = ocd_addr_r


dm_addr stage 1 : conflict for
		<option -s prints instruction bit pattern here (may be slow)>
  dm_addr_copy0_ocd_addr_r_ocd_ld_DMb_DE_alw  : IN( ocd_addr_r `DE` ) GRD( ocd_ld_DMb `DE` ) OUT( dm_addr `DE` )
  <---> 
  dm_addr_copy0_ocd_addr_r_ocd_st_DMb_DE_alw  : IN( ocd_addr_r `DE` ) GRD( ocd_st_DMb `DE` ) OUT( dm_addr `DE` )

	------------------------------------------------------------
	This hardware conflict is non-existent if the (different)
	GUARD CONDITIONS of both operations are mutually exclusive.
	------------------------------------------------------------

      source code reference for conflict
      [ocd_if.n:56] ocd_data `WB` = dmb_rd = DMb[dm_addr `DE` = ocd_addr_r `DE`] `WB`;
        <>
      [ocd_if.n:61] DMb[dm_addr = ocd_addr_r] `DE` = dmb_wr `DE` = ocd_data `DE`;


      (refined) source code reference for conflict
      [ocd_if.n:56] dm_addr `DE` = ocd_addr_r `DE`
        <>
      [ocd_if.n:61] dm_addr = ocd_addr_r


dmb_rd stage 2 : conflict for
		<option -s prints instruction bit pattern here (may be slow)>
  dmb_rd_ld_DMb_dm_addr_DE  : IN( DMb `WB` dm_addr `DE` ) OUT( dmb_rd `WB` )
  <---> 
  dmb_rd_ld_DMb_dm_addr_ocd_ld_DMb_DE_alw  : IN( DMb `WB` dm_addr `DE` ) GRD( ocd_ld_DMb `DE` ) OUT( dmb_rd `WB` )


      source code reference for conflict
      [ldst.n:36] dmb_rd `WB` = DMb[dm_addr `DE`] `WB`;
        <>
      [ocd_if.n:56] ocd_data `WB` = dmb_rd = DMb[dm_addr `DE` = ocd_addr_r `DE`] `WB`;


      (refined) source code reference for conflict
      [ldst.n:36] dmb_rd `WB` = DMb[dm_addr `DE`] `WB`
        <>
      [ocd_if.n:56] ocd_data `WB` = dmb_rd = DMb[dm_addr `DE` = ocd_addr_r `DE`] `WB`


pm_addr stage 1 : conflict for
		<option -s prints instruction bit pattern here (may be slow)>
  pm_addr_copy0_ocd_addr_r_ocd_ld_PMb_DE_alw  : IN( ocd_addr_r `DE` ) GRD( ocd_ld_PMb `DE` ) OUT( pm_addr `DE` )
  <---> 
  pm_addr_copy0_ocd_addr_r_ocd_st_PMb_DE_alw  : IN( ocd_addr_r `DE` ) GRD( ocd_st_PMb `DE` ) OUT( pm_addr `DE` )

	------------------------------------------------------------
	This hardware conflict is non-existent if the (different)
	GUARD CONDITIONS of both operations are mutually exclusive.
	------------------------------------------------------------

      source code reference for conflict
      [ocd_if.n:70] ocd_instr `WB` = pm_rd `WB` = PM[pm_addr `DE` = ocd_addr_r `DE`] `WB`;
        <>
      [ocd_if.n:75] PM[pm_addr = ocd_addr_r] `DE` = pm_wr `DE` = ocd_instr `DE`;


      (refined) source code reference for conflict
      [ocd_if.n:70] pm_addr `DE` = ocd_addr_r `DE`
        <>
      [ocd_if.n:75] pm_addr = ocd_addr_r


ocd_addr_w stage 1 : conflict for
		<option -s prints instruction bit pattern here (may be slow)>
  ocd_addr_w_incr1_ocd_addr_r_ocd_addr_incr_ocd_ld_DMb_DE_alw  incr1: IN( ocd_addr_r `DE` ) GRD( ocd_ld_DMb `DE` ) OUT( ocd_addr_w `DE` ) @ ocd_addr_incr
  <---> 
  ocd_addr_w_incr1_ocd_addr_r_ocd_addr_incr_ocd_st_DMb_DE_alw  incr1: IN( ocd_addr_r `DE` ) GRD( ocd_st_DMb `DE` ) OUT( ocd_addr_w `DE` ) @ ocd_addr_incr

	------------------------------------------------------------
	This hardware conflict is non-existent if the (different)
	GUARD CONDITIONS of both operations are mutually exclusive.
	------------------------------------------------------------

      source code reference for conflict
      [ocd_if.n:54] ocd_addr `DE` = ocd_addr_w `DE` = incr1 (ocd_addr_r `DE` = ocd_addr `DE`)  @ocd_addr_incr;
        <>
      [ocd_if.n:60] ocd_addr `DE` = ocd_addr_w `DE` = incr1 (ocd_addr_r `DE` = ocd_addr `DE`)  @ocd_addr_incr;


      (refined) source code reference for conflict
      [ocd_if.n:54] ocd_addr `DE` = ocd_addr_w `DE`
        <>
      [ocd_if.n:60] ocd_addr `DE` = ocd_addr_w `DE`


ocd_addr_w stage 1 : conflict for
		<option -s prints instruction bit pattern here (may be slow)>
  ocd_addr_w_incr1_ocd_addr_r_ocd_addr_incr_ocd_ld_DMb_DE_alw  incr1: IN( ocd_addr_r `DE` ) GRD( ocd_ld_DMb `DE` ) OUT( ocd_addr_w `DE` ) @ ocd_addr_incr
  <---> 
  ocd_addr_w_incr4_ocd_addr_r_ocd_addr_incr_ocd_ld_PMb_DE_alw  incr4: IN( ocd_addr_r `DE` ) GRD( ocd_ld_PMb `DE` ) OUT( ocd_addr_w `DE` ) @ ocd_addr_incr

	------------------------------------------------------------
	This hardware conflict is non-existent if the (different)
	GUARD CONDITIONS of both operations are mutually exclusive.
	------------------------------------------------------------

      source code reference for conflict
      [ocd_if.n:54] ocd_addr `DE` = ocd_addr_w `DE` = incr1 (ocd_addr_r `DE` = ocd_addr `DE`)  @ocd_addr_incr;
        <>
      [ocd_if.n:68] ocd_addr `DE` = ocd_addr_w `DE` = incr4 (ocd_addr_r `DE` = ocd_addr `DE`)  @ocd_addr_incr;


      (refined) source code reference for conflict
      [ocd_if.n:54] ocd_addr `DE` = ocd_addr_w `DE`
        <>
      [ocd_if.n:68] ocd_addr `DE` = ocd_addr_w `DE`


ocd_addr_w stage 1 : conflict for
		<option -s prints instruction bit pattern here (may be slow)>
  ocd_addr_w_incr1_ocd_addr_r_ocd_addr_incr_ocd_ld_DMb_DE_alw  incr1: IN( ocd_addr_r `DE` ) GRD( ocd_ld_DMb `DE` ) OUT( ocd_addr_w `DE` ) @ ocd_addr_incr
  <---> 
  ocd_addr_w_incr4_ocd_addr_r_ocd_addr_incr_ocd_st_PMb_DE_alw  incr4: IN( ocd_addr_r `DE` ) GRD( ocd_st_PMb `DE` ) OUT( ocd_addr_w `DE` ) @ ocd_addr_incr

	------------------------------------------------------------
	This hardware conflict is non-existent if the (different)
	GUARD CONDITIONS of both operations are mutually exclusive.
	------------------------------------------------------------

      source code reference for conflict
      [ocd_if.n:54] ocd_addr `DE` = ocd_addr_w `DE` = incr1 (ocd_addr_r `DE` = ocd_addr `DE`)  @ocd_addr_incr;
        <>
      [ocd_if.n:74] ocd_addr `DE` = ocd_addr_w `DE` = incr4 (ocd_addr_r `DE` = ocd_addr `DE`)  @ocd_addr_incr;


      (refined) source code reference for conflict
      [ocd_if.n:54] ocd_addr `DE` = ocd_addr_w `DE`
        <>
      [ocd_if.n:74] ocd_addr `DE` = ocd_addr_w `DE`


ocd_addr_w stage 1 : conflict for
		<option -s prints instruction bit pattern here (may be slow)>
  ocd_addr_w_incr1_ocd_addr_r_ocd_addr_incr_ocd_st_DMb_DE_alw  incr1: IN( ocd_addr_r `DE` ) GRD( ocd_st_DMb `DE` ) OUT( ocd_addr_w `DE` ) @ ocd_addr_incr
  <---> 
  ocd_addr_w_incr4_ocd_addr_r_ocd_addr_incr_ocd_ld_PMb_DE_alw  incr4: IN( ocd_addr_r `DE` ) GRD( ocd_ld_PMb `DE` ) OUT( ocd_addr_w `DE` ) @ ocd_addr_incr

	------------------------------------------------------------
	This hardware conflict is non-existent if the (different)
	GUARD CONDITIONS of both operations are mutually exclusive.
	------------------------------------------------------------

      source code reference for conflict
      [ocd_if.n:60] ocd_addr `DE` = ocd_addr_w `DE` = incr1 (ocd_addr_r `DE` = ocd_addr `DE`)  @ocd_addr_incr;
        <>
      [ocd_if.n:68] ocd_addr `DE` = ocd_addr_w `DE` = incr4 (ocd_addr_r `DE` = ocd_addr `DE`)  @ocd_addr_incr;


      (refined) source code reference for conflict
      [ocd_if.n:60] ocd_addr `DE` = ocd_addr_w `DE`
        <>
      [ocd_if.n:68] ocd_addr `DE` = ocd_addr_w `DE`


ocd_addr_w stage 1 : conflict for
		<option -s prints instruction bit pattern here (may be slow)>
  ocd_addr_w_incr1_ocd_addr_r_ocd_addr_incr_ocd_st_DMb_DE_alw  incr1: IN( ocd_addr_r `DE` ) GRD( ocd_st_DMb `DE` ) OUT( ocd_addr_w `DE` ) @ ocd_addr_incr
  <---> 
  ocd_addr_w_incr4_ocd_addr_r_ocd_addr_incr_ocd_st_PMb_DE_alw  incr4: IN( ocd_addr_r `DE` ) GRD( ocd_st_PMb `DE` ) OUT( ocd_addr_w `DE` ) @ ocd_addr_incr

	------------------------------------------------------------
	This hardware conflict is non-existent if the (different)
	GUARD CONDITIONS of both operations are mutually exclusive.
	------------------------------------------------------------

      source code reference for conflict
      [ocd_if.n:60] ocd_addr `DE` = ocd_addr_w `DE` = incr1 (ocd_addr_r `DE` = ocd_addr `DE`)  @ocd_addr_incr;
        <>
      [ocd_if.n:74] ocd_addr `DE` = ocd_addr_w `DE` = incr4 (ocd_addr_r `DE` = ocd_addr `DE`)  @ocd_addr_incr;


      (refined) source code reference for conflict
      [ocd_if.n:60] ocd_addr `DE` = ocd_addr_w `DE`
        <>
      [ocd_if.n:74] ocd_addr `DE` = ocd_addr_w `DE`


ocd_addr_w stage 1 : conflict for
		<option -s prints instruction bit pattern here (may be slow)>
  ocd_addr_w_incr4_ocd_addr_r_ocd_addr_incr_ocd_ld_PMb_DE_alw  incr4: IN( ocd_addr_r `DE` ) GRD( ocd_ld_PMb `DE` ) OUT( ocd_addr_w `DE` ) @ ocd_addr_incr
  <---> 
  ocd_addr_w_incr4_ocd_addr_r_ocd_addr_incr_ocd_st_PMb_DE_alw  incr4: IN( ocd_addr_r `DE` ) GRD( ocd_st_PMb `DE` ) OUT( ocd_addr_w `DE` ) @ ocd_addr_incr

	------------------------------------------------------------
	This hardware conflict is non-existent if the (different)
	GUARD CONDITIONS of both operations are mutually exclusive.
	------------------------------------------------------------

      source code reference for conflict
      [ocd_if.n:68] ocd_addr `DE` = ocd_addr_w `DE` = incr4 (ocd_addr_r `DE` = ocd_addr `DE`)  @ocd_addr_incr;
        <>
      [ocd_if.n:74] ocd_addr `DE` = ocd_addr_w `DE` = incr4 (ocd_addr_r `DE` = ocd_addr `DE`)  @ocd_addr_incr;


      (refined) source code reference for conflict
      [ocd_if.n:68] ocd_addr `DE` = ocd_addr_w `DE`
        <>
      [ocd_if.n:74] ocd_addr `DE` = ocd_addr_w `DE`


ocd_addr_r stage 1 : conflict for
		<option -s prints instruction bit pattern here (may be slow)>
  ocd_addr_r_rd_ocd_addr_ocd_ld_DMb_DE_alw  : IN( ocd_addr `DE` ) GRD( ocd_ld_DMb `DE` ) OUT( ocd_addr_r `DE` )
  <---> 
  ocd_addr_r_rd_ocd_addr_ocd_st_DMb_DE_alw  : IN( ocd_addr `DE` ) GRD( ocd_st_DMb `DE` ) OUT( ocd_addr_r `DE` )

	------------------------------------------------------------
	This hardware conflict is non-existent if the (different)
	GUARD CONDITIONS of both operations are mutually exclusive.
	------------------------------------------------------------

      source code reference for conflict
      [ocd_if.n:54] ocd_addr `DE` = ocd_addr_w `DE` = incr1 (ocd_addr_r `DE` = ocd_addr `DE`)  @ocd_addr_incr;
        <>
      [ocd_if.n:60] ocd_addr `DE` = ocd_addr_w `DE` = incr1 (ocd_addr_r `DE` = ocd_addr `DE`)  @ocd_addr_incr;


      (refined) source code reference for conflict
      [ocd_if.n:54] ocd_addr_r `DE` = ocd_addr `DE`
        <>
      [ocd_if.n:60] ocd_addr_r `DE` = ocd_addr `DE`


ocd_addr_r stage 1 : conflict for
		<option -s prints instruction bit pattern here (may be slow)>
  ocd_addr_r_rd_ocd_addr_ocd_ld_DMb_DE_alw  : IN( ocd_addr `DE` ) GRD( ocd_ld_DMb `DE` ) OUT( ocd_addr_r `DE` )
  <---> 
  ocd_addr_r_rd_ocd_addr_ocd_ld_PMb_DE_alw  : IN( ocd_addr `DE` ) GRD( ocd_ld_PMb `DE` ) OUT( ocd_addr_r `DE` )

	------------------------------------------------------------
	This hardware conflict is non-existent if the (different)
	GUARD CONDITIONS of both operations are mutually exclusive.
	------------------------------------------------------------

      source code reference for conflict
      [ocd_if.n:54] ocd_addr `DE` = ocd_addr_w `DE` = incr1 (ocd_addr_r `DE` = ocd_addr `DE`)  @ocd_addr_incr;
        <>
      [ocd_if.n:68] ocd_addr `DE` = ocd_addr_w `DE` = incr4 (ocd_addr_r `DE` = ocd_addr `DE`)  @ocd_addr_incr;


      (refined) source code reference for conflict
      [ocd_if.n:54] ocd_addr_r `DE` = ocd_addr `DE`
        <>
      [ocd_if.n:68] ocd_addr_r `DE` = ocd_addr `DE`


ocd_addr_r stage 1 : conflict for
		<option -s prints instruction bit pattern here (may be slow)>
  ocd_addr_r_rd_ocd_addr_ocd_ld_DMb_DE_alw  : IN( ocd_addr `DE` ) GRD( ocd_ld_DMb `DE` ) OUT( ocd_addr_r `DE` )
  <---> 
  ocd_addr_r_rd_ocd_addr_ocd_st_PMb_DE_alw  : IN( ocd_addr `DE` ) GRD( ocd_st_PMb `DE` ) OUT( ocd_addr_r `DE` )

	------------------------------------------------------------
	This hardware conflict is non-existent if the (different)
	GUARD CONDITIONS of both operations are mutually exclusive.
	------------------------------------------------------------

      source code reference for conflict
      [ocd_if.n:54] ocd_addr `DE` = ocd_addr_w `DE` = incr1 (ocd_addr_r `DE` = ocd_addr `DE`)  @ocd_addr_incr;
        <>
      [ocd_if.n:74] ocd_addr `DE` = ocd_addr_w `DE` = incr4 (ocd_addr_r `DE` = ocd_addr `DE`)  @ocd_addr_incr;


      (refined) source code reference for conflict
      [ocd_if.n:54] ocd_addr_r `DE` = ocd_addr `DE`
        <>
      [ocd_if.n:74] ocd_addr_r `DE` = ocd_addr `DE`


ocd_addr_r stage 1 : conflict for
		<option -s prints instruction bit pattern here (may be slow)>
  ocd_addr_r_rd_ocd_addr_ocd_st_DMb_DE_alw  : IN( ocd_addr `DE` ) GRD( ocd_st_DMb `DE` ) OUT( ocd_addr_r `DE` )
  <---> 
  ocd_addr_r_rd_ocd_addr_ocd_ld_PMb_DE_alw  : IN( ocd_addr `DE` ) GRD( ocd_ld_PMb `DE` ) OUT( ocd_addr_r `DE` )

	------------------------------------------------------------
	This hardware conflict is non-existent if the (different)
	GUARD CONDITIONS of both operations are mutually exclusive.
	------------------------------------------------------------

      source code reference for conflict
      [ocd_if.n:60] ocd_addr `DE` = ocd_addr_w `DE` = incr1 (ocd_addr_r `DE` = ocd_addr `DE`)  @ocd_addr_incr;
        <>
      [ocd_if.n:68] ocd_addr `DE` = ocd_addr_w `DE` = incr4 (ocd_addr_r `DE` = ocd_addr `DE`)  @ocd_addr_incr;


      (refined) source code reference for conflict
      [ocd_if.n:60] ocd_addr_r `DE` = ocd_addr `DE`
        <>
      [ocd_if.n:68] ocd_addr_r `DE` = ocd_addr `DE`


ocd_addr_r stage 1 : conflict for
		<option -s prints instruction bit pattern here (may be slow)>
  ocd_addr_r_rd_ocd_addr_ocd_st_DMb_DE_alw  : IN( ocd_addr `DE` ) GRD( ocd_st_DMb `DE` ) OUT( ocd_addr_r `DE` )
  <---> 
  ocd_addr_r_rd_ocd_addr_ocd_st_PMb_DE_alw  : IN( ocd_addr `DE` ) GRD( ocd_st_PMb `DE` ) OUT( ocd_addr_r `DE` )

	------------------------------------------------------------
	This hardware conflict is non-existent if the (different)
	GUARD CONDITIONS of both operations are mutually exclusive.
	------------------------------------------------------------

      source code reference for conflict
      [ocd_if.n:60] ocd_addr `DE` = ocd_addr_w `DE` = incr1 (ocd_addr_r `DE` = ocd_addr `DE`)  @ocd_addr_incr;
        <>
      [ocd_if.n:74] ocd_addr `DE` = ocd_addr_w `DE` = incr4 (ocd_addr_r `DE` = ocd_addr `DE`)  @ocd_addr_incr;


      (refined) source code reference for conflict
      [ocd_if.n:60] ocd_addr_r `DE` = ocd_addr `DE`
        <>
      [ocd_if.n:74] ocd_addr_r `DE` = ocd_addr `DE`


ocd_addr_r stage 1 : conflict for
		<option -s prints instruction bit pattern here (may be slow)>
  ocd_addr_r_rd_ocd_addr_ocd_ld_PMb_DE_alw  : IN( ocd_addr `DE` ) GRD( ocd_ld_PMb `DE` ) OUT( ocd_addr_r `DE` )
  <---> 
  ocd_addr_r_rd_ocd_addr_ocd_st_PMb_DE_alw  : IN( ocd_addr `DE` ) GRD( ocd_st_PMb `DE` ) OUT( ocd_addr_r `DE` )

	------------------------------------------------------------
	This hardware conflict is non-existent if the (different)
	GUARD CONDITIONS of both operations are mutually exclusive.
	------------------------------------------------------------

      source code reference for conflict
      [ocd_if.n:68] ocd_addr `DE` = ocd_addr_w `DE` = incr4 (ocd_addr_r `DE` = ocd_addr `DE`)  @ocd_addr_incr;
        <>
      [ocd_if.n:74] ocd_addr `DE` = ocd_addr_w `DE` = incr4 (ocd_addr_r `DE` = ocd_addr `DE`)  @ocd_addr_incr;


      (refined) source code reference for conflict
      [ocd_if.n:68] ocd_addr_r `DE` = ocd_addr `DE`
        <>
      [ocd_if.n:74] ocd_addr_r `DE` = ocd_addr `DE`

