
// File generated by noodle version O-2018.09#f5599cac26#190121, Tue May 28 10:27:16 2024
// Copyright 2014-2018 Synopsys, Inc. All rights reserved.
// noodle -ps -B -Iisg +wisg -Iruntime/include -D__tct_patch__=300 -D__checkers__ tmicro

toolrelease _18R3;

//-- CHESS GENERIC TYPES AND PRIMITIVES --

typ any<0>;
typ void<0>;
prim typ bool<1u>[0,1,1];

// general properties:

add_sub_inv {
}
chess_view {
}
chess_view_opn {
}
commutative {
}
conversion {
}
dont_disable_chess_view {
}
envelope {
}
envelope_open : envelope {
}
envelope_close : envelope {
}
isr_envelope_open : envelope_open {
}
isr_envelope_close : envelope_close {
}
event_opn {
}
early_clobbers {
}
expensive {
}
explicit {
}
immediate_repeat_count {
}
inlined {
}
isolate_status_uses {
}
multicycle {
}
no_duplicate_move {
}
no_pdg_definition {
}
primitive {
}
promoted {
}
promotion_conversion {
}
right_padding {
}
right_truncate {
}
unfoldable {
}
unused {
}
user_defined {
}
volatile {
}

assembly : event_opn, volatile {
}
called : event_opn {
}
chess_hosted : called {
}
chess_assert : chess_hosted, volatile {
}
chess_report : chess_hosted, volatile {
}
chess_stop : chess_hosted, volatile {
}
chess_cycle_count : chess_hosted {
}
chess_exit : chess_hosted, volatile {
}
chess_hosted_io : chess_hosted, volatile {
}
chess_separator : called {
}
chess_separator_scheduler : chess_separator {
}
chess_instruction_tracing_begin : chess_separator_scheduler {
}
chess_instruction_tracing_end : chess_separator_scheduler {
}
chess_profile_begin : chess_separator_scheduler {
}
chess_profile_end : chess_separator_scheduler {
}
chess_seqloop_test : chess_separator_scheduler {
}
chess_seqloop_end : chess_separator_scheduler {
}
chess_tcl_break : chess_separator_scheduler {
}
isr : event_opn {
}

nop : volatile {
}
never_returns : volatile {
}

instruction_properties {
}
instruction_class : instruction_properties {
}
cycles : instruction_properties {
}
words : instruction_properties {
}
alt_cycles : instruction_properties {
}
delay_slots : instruction_properties {
}
pc_offset : instruction_properties {
}

// SFG annotations:

chess_frequent_else : event_opn {
}
chess_frequent_then : event_opn {
}
chess_no_warn_pipelining : event_opn {
}
chess_adjust_preamble_size : event_opn {
    arg : ( any:i );
}
chess_minimum_folded_loop_size : event_opn {
    arg : ( any:i );
}
chess_modulo_scheduling_budget_ratio : event_opn {
    arg : ( any:i );
}
chess_pipeline_non_leaf_loop_select_solution : event_opn {
    arg : ( any:i );
}

// source/sink operations:

inp : event_opn {
    arg : ( any:o );
}
out : event_opn {
    arg : ( any:i );
}
tr_inp : event_opn {
    arg : ( any:o );
}
tr_out : event_opn {
    arg : ( any:i );
}

st_def : event_opn {
    arg : ( any:o );
}
source : event_opn {
    arg : ( any:o );
}
sink : event_opn {
    arg : ( any:i );
}
sync_sink : sink {
}
to_route_sink : sink {
}
seqif_sink : event_opn {
    arg : ( any:i );
}

const : event_opn {
    arg : ( any:o );
}
const_inp : event_opn {
    arg : ( any:o );
}

undefined : event_opn {
    arg : ( any:o );
}
never : undefined {
}

chain_tie : event_opn {
}

keep_dead : event_opn {
    arg : ( any:i );
}

// flow operations:

flow_opn : event_opn {
}
fork : flow_opn {
    arg : ( any:o any:o any:i );
}
join : flow_opn {
    arg : ( any:o any:i any:i );
}

branch : fork {
}
merge : join {
}
gmerge : join {
}

entry : join {
}
exit : fork {
}

call_link : flow_opn {
    arg : ( any:o any:i );
}
// irremovable call link:
defval_call_link : event_opn {
    arg : ( any:o any:i );
}

sync_link : flow_opn {
    arg : ( any:o any:i );
}
sync_never : flow_opn {
    arg : ( any:o any:i );
}
// var assignment in C:
assign : event_opn {
    arg : ( any:r any:i );
}
deassign : assign {
}
direct_assign : assign {
}
strict_assign : assign {
}
// conversion without move:
in_situ_conv : event_opn {
    arg : ( any:r any:i );
}
// trn assignment in nML:
copy {
    arg : ( any:r any:i );
}
excl_in_move {
}

// heading operations:

heading : event_opn {
    arg : ( any:i );
}
if_expr : heading {
}
else_expr : event_opn {
    arg : ( any:i );
}
while_expr : heading {
}
for_count : heading {
}

// control operations:

cntrl {
}
absolute {
}
relative {
}
seqelsif {
}

call : cntrl {
}
near_call : cntrl {
}
doloop : cntrl {
}
doloop_no_cntrl : cntrl {
}
repeat : cntrl {
}
halt : cntrl, volatile {
}
jump : cntrl {
}
jti : jump {
}
ret : cntrl {
}
near_ret : cntrl {
}
rti : ret {
}
zloop_sink : event_opn {
    arg : ( any:i any:i any:i );
}
zloop_sink_absolute : zloop_sink, absolute {
}
zloop_sink_relative : zloop_sink, relative {
}

multi_register_pop {
}
multi_register_push {
}

// storage operations:

storage_opn {
}
l_storage_opn : storage_opn {
}
s_storage_opn : storage_opn {
}

a_fetch : l_storage_opn {
    arg : ( any:r any:i any:i );
}
a_update : s_storage_opn {
    arg : ( any:o any:i any:i );
}

load : a_fetch {
}
store : a_update {
}

read_file : a_fetch {
}
write_file : a_update {
}

read_reg : l_storage_opn {
    arg : ( any:r any:i );
}
write_reg : s_storage_opn {
    arg : ( any:r any:i );
}

// alternate storage operations:

alt_load {
}
alt_store {
}
guarded_load : alt_load {
}
guarded_store : alt_store {
}
select {
}

// reserved register access:
rd_res_reg {
    arg : ( any:r any:i );
}
wr_res_reg {
    arg : ( any:o any:i );
}

// bundles:

bndl_opn {
}
// functional bundle generated by cosel:
func_bndl : bndl_opn {
}
// move bundle generated by amnesia, showcolor & rover:
mv_bndl : bndl_opn {
    arg : ( any:r any:i );
}

namespace {
}


//-- PRIMITIVE TYPES --

prim typ word<16t>[-32768,32767,1];
prim typ addr<16u>[0,65535,1];
prim typ nint9<9t>[-256,-1,1];
prim typ sbyte<8t>[-128,127,1];
prim typ ubyte<8u>[0,255,1];
prim typ uint1<1u>[0,1,1];
prim typ uint2<2u>[0,3,1];
prim typ uint3<3u>[0,7,1];
prim typ uint4<4u>[0,15,1];
prim typ iword<16u>[0,65535,1];


//-- PRIMITIVE OPERATIONS --

// /*primitive*/ word add(word, word)
word_add_word_word : user_defined, commutative, primitive {
    fnm : "add" '/*primitive*/ word add(word, word)'; 
    arg : ( word:r word:i word:i );
}

// /*primitive*/ word add(word, word, uint1 &)
word_add_word_word_uint1 : user_defined, commutative, primitive {
    fnm : "add" '/*primitive*/ word add(word, word, uint1 &)'; 
    arg : ( word:r word:i word:i uint1:o );
}

// /*primitive*/ word addc(word, word, uint1, uint1 &)
word_addc_word_word_uint1_uint1 : user_defined, commutative, primitive {
    fnm : "addc" '/*primitive*/ word addc(word, word, uint1, uint1 &)'; 
    arg : ( word:r word:i word:i uint1:i uint1:o );
}

// /*primitive*/ word sub(word, word, uint1 &)
word_sub_word_word_uint1 : user_defined, primitive {
    fnm : "sub" '/*primitive*/ word sub(word, word, uint1 &)'; 
    arg : ( word:r word:i word:i uint1:o );
}

// /*primitive*/ word subb(word, word, uint1, uint1 &)
word_subb_word_word_uint1_uint1 : user_defined, primitive {
    fnm : "subb" '/*primitive*/ word subb(word, word, uint1, uint1 &)'; 
    arg : ( word:r word:i word:i uint1:i uint1:o );
}

// /*primitive*/ word andw(word, word)
word_andw_word_word : user_defined, commutative, primitive {
    fnm : "andw" '/*primitive*/ word andw(word, word)'; 
    arg : ( word:r word:i word:i );
}

// /*primitive*/ word orw(word, word)
word_orw_word_word : user_defined, commutative, primitive {
    fnm : "orw" '/*primitive*/ word orw(word, word)'; 
    arg : ( word:r word:i word:i );
}

// /*primitive*/ word xorw(word, word)
word_xorw_word_word : user_defined, commutative, primitive {
    fnm : "xorw" '/*primitive*/ word xorw(word, word)'; 
    arg : ( word:r word:i word:i );
}

// /*primitive*/ word minw(word, word)
word_minw_word_word : user_defined, primitive {
    fnm : "minw" '/*primitive*/ word minw(word, word)'; 
    arg : ( word:r word:i word:i );
}

// /*primitive*/ word maxw(word, word)
word_maxw_word_word : user_defined, primitive {
    fnm : "maxw" '/*primitive*/ word maxw(word, word)'; 
    arg : ( word:r word:i word:i );
}

// /*primitive*/ word select(bool, word, word)
word_select_bool_word_word : user_defined, primitive {
    fnm : "select" '/*primitive*/ word select(bool, word, word)'; 
    arg : ( word:r bool:i word:i word:i );
}

// /*primitive*/ word ext_abs(word)
word_ext_abs_word : user_defined, primitive {
    fnm : "ext_abs" '/*primitive*/ word ext_abs(word)'; 
    arg : ( word:r word:i );
}

// /*primitive*/ bool lts(word, word)
bool_lts_word_word : user_defined, primitive {
    fnm : "lts" '/*primitive*/ bool lts(word, word)'; 
    arg : ( bool:r word:i word:i );
}

// /*primitive*/ bool ltu(word, word)
bool_ltu_word_word : user_defined, primitive {
    fnm : "ltu" '/*primitive*/ bool ltu(word, word)'; 
    arg : ( bool:r word:i word:i );
}

// /*primitive*/ bool les(word, word)
bool_les_word_word : user_defined, primitive {
    fnm : "les" '/*primitive*/ bool les(word, word)'; 
    arg : ( bool:r word:i word:i );
}

// /*primitive*/ bool leu(word, word)
bool_leu_word_word : user_defined, primitive {
    fnm : "leu" '/*primitive*/ bool leu(word, word)'; 
    arg : ( bool:r word:i word:i );
}

// /*primitive*/ bool gts(word, word)
bool_gts_word_word : user_defined, primitive {
    fnm : "gts" '/*primitive*/ bool gts(word, word)'; 
    arg : ( bool:r word:i word:i );
}

// /*primitive*/ bool gtu(word, word)
bool_gtu_word_word : user_defined, primitive {
    fnm : "gtu" '/*primitive*/ bool gtu(word, word)'; 
    arg : ( bool:r word:i word:i );
}

// /*primitive*/ bool ges(word, word)
bool_ges_word_word : user_defined, primitive {
    fnm : "ges" '/*primitive*/ bool ges(word, word)'; 
    arg : ( bool:r word:i word:i );
}

// /*primitive*/ bool geu(word, word)
bool_geu_word_word : user_defined, primitive {
    fnm : "geu" '/*primitive*/ bool geu(word, word)'; 
    arg : ( bool:r word:i word:i );
}

// /*primitive*/ bool eq(word, word)
bool_eq_word_word : user_defined, primitive {
    fnm : "eq" '/*primitive*/ bool eq(word, word)'; 
    arg : ( bool:r word:i word:i );
}

// /*primitive*/ bool ne(word, word)
bool_ne_word_word : user_defined, primitive {
    fnm : "ne" '/*primitive*/ bool ne(word, word)'; 
    arg : ( bool:r word:i word:i );
}

// /*primitive*/ word complement(word)
word_complement_word : user_defined, primitive {
    fnm : "complement" '/*primitive*/ word complement(word)'; 
    arg : ( word:r word:i );
}

// /*primitive*/ word extend_sign(word)
word_extend_sign_word : user_defined, primitive {
    fnm : "extend_sign" '/*primitive*/ word extend_sign(word)'; 
    arg : ( word:r word:i );
}

// /*primitive*/ word asr(word, word)
word_asr_word_word : user_defined, primitive {
    fnm : "asr" '/*primitive*/ word asr(word, word)'; 
    arg : ( word:r word:i word:i );
}

// /*primitive*/ word lsr(word, word)
word_lsr_word_word : user_defined, primitive {
    fnm : "lsr" '/*primitive*/ word lsr(word, word)'; 
    arg : ( word:r word:i word:i );
}

// /*primitive*/ word lsl(word, word)
word_lsl_word_word : user_defined, primitive {
    fnm : "lsl" '/*primitive*/ word lsl(word, word)'; 
    arg : ( word:r word:i word:i );
}

// /*primitive*/ void mulss(word, word, word &, word &)
void_mulss_word_word_word_word : user_defined, primitive {
    fnm : "mulss" '/*primitive*/ void mulss(word, word, word &, word &)'; 
    arg : ( word:i word:i word:o word:o );
}

// /*primitive*/ void muluu(word, word, word &, word &)
void_muluu_word_word_word_word : user_defined, primitive {
    fnm : "muluu" '/*primitive*/ void muluu(word, word, word &, word &)'; 
    arg : ( word:i word:i word:o word:o );
}

// /*primitive*/ void divstep(word, word, word, word &, word &)
void_divstep_word_word_word_word_word : user_defined, primitive {
    fnm : "divstep" '/*primitive*/ void divstep(word, word, word, word &, word &)'; 
    arg : ( word:i word:i word:i word:o word:o );
}

// /*primitive*/ void jump(sbyte)
void_jump_sbyte : user_defined, jump, relative, primitive {
    fnm : "jump" '/*primitive*/ void jump(sbyte)'; 
    arg : ( sbyte:i );
}

// /*primitive*/ void jump(addr)
void_jump_addr : user_defined, absolute, jump, primitive {
    fnm : "jump" '/*primitive*/ void jump(addr)'; 
    arg : ( addr:i );
}

// /*primitive*/ addr jti(addr)
addr_jti_addr : user_defined, absolute, jti, primitive {
    fnm : "jti" '/*primitive*/ addr jti(addr)'; 
    arg : ( addr:r addr:i );
}

// /*primitive*/ void jump(bool, sbyte)
void_jump_bool_sbyte : user_defined, jump, relative, primitive {
    fnm : "jump" '/*primitive*/ void jump(bool, sbyte)'; 
    arg : ( bool:i sbyte:i );
}

// /*primitive*/ void jump(bool, addr)
void_jump_bool_addr : user_defined, absolute, jump, primitive {
    fnm : "jump" '/*primitive*/ void jump(bool, addr)'; 
    arg : ( bool:i addr:i );
}

// /*primitive*/ void ret(addr)
void_ret_addr : user_defined, ret, primitive {
    fnm : "ret" '/*primitive*/ void ret(addr)'; 
    arg : ( addr:i );
}

// /*primitive*/ addr bsr(addr)
addr_bsr_addr : user_defined, absolute, call, primitive {
    fnm : "bsr" '/*primitive*/ addr bsr(addr)'; 
    arg : ( addr:r addr:i );
}

// /*primitive*/ void hwdo(addr, addr)
void_hwdo_addr_addr : user_defined, absolute, doloop, primitive {
    fnm : "hwdo" '/*primitive*/ void hwdo(addr, addr)'; 
    arg : ( addr:i addr:i );
}

// /*primitive*/ uint2 incr(uint2)
uint2_incr_uint2 : user_defined, primitive {
    fnm : "incr" '/*primitive*/ uint2 incr(uint2)'; 
    arg : ( uint2:r uint2:i );
}

// /*primitive*/ uint2 decr(uint2)
uint2_decr_uint2 : user_defined, primitive {
    fnm : "decr" '/*primitive*/ uint2 decr(uint2)'; 
    arg : ( uint2:r uint2:i );
}

// /*primitive*/ void rti(addr)
void_rti_addr : user_defined, rti, primitive {
    fnm : "rti" '/*primitive*/ void rti(addr)'; 
    arg : ( addr:i );
}

// /*primitive*/ void halt()
void_halt : user_defined, halt, primitive {
    fnm : "halt" '/*primitive*/ void halt()'; 
}

// /*primitive*/ void nop()
void_nop : user_defined, nop, primitive {
    fnm : "nop" '/*primitive*/ void nop()'; 
}

// /*primitive*/ word::word(uint1)
word_word_uint1 : user_defined, conversion, primitive {
    fnm : "word" '/*primitive*/ word::word(uint1)'; 
    arg : ( word:r uint1:i );
}

// /*primitive*/ word::word(nint9)
word_word_nint9 : user_defined, conversion, primitive {
    fnm : "word" '/*primitive*/ word::word(nint9)'; 
    arg : ( word:r nint9:i );
}

// /*primitive*/ word::word(sbyte)
word_word_sbyte : user_defined, conversion, primitive {
    fnm : "word" '/*primitive*/ word::word(sbyte)'; 
    arg : ( word:r sbyte:i );
}

// /*primitive*/ word::word(addr)
word_word_addr : user_defined, conversion, primitive {
    fnm : "word" '/*primitive*/ word::word(addr)'; 
    arg : ( word:r addr:i );
}

// /*primitive*/ word::word(iword)
word_word_iword : user_defined, conversion, primitive {
    fnm : "word" '/*primitive*/ word::word(iword)'; 
    arg : ( word:r iword:i );
}

// /*primitive*/ addr::addr(word)
addr_addr_word : user_defined, conversion, primitive {
    fnm : "addr" '/*primitive*/ addr::addr(word)'; 
    arg : ( addr:r word:i );
}

// /*primitive*/ addr::addr(uint4)
addr_addr_uint4 : user_defined, conversion, primitive {
    fnm : "addr" '/*primitive*/ addr::addr(uint4)'; 
    arg : ( addr:r uint4:i );
}

// /*primitive*/ iword::iword(word)
iword_iword_word : user_defined, conversion, primitive {
    fnm : "iword" '/*primitive*/ iword::iword(word)'; 
    arg : ( iword:r word:i );
}

