
// File generated by noodle version O-2018.09#f5599cac26#190121, Tue May 28 12:03:13 2024
// Copyright 2014-2018 Synopsys, Inc. All rights reserved.
// noodle -Pc -B -Iisg +wisg -Iruntime/include -D__tct_patch__=300 -D__chess__ -D__programmers_view__ tzscale

toolrelease _18R3;

//-- SPILLING --

pattern {
}

constant_load_parent : pattern {
}
stack_load_parent : pattern {
}
stack_store_parent : pattern {
}

constant_load : constant_load_parent {
}
stack_load : stack_load_parent {
}
stack_store : stack_store_parent {
}

constant_load_indirect : constant_load_parent {
}
stack_load_indirect : stack_load_parent {
}
stack_store_indirect : stack_store_parent {
}

init_rp : pattern {
}
update_cp : pattern {
}
update_rp : pattern {
}
pop_regs : pattern {
}
push_regs : pattern {
}

complex_pattern : pattern {
}

complex_ctpat : complex_pattern {
}
complex_load : complex_pattern {
}
complex_store : complex_pattern {
}
complex_move : complex_pattern {
}

complex_tie : event_opn {
}

complex_ctpat_tie : complex_tie {
}
complex_load_tie : complex_tie {
}
complex_store_tie : complex_tie {
}

// auxiliary patterns defined in the source function sfg file:

aux_pattern {
}

complex_const : aux_pattern {
}


//-- APPLICATION LAYER TYPES --

typ __cchar<8t>[-128,127,1];
typ __schar<8t>[-128,127,1];
typ __uchar<8u>[0,255,1];
typ __sshort<16t>[-32768,32767,1];
typ __ushort<16u>[0,65535,1];
typ __sint<32t>[-2147483648,2147483647,1];
typ __uint<32u>[0,4294967295,1];
typ __slong<32t>[-2147483648,2147483647,1];
typ __ulong<32u>[0,4294967295,1];
typ __slonglong<64t>[-9223372036854775808,9223372036854775807,1];
typ __ulonglong<64u>[-9223372036854775808,9223372036854775807,1];
typ __ffloat<32e>[0,4294967295,1] e(2,8,3,0,0,0);
typ __fdouble<64e>[-9223372036854775808,9223372036854775807,1] e(2,11,3,0,0,0);
typ __flongdouble<64e>[-9223372036854775808,9223372036854775807,1] e(2,11,3,0,0,0);
typ __Pvoid<32u>[0,4294967295,1];
typ v2short<32e>[0,4294967295,1] v(__sshort,2);

// type promotions
promo(__schar,s) = { w08 w16 w32 } 
promo(__schar,t) = { addr } 
promo(__uchar,s) = { w08 w16 w32 } 
promo(__uchar,t) = { addr } 
promo(__sshort,s) = { w16 w32 } 
promo(__sshort,t) = { addr } 
promo(__ushort,s) = { w16 w32 } 
promo(__ushort,t) = { addr } 
promo(w32,t) = { addr } 
promo(int20p,s) = { w32 } 
promo(int20p,t) = { addr } 

// spill & constant memory differentiation
mem __spill_DMb[0..16777215,1]<w08,addr> alias DMb[0] align 1;
mem __spill_DMh[0..16777214,1]<w16,addr> alias __spill_DMb[0] align 1;
mem __spill_DMw[0..16777212,1]<w32,addr> alias __spill_DMb[0] align 1;

// chess_properties
prop release_q = ( q18R3 );
prop artificial_prefix_bits = ( 16 );
prop breakpoint_focus_stage = ( 2 );
prop ctor_list_memory = ( DMb_stat );
prop default_memory = ( DMb );
prop indirect_stack_access_0 = ( 0 );
prop link_register = ( LR );
prop no_redundant_loads = ( DMb DMh DMw );
prop nr_stacks = ( 1 );
prop padded_promo = ( int20p w32 pad12 int20p addr pad12 );
prop representation = ( __sint w32 __uint w32 __Pvoid w32 v2short w32 __slonglong dint __ulonglong dint __ffloat w32 __fdouble dint );
prop reserved = ( PC ocd_addr ocd_data ocd_instr SP );
prop sp_alignment_0 = ( 1 );
prop sp_location_0 = ( free );
prop sp_offset_type_0 = ( int12 );
prop spill_memory_0 = ( __spill_DMb __spill_DMh __spill_DMw );
prop stack_pointer_0 = ( SP );
prop subsume_constant = ( w32 int20p pad12 );
prop typedef_names = ( float64 float32 );
prop void___complex_ctpat_tie_w32_int20p_uint12 = ( 12 20 0 12 );


//-- APPLICATION LAYER OPERATIONS --

// additional  /*primitive*/ bool eq(w32, w32)
bool_eq_w32_w32 {
    cpl : bool_ne_w32_w32;
}

// additional  /*primitive*/ bool ne(w32, w32)
bool_ne_w32_w32 {
    cpl : bool_eq_w32_w32;
}

// additional  /*primitive*/ bool lt(w32, w32)
bool_lt_w32_w32 {
    cpl : bool_ge_w32_w32;
}

// additional  /*primitive*/ bool ge(w32, w32)
bool_ge_w32_w32 {
    cpl : bool_lt_w32_w32;
}

// additional  /*primitive*/ bool ltu(w32, w32)
bool_ltu_w32_w32 {
    cpl : bool_geu_w32_w32;
}

// additional  /*primitive*/ bool geu(w32, w32)
bool_geu_w32_w32 {
    cpl : bool_ltu_w32_w32;
}

// additional  /*primitive*/ addr::addr(w32)
addr_addr_w32 : promotion_conversion {
}

// int operator+(int, int)
__sint__pl___sint___sint : user_defined, commutative, inlined, promoted {
    fnm : "operator+" 'int operator+(int, int)'; 
    arg : ( __sint:r __sint:i __sint:i );
    prm : ( w32_add_w32_w32 );
}

// int operator-(int, int)
__sint__mi___sint___sint : user_defined, inlined, promoted {
    fnm : "operator-" 'int operator-(int, int)'; 
    arg : ( __sint:r __sint:i __sint:i );
    prm : ( w32_sub_w32_w32 );
}

// int operator*(int, int)
__sint__ml___sint___sint : user_defined, commutative, inlined, promoted {
    fnm : "operator*" 'int operator*(int, int)'; 
    arg : ( __sint:r __sint:i __sint:i );
    prm : ( w32_mul_w32_w32 );
}

// int operator/(int, int)
__sint__dv___sint___sint : user_defined, inlined, promoted {
    fnm : "operator/" 'int operator/(int, int)'; 
    arg : ( __sint:r __sint:i __sint:i );
    prm : ( w32_divs_w32_w32 );
}

// int operator%(int, int)
__sint__md___sint___sint : user_defined, inlined, promoted {
    fnm : "operator%" 'int operator%(int, int)'; 
    arg : ( __sint:r __sint:i __sint:i );
    prm : ( w32_rems_w32_w32 );
}

// int operator&(int, int)
__sint__ad___sint___sint : user_defined, commutative, inlined, promoted {
    fnm : "operator&" 'int operator&(int, int)'; 
    arg : ( __sint:r __sint:i __sint:i );
    prm : ( w32_band_w32_w32 );
}

// int operator|(int, int)
__sint__or___sint___sint : user_defined, commutative, inlined, promoted {
    fnm : "operator|" 'int operator|(int, int)'; 
    arg : ( __sint:r __sint:i __sint:i );
    prm : ( w32_bor_w32_w32 );
}

// int operator^(int, int)
__sint__er___sint___sint : user_defined, commutative, inlined, promoted {
    fnm : "operator^" 'int operator^(int, int)'; 
    arg : ( __sint:r __sint:i __sint:i );
    prm : ( w32_bxor_w32_w32 );
}

// int operator<<(int, int)
__sint__ls___sint___sint : user_defined, inlined, promoted {
    fnm : "operator<<" 'int operator<<(int, int)'; 
    arg : ( __sint:r __sint:i __sint:i );
    prm : ( w32_sll_w32_w32 );
}

// int operator>>(int, int)
__sint__rs___sint___sint : user_defined, inlined, promoted {
    fnm : "operator>>" 'int operator>>(int, int)'; 
    arg : ( __sint:r __sint:i __sint:i );
    prm : ( w32_sra_w32_w32 );
}

// bool operator<(int, int)
bool__lt___sint___sint : user_defined, inlined, promoted {
    fnm : "operator<" 'bool operator<(int, int)'; 
    arg : ( bool:r __sint:i __sint:i );
    cpl : bool__ge___sint___sint;
    prm : ( bool_lt_w32_w32 );
}

// bool operator>=(int, int)
bool__ge___sint___sint : user_defined, inlined, promoted {
    fnm : "operator>=" 'bool operator>=(int, int)'; 
    arg : ( bool:r __sint:i __sint:i );
    cpl : bool__lt___sint___sint;
    prm : ( bool_ge_w32_w32 );
}

// bool operator==(int, int)
bool__eq___sint___sint : user_defined, commutative, inlined, promoted {
    fnm : "operator==" 'bool operator==(int, int)'; 
    arg : ( bool:r __sint:i __sint:i );
    cpl : bool__ne___sint___sint;
    prm : ( bool_eq_w32_w32 );
}

// bool operator!=(int, int)
bool__ne___sint___sint : user_defined, commutative, inlined, promoted {
    fnm : "operator!=" 'bool operator!=(int, int)'; 
    arg : ( bool:r __sint:i __sint:i );
    cpl : bool__eq___sint___sint;
    prm : ( bool_ne_w32_w32 );
}

// unsigned operator+(unsigned, unsigned)
__uint__pl___uint___uint : user_defined, commutative, inlined, promoted {
    fnm : "operator+" 'unsigned operator+(unsigned, unsigned)'; 
    arg : ( __uint:r __uint:i __uint:i );
    prm : ( w32_add_w32_w32 );
}

// unsigned operator-(unsigned, unsigned)
__uint__mi___uint___uint : user_defined, inlined, promoted {
    fnm : "operator-" 'unsigned operator-(unsigned, unsigned)'; 
    arg : ( __uint:r __uint:i __uint:i );
    prm : ( w32_sub_w32_w32 );
}

// unsigned operator*(unsigned, unsigned)
__uint__ml___uint___uint : user_defined, commutative, inlined, promoted {
    fnm : "operator*" 'unsigned operator*(unsigned, unsigned)'; 
    arg : ( __uint:r __uint:i __uint:i );
    prm : ( w32_mul_w32_w32 );
}

// unsigned operator/(unsigned, unsigned)
__uint__dv___uint___uint : user_defined, inlined, promoted {
    fnm : "operator/" 'unsigned operator/(unsigned, unsigned)'; 
    arg : ( __uint:r __uint:i __uint:i );
    prm : ( w32_divu_w32_w32 );
}

// unsigned operator%(unsigned, unsigned)
__uint__md___uint___uint : user_defined, inlined, promoted {
    fnm : "operator%" 'unsigned operator%(unsigned, unsigned)'; 
    arg : ( __uint:r __uint:i __uint:i );
    prm : ( w32_remu_w32_w32 );
}

// unsigned operator&(unsigned, unsigned)
__uint__ad___uint___uint : user_defined, commutative, inlined, promoted {
    fnm : "operator&" 'unsigned operator&(unsigned, unsigned)'; 
    arg : ( __uint:r __uint:i __uint:i );
    prm : ( w32_band_w32_w32 );
}

// unsigned operator|(unsigned, unsigned)
__uint__or___uint___uint : user_defined, commutative, inlined, promoted {
    fnm : "operator|" 'unsigned operator|(unsigned, unsigned)'; 
    arg : ( __uint:r __uint:i __uint:i );
    prm : ( w32_bor_w32_w32 );
}

// unsigned operator^(unsigned, unsigned)
__uint__er___uint___uint : user_defined, commutative, inlined, promoted {
    fnm : "operator^" 'unsigned operator^(unsigned, unsigned)'; 
    arg : ( __uint:r __uint:i __uint:i );
    prm : ( w32_bxor_w32_w32 );
}

// unsigned operator<<(unsigned, int)
__uint__ls___uint___sint : user_defined, inlined, promoted {
    fnm : "operator<<" 'unsigned operator<<(unsigned, int)'; 
    arg : ( __uint:r __uint:i __sint:i );
    prm : ( w32_sll_w32_w32 );
}

// unsigned operator>>(unsigned, int)
__uint__rs___uint___sint : user_defined, inlined, promoted {
    fnm : "operator>>" 'unsigned operator>>(unsigned, int)'; 
    arg : ( __uint:r __uint:i __sint:i );
    prm : ( w32_srl_w32_w32 );
}

// bool operator<(unsigned, unsigned)
bool__lt___uint___uint : user_defined, inlined, promoted {
    fnm : "operator<" 'bool operator<(unsigned, unsigned)'; 
    arg : ( bool:r __uint:i __uint:i );
    cpl : bool__ge___uint___uint;
    prm : ( bool_ltu_w32_w32 );
}

// bool operator>=(unsigned, unsigned)
bool__ge___uint___uint : user_defined, inlined, promoted {
    fnm : "operator>=" 'bool operator>=(unsigned, unsigned)'; 
    arg : ( bool:r __uint:i __uint:i );
    cpl : bool__lt___uint___uint;
    prm : ( bool_geu_w32_w32 );
}

// bool operator==(unsigned, unsigned)
bool__eq___uint___uint : user_defined, commutative, inlined, promoted {
    fnm : "operator==" 'bool operator==(unsigned, unsigned)'; 
    arg : ( bool:r __uint:i __uint:i );
    cpl : bool__ne___uint___uint;
    prm : ( bool_eq_w32_w32 );
}

// bool operator!=(unsigned, unsigned)
bool__ne___uint___uint : user_defined, commutative, inlined, promoted {
    fnm : "operator!=" 'bool operator!=(unsigned, unsigned)'; 
    arg : ( bool:r __uint:i __uint:i );
    cpl : bool__eq___uint___uint;
    prm : ( bool_ne_w32_w32 );
}

// operator signed char(unsigned char)
__schar___schar___uchar : user_defined, conversion, inlined, promotion_conversion, promoted {
    fnm : "__schar" 'operator signed char(unsigned char)'; 
    arg : ( __schar:r __uchar:i );
    prm : ( w08_extract_w08_w32 w32_extend_sign_w08 );
}

// operator signed char(short)
__schar___schar___sshort : user_defined, conversion, inlined, promotion_conversion, promoted {
    fnm : "__schar" 'operator signed char(short)'; 
    arg : ( __schar:r __sshort:i );
    prm : ( w08_extract_w08_w32 );
}

// operator signed char(unsigned short)
__schar___schar___ushort : user_defined, conversion, inlined, promotion_conversion, promoted {
    fnm : "__schar" 'operator signed char(unsigned short)'; 
    arg : ( __schar:r __ushort:i );
    prm : ( w08_extract_w08_w32 );
}

// operator signed char(int)
__schar___schar___sint : user_defined, conversion, inlined, promoted {
    fnm : "__schar" 'operator signed char(int)'; 
    arg : ( __schar:r __sint:i );
    prm : ( w08_extract_w08_w32 );
}

// operator signed char(unsigned)
__schar___schar___uint : user_defined, conversion, inlined, promoted {
    fnm : "__schar" 'operator signed char(unsigned)'; 
    arg : ( __schar:r __uint:i );
    prm : ( w08_extract_w08_w32 );
}

// operator unsigned char(signed char)
__uchar___uchar___schar : user_defined, conversion, inlined, promotion_conversion, promoted {
    fnm : "__uchar" 'operator unsigned char(signed char)'; 
    arg : ( __uchar:r __schar:i );
    prm : ( w32_zero_extend_08_w32 w08_extract_w08_w32 w32_extend_zero_w08 );
}

// operator unsigned char(short)
__uchar___uchar___sshort : user_defined, conversion, inlined, promotion_conversion, promoted {
    fnm : "__uchar" 'operator unsigned char(short)'; 
    arg : ( __uchar:r __sshort:i );
    prm : ( w32_zero_extend_08_w32 w08_extract_w08_w32 );
}

// operator unsigned char(unsigned short)
__uchar___uchar___ushort : user_defined, conversion, inlined, promotion_conversion, promoted {
    fnm : "__uchar" 'operator unsigned char(unsigned short)'; 
    arg : ( __uchar:r __ushort:i );
    prm : ( w32_zero_extend_08_w32 w08_extract_w08_w32 );
}

// operator unsigned char(int)
__uchar___uchar___sint : user_defined, conversion, inlined, promoted {
    fnm : "__uchar" 'operator unsigned char(int)'; 
    arg : ( __uchar:r __sint:i );
    prm : ( w32_zero_extend_08_w32 w08_extract_w08_w32 );
}

// operator unsigned char(unsigned)
__uchar___uchar___uint : user_defined, conversion, inlined, promoted {
    fnm : "__uchar" 'operator unsigned char(unsigned)'; 
    arg : ( __uchar:r __uint:i );
    prm : ( w32_zero_extend_08_w32 w08_extract_w08_w32 );
}

// operator short(unsigned short)
__sshort___sshort___ushort : user_defined, conversion, inlined, promotion_conversion, promoted {
    fnm : "__sshort" 'operator short(unsigned short)'; 
    arg : ( __sshort:r __ushort:i );
    prm : ( w16_extract_w16_w32 w32_extend_sign_w16 );
}

// operator short(int)
__sshort___sshort___sint : user_defined, conversion, inlined, promoted {
    fnm : "__sshort" 'operator short(int)'; 
    arg : ( __sshort:r __sint:i );
    prm : ( w16_extract_w16_w32 );
}

// operator short(unsigned)
__sshort___sshort___uint : user_defined, conversion, inlined, promoted {
    fnm : "__sshort" 'operator short(unsigned)'; 
    arg : ( __sshort:r __uint:i );
    prm : ( w16_extract_w16_w32 );
}

// operator unsigned short(signed char)
__ushort___ushort___schar : user_defined, conversion, inlined, promotion_conversion, promoted {
    fnm : "__ushort" 'operator unsigned short(signed char)'; 
    arg : ( __ushort:r __schar:i );
    prm : ( w16_extract_w16_w32 );
}

// operator unsigned short(short)
__ushort___ushort___sshort : user_defined, conversion, inlined, promotion_conversion, promoted {
    fnm : "__ushort" 'operator unsigned short(short)'; 
    arg : ( __ushort:r __sshort:i );
    prm : ( w16_extract_w16_w32 w32_extend_zero_w16 );
}

// operator unsigned short(int)
__ushort___ushort___sint : user_defined, conversion, inlined, promoted {
    fnm : "__ushort" 'operator unsigned short(int)'; 
    arg : ( __ushort:r __sint:i );
    prm : ( w16_extract_w16_w32 );
}

// operator unsigned short(unsigned)
__ushort___ushort___uint : user_defined, conversion, inlined, promoted {
    fnm : "__ushort" 'operator unsigned short(unsigned)'; 
    arg : ( __ushort:r __uint:i );
    prm : ( w16_extract_w16_w32 );
}

// void *operator+(void *, int)
__Pvoid__pl___Pvoid___sint : user_defined, inlined, promoted {
    fnm : "operator+" 'void *operator+(void *, int)'; 
    arg : ( __Pvoid:r __Pvoid:i __sint:i );
    prm : ( w32_add_w32_w32 );
}

// void *operator-(void *, int)
__Pvoid__mi___Pvoid___sint : user_defined, inlined, promoted {
    fnm : "operator-" 'void *operator-(void *, int)'; 
    arg : ( __Pvoid:r __Pvoid:i __sint:i );
    prm : ( w32_sub_w32_w32 );
}

// int operator-(void *, void *)
__sint__mi___Pvoid___Pvoid : user_defined, inlined, promoted {
    fnm : "operator-" 'int operator-(void *, void *)'; 
    arg : ( __sint:r __Pvoid:i __Pvoid:i );
    prm : ( w32_sub_w32_w32 );
}

// bool operator<(void *, void *)
bool__lt___Pvoid___Pvoid : user_defined, inlined, promoted {
    fnm : "operator<" 'bool operator<(void *, void *)'; 
    arg : ( bool:r __Pvoid:i __Pvoid:i );
    cpl : bool__ge___Pvoid___Pvoid;
    prm : ( bool_ltu_w32_w32 );
}

// bool operator>=(void *, void *)
bool__ge___Pvoid___Pvoid : user_defined, inlined, promoted {
    fnm : "operator>=" 'bool operator>=(void *, void *)'; 
    arg : ( bool:r __Pvoid:i __Pvoid:i );
    cpl : bool__lt___Pvoid___Pvoid;
    prm : ( bool_geu_w32_w32 );
}

// bool operator==(void *, void *)
bool__eq___Pvoid___Pvoid : user_defined, commutative, inlined, promoted {
    fnm : "operator==" 'bool operator==(void *, void *)'; 
    arg : ( bool:r __Pvoid:i __Pvoid:i );
    cpl : bool__ne___Pvoid___Pvoid;
    prm : ( bool_eq_w32_w32 );
}

// bool operator!=(void *, void *)
bool__ne___Pvoid___Pvoid : user_defined, commutative, inlined, promoted {
    fnm : "operator!=" 'bool operator!=(void *, void *)'; 
    arg : ( bool:r __Pvoid:i __Pvoid:i );
    cpl : bool__eq___Pvoid___Pvoid;
    prm : ( bool_ne_w32_w32 );
}

// void chess_stop()
chess_stop : chess_hosted, volatile {
}

// void chess_separator()
chess_separator : called {
}

// void chess_separator_scheduler()
chess_separator_scheduler : chess_separator {
}

// void chess_separator_scheduler(int)
chess_separator_scheduler : chess_separator {
}

// void chess_instruction_tracing_begin()
chess_instruction_tracing_begin : chess_separator_scheduler {
}

// void chess_instruction_tracing_end()
chess_instruction_tracing_end : chess_separator_scheduler {
}

// void chess_profile_begin()
chess_profile_begin : chess_separator_scheduler {
}

// void chess_profile_end()
chess_profile_end : chess_separator_scheduler {
}

// unsigned add(unsigned, unsigned)
__uint_add___uint___uint : user_defined, commutative, promoted {
    fnm : "add" 'unsigned add(unsigned, unsigned)'; 
    arg : ( __uint:r __uint:i __uint:i );
    prm : ( w32_add_w32_w32 );
}

// unsigned sub(unsigned, unsigned)
__uint_sub___uint___uint : user_defined, promoted {
    fnm : "sub" 'unsigned sub(unsigned, unsigned)'; 
    arg : ( __uint:r __uint:i __uint:i );
    prm : ( w32_sub_w32_w32 );
}

// unsigned mulhu(unsigned, unsigned)
__uint_mulhu___uint___uint : user_defined, commutative, promoted {
    fnm : "mulhu" 'unsigned mulhu(unsigned, unsigned)'; 
    arg : ( __uint:r __uint:i __uint:i );
    prm : ( w32_mulhu_w32_w32 );
}

// unsigned mul(unsigned, unsigned)
__uint_mul___uint___uint : user_defined, commutative, promoted {
    fnm : "mul" 'unsigned mul(unsigned, unsigned)'; 
    arg : ( __uint:r __uint:i __uint:i );
    prm : ( w32_mul_w32_w32 );
}

// void __complex_ctpat(w32 &)
void___complex_ctpat_w32 : complex_ctpat {
    fnm : "__complex_ctpat" 'void __complex_ctpat(w32 &)'; 
    arg : ( w32:o );
}

// void __complex_ctpat_tie(w32, int20p &, uint12 &)
void___complex_ctpat_tie_w32_int20p_uint12 : complex_ctpat_tie {
    fnm : "__complex_ctpat_tie" 'void __complex_ctpat_tie(w32, int20p &, uint12 &)'; 
    arg : ( w32:i int20p:o uint12:o );
}

// void __pat1_complex_ctpat(w32 &)
void___pat1_complex_ctpat_w32 : void___complex_ctpat_w32 {
    loc : ( R[] );
}

// int ext_mac_(int, int, int)
__sint_ext_mac____sint___sint___sint : user_defined, promoted {
    fnm : "ext_mac_" 'int ext_mac_(int, int, int)'; 
    arg : ( __sint:r __sint:i __sint:i __sint:i );
    prm : ( w32_mac_w32_w32_w32 );
}

// int operator*(v2short, v2short)
__sint__ml_v2short_v2short : user_defined, commutative, promoted {
    fnm : "operator*" 'int operator*(v2short, v2short)'; 
    arg : ( __sint:r v2short:i v2short:i );
    prm : ( w32_dotp_w32_w32 );
}

// int ext_dotp_(v2short, v2short, int)
__sint_ext_dotp__v2short_v2short___sint : user_defined, promoted {
    fnm : "ext_dotp_" 'int ext_dotp_(v2short, v2short, int)'; 
    arg : ( __sint:r v2short:i v2short:i __sint:i );
    prm : ( w32_sdotp_w32_w32_w32 );
}

// void __rts_jr(w32)
void___rts_jr_w32 : user_defined, absolute, chess_view_opn, jump, ret, promoted {
    fnm : "__rts_jr" 'void __rts_jr(w32)'; 
    arg : ( w32:i );
    prm : ( void_jr_w32 );
}

// void chess_assert(bool)
void_chess_assert_bool : chess_assert {
    fnm : "chess_assert" 'void chess_assert(bool)'; 
    arg : ( w32:i );
}

// void chess_report(bool)
void_chess_report_bool : chess_report {
    fnm : "chess_report" 'void chess_report(bool)'; 
    arg : ( w32:i );
}

// void chess_assert(char)
void_chess_assert___cchar : chess_assert {
    fnm : "chess_assert" 'void chess_assert(char)'; 
    arg : ( __schar:i );
}

// void chess_report(char)
void_chess_report___cchar : chess_report {
    fnm : "chess_report" 'void chess_report(char)'; 
    arg : ( __schar:i );
}

// void chess_assert(signed char)
void_chess_assert___schar : chess_assert {
    fnm : "chess_assert" 'void chess_assert(signed char)'; 
    arg : ( __schar:i );
}

// void chess_report(signed char)
void_chess_report___schar : chess_report {
    fnm : "chess_report" 'void chess_report(signed char)'; 
    arg : ( __schar:i );
}

// void chess_assert(unsigned char)
void_chess_assert___uchar : chess_assert {
    fnm : "chess_assert" 'void chess_assert(unsigned char)'; 
    arg : ( __uchar:i );
}

// void chess_report(unsigned char)
void_chess_report___uchar : chess_report {
    fnm : "chess_report" 'void chess_report(unsigned char)'; 
    arg : ( __uchar:i );
}

// void chess_assert(short)
void_chess_assert___sshort : chess_assert {
    fnm : "chess_assert" 'void chess_assert(short)'; 
    arg : ( __sshort:i );
}

// void chess_report(short)
void_chess_report___sshort : chess_report {
    fnm : "chess_report" 'void chess_report(short)'; 
    arg : ( __sshort:i );
}

// void chess_assert(unsigned short)
void_chess_assert___ushort : chess_assert {
    fnm : "chess_assert" 'void chess_assert(unsigned short)'; 
    arg : ( __ushort:i );
}

// void chess_report(unsigned short)
void_chess_report___ushort : chess_report {
    fnm : "chess_report" 'void chess_report(unsigned short)'; 
    arg : ( __ushort:i );
}

// void chess_assert(int)
void_chess_assert___sint : chess_assert {
    fnm : "chess_assert" 'void chess_assert(int)'; 
    arg : ( w32:i );
}

// void chess_report(int)
void_chess_report___sint : chess_report {
    fnm : "chess_report" 'void chess_report(int)'; 
    arg : ( w32:i );
}

// void chess_assert(unsigned)
void_chess_assert___uint : chess_assert {
    fnm : "chess_assert" 'void chess_assert(unsigned)'; 
    arg : ( w32:i );
}

// void chess_report(unsigned)
void_chess_report___uint : chess_report {
    fnm : "chess_report" 'void chess_report(unsigned)'; 
    arg : ( w32:i );
}

// void chess_assert(long)
void_chess_assert___slong : chess_assert {
    fnm : "chess_assert" 'void chess_assert(long)'; 
    arg : ( w32:i );
}

// void chess_report(long)
void_chess_report___slong : chess_report {
    fnm : "chess_report" 'void chess_report(long)'; 
    arg : ( w32:i );
}

// void chess_assert(unsigned long)
void_chess_assert___ulong : chess_assert {
    fnm : "chess_assert" 'void chess_assert(unsigned long)'; 
    arg : ( w32:i );
}

// void chess_report(unsigned long)
void_chess_report___ulong : chess_report {
    fnm : "chess_report" 'void chess_report(unsigned long)'; 
    arg : ( w32:i );
}

// void chess_assert(long long)
void_chess_assert___slonglong : chess_assert {
    fnm : "chess_assert" 'void chess_assert(long long)'; 
    arg : ( w32:i w32:i );
}

// void chess_report(long long)
void_chess_report___slonglong : chess_report {
    fnm : "chess_report" 'void chess_report(long long)'; 
    arg : ( w32:i w32:i );
}

// void chess_assert(unsigned long long)
void_chess_assert___ulonglong : chess_assert {
    fnm : "chess_assert" 'void chess_assert(unsigned long long)'; 
    arg : ( w32:i w32:i );
}

// void chess_report(unsigned long long)
void_chess_report___ulonglong : chess_report {
    fnm : "chess_report" 'void chess_report(unsigned long long)'; 
    arg : ( w32:i w32:i );
}

// void chess_assert(float)
void_chess_assert___ffloat : chess_assert {
    fnm : "chess_assert" 'void chess_assert(float)'; 
    arg : ( w32:i );
}

// void chess_report(float)
void_chess_report___ffloat : chess_report {
    fnm : "chess_report" 'void chess_report(float)'; 
    arg : ( w32:i );
}

// void chess_assert(double)
void_chess_assert___fdouble : chess_assert {
    fnm : "chess_assert" 'void chess_assert(double)'; 
    arg : ( w32:i w32:i );
}

// void chess_report(double)
void_chess_report___fdouble : chess_report {
    fnm : "chess_report" 'void chess_report(double)'; 
    arg : ( w32:i w32:i );
}

// void chess_assert(long double)
void_chess_assert___flongdouble : chess_assert {
    fnm : "chess_assert" 'void chess_assert(long double)'; 
    arg : ( w32:i w32:i );
}

// void chess_report(long double)
void_chess_report___flongdouble : chess_report {
    fnm : "chess_report" 'void chess_report(long double)'; 
    arg : ( w32:i w32:i );
}

// void chess_assert(void *)
void_chess_assert___Pvoid : chess_assert {
    fnm : "chess_assert" 'void chess_assert(void *)'; 
    arg : ( w32:i );
}

// void chess_report(void *)
void_chess_report___Pvoid : chess_report {
    fnm : "chess_report" 'void chess_report(void *)'; 
    arg : ( w32:i );
}

// void chess_assert(void chess_storage(PMb) *)
void_chess_assert___PPMbvoid : chess_assert {
    fnm : "chess_assert" 'void chess_assert(void chess_storage(PMb) *)'; 
    arg : ( w32:i );
}

// void chess_report(void chess_storage(PMb) *)
void_chess_report___PPMbvoid : chess_report {
    fnm : "chess_report" 'void chess_report(void chess_storage(PMb) *)'; 
    arg : ( w32:i );
}

// void chess_assert(void chess_storage(PM) *)
void_chess_assert___PPMvoid : chess_assert {
    fnm : "chess_assert" 'void chess_assert(void chess_storage(PM) *)'; 
    arg : ( w32:i );
}

// void chess_report(void chess_storage(PM) *)
void_chess_report___PPMvoid : chess_report {
    fnm : "chess_report" 'void chess_report(void chess_storage(PM) *)'; 
    arg : ( w32:i );
}

// void chess_assert(void chess_storage(DMb) *)
void_chess_assert___PDMbvoid : chess_assert {
    fnm : "chess_assert" 'void chess_assert(void chess_storage(DMb) *)'; 
    arg : ( w32:i );
}

// void chess_report(void chess_storage(DMb) *)
void_chess_report___PDMbvoid : chess_report {
    fnm : "chess_report" 'void chess_report(void chess_storage(DMb) *)'; 
    arg : ( w32:i );
}

// void chess_assert(void chess_storage(DMh) *)
void_chess_assert___PDMhvoid : chess_assert {
    fnm : "chess_assert" 'void chess_assert(void chess_storage(DMh) *)'; 
    arg : ( w32:i );
}

// void chess_report(void chess_storage(DMh) *)
void_chess_report___PDMhvoid : chess_report {
    fnm : "chess_report" 'void chess_report(void chess_storage(DMh) *)'; 
    arg : ( w32:i );
}

// void chess_assert(void chess_storage(DMw) *)
void_chess_assert___PDMwvoid : chess_assert {
    fnm : "chess_assert" 'void chess_assert(void chess_storage(DMw) *)'; 
    arg : ( w32:i );
}

// void chess_report(void chess_storage(DMw) *)
void_chess_report___PDMwvoid : chess_report {
    fnm : "chess_report" 'void chess_report(void chess_storage(DMw) *)'; 
    arg : ( w32:i );
}

// void chess_assert(void chess_storage(DMb_stat) *)
void_chess_assert___PDMb_statvoid : chess_assert {
    fnm : "chess_assert" 'void chess_assert(void chess_storage(DMb_stat) *)'; 
    arg : ( w32:i );
}

// void chess_report(void chess_storage(DMb_stat) *)
void_chess_report___PDMb_statvoid : chess_report {
    fnm : "chess_report" 'void chess_report(void chess_storage(DMb_stat) *)'; 
    arg : ( w32:i );
}

// void chess_assert(void chess_storage(DMh_stat) *)
void_chess_assert___PDMh_statvoid : chess_assert {
    fnm : "chess_assert" 'void chess_assert(void chess_storage(DMh_stat) *)'; 
    arg : ( w32:i );
}

// void chess_report(void chess_storage(DMh_stat) *)
void_chess_report___PDMh_statvoid : chess_report {
    fnm : "chess_report" 'void chess_report(void chess_storage(DMh_stat) *)'; 
    arg : ( w32:i );
}

// void chess_assert(void chess_storage(DMw_stat) *)
void_chess_assert___PDMw_statvoid : chess_assert {
    fnm : "chess_assert" 'void chess_assert(void chess_storage(DMw_stat) *)'; 
    arg : ( w32:i );
}

// void chess_report(void chess_storage(DMw_stat) *)
void_chess_report___PDMw_statvoid : chess_report {
    fnm : "chess_report" 'void chess_report(void chess_storage(DMw_stat) *)'; 
    arg : ( w32:i );
}

// void chess_assert(w08)
void_chess_assert_w08 : chess_assert {
    fnm : "chess_assert" 'void chess_assert(w08)'; 
    arg : ( w08:i );
}

// void chess_report(w08)
void_chess_report_w08 : chess_report {
    fnm : "chess_report" 'void chess_report(w08)'; 
    arg : ( w08:i );
}

// void chess_assert(w16)
void_chess_assert_w16 : chess_assert {
    fnm : "chess_assert" 'void chess_assert(w16)'; 
    arg : ( w16:i );
}

// void chess_report(w16)
void_chess_report_w16 : chess_report {
    fnm : "chess_report" 'void chess_report(w16)'; 
    arg : ( w16:i );
}

// void chess_assert(w32)
void_chess_assert_w32 : chess_assert {
    fnm : "chess_assert" 'void chess_assert(w32)'; 
    arg : ( w32:i );
}

// void chess_report(w32)
void_chess_report_w32 : chess_report {
    fnm : "chess_report" 'void chess_report(w32)'; 
    arg : ( w32:i );
}

// void chess_assert(addr)
void_chess_assert_addr : chess_assert {
    fnm : "chess_assert" 'void chess_assert(addr)'; 
    arg : ( addr:i );
}

// void chess_report(addr)
void_chess_report_addr : chess_report {
    fnm : "chess_report" 'void chess_report(addr)'; 
    arg : ( addr:i );
}

// void chess_assert(iword)
void_chess_assert_iword : chess_assert {
    fnm : "chess_assert" 'void chess_assert(iword)'; 
    arg : ( iword:i );
}

// void chess_report(iword)
void_chess_report_iword : chess_report {
    fnm : "chess_report" 'void chess_report(iword)'; 
    arg : ( iword:i );
}

// void chess_assert(uint1)
void_chess_assert_uint1 : chess_assert {
    fnm : "chess_assert" 'void chess_assert(uint1)'; 
    arg : ( uint1:i );
}

// void chess_report(uint1)
void_chess_report_uint1 : chess_report {
    fnm : "chess_report" 'void chess_report(uint1)'; 
    arg : ( uint1:i );
}

// void chess_assert(uint3)
void_chess_assert_uint3 : chess_assert {
    fnm : "chess_assert" 'void chess_assert(uint3)'; 
    arg : ( uint3:i );
}

// void chess_report(uint3)
void_chess_report_uint3 : chess_report {
    fnm : "chess_report" 'void chess_report(uint3)'; 
    arg : ( uint3:i );
}

// void chess_assert(uint4)
void_chess_assert_uint4 : chess_assert {
    fnm : "chess_assert" 'void chess_assert(uint4)'; 
    arg : ( uint4:i );
}

// void chess_report(uint4)
void_chess_report_uint4 : chess_report {
    fnm : "chess_report" 'void chess_report(uint4)'; 
    arg : ( uint4:i );
}

// void chess_assert(uint5)
void_chess_assert_uint5 : chess_assert {
    fnm : "chess_assert" 'void chess_assert(uint5)'; 
    arg : ( uint5:i );
}

// void chess_report(uint5)
void_chess_report_uint5 : chess_report {
    fnm : "chess_report" 'void chess_report(uint5)'; 
    arg : ( uint5:i );
}

// void chess_assert(uint5nz)
void_chess_assert_uint5nz : chess_assert {
    fnm : "chess_assert" 'void chess_assert(uint5nz)'; 
    arg : ( uint5nz:i );
}

// void chess_report(uint5nz)
void_chess_report_uint5nz : chess_report {
    fnm : "chess_report" 'void chess_report(uint5nz)'; 
    arg : ( uint5nz:i );
}

// void chess_assert(uint6_1_31)
void_chess_assert_uint6_1_31 : chess_assert {
    fnm : "chess_assert" 'void chess_assert(uint6_1_31)'; 
    arg : ( uint6_1_31:i );
}

// void chess_report(uint6_1_31)
void_chess_report_uint6_1_31 : chess_report {
    fnm : "chess_report" 'void chess_report(uint6_1_31)'; 
    arg : ( uint6_1_31:i );
}

// void chess_assert(uint7s4)
void_chess_assert_uint7s4 : chess_assert {
    fnm : "chess_assert" 'void chess_assert(uint7s4)'; 
    arg : ( uint7s4:i );
}

// void chess_report(uint7s4)
void_chess_report_uint7s4 : chess_report {
    fnm : "chess_report" 'void chess_report(uint7s4)'; 
    arg : ( uint7s4:i );
}

// void chess_assert(uint8)
void_chess_assert_uint8 : chess_assert {
    fnm : "chess_assert" 'void chess_assert(uint8)'; 
    arg : ( uint8:i );
}

// void chess_report(uint8)
void_chess_report_uint8 : chess_report {
    fnm : "chess_report" 'void chess_report(uint8)'; 
    arg : ( uint8:i );
}

// void chess_assert(uint8s4)
void_chess_assert_uint8s4 : chess_assert {
    fnm : "chess_assert" 'void chess_assert(uint8s4)'; 
    arg : ( uint8s4:i );
}

// void chess_report(uint8s4)
void_chess_report_uint8s4 : chess_report {
    fnm : "chess_report" 'void chess_report(uint8s4)'; 
    arg : ( uint8s4:i );
}

// void chess_assert(uint10nz4)
void_chess_assert_uint10nz4 : chess_assert {
    fnm : "chess_assert" 'void chess_assert(uint10nz4)'; 
    arg : ( uint10nz4:i );
}

// void chess_report(uint10nz4)
void_chess_report_uint10nz4 : chess_report {
    fnm : "chess_report" 'void chess_report(uint10nz4)'; 
    arg : ( uint10nz4:i );
}

// void chess_assert(uint12)
void_chess_assert_uint12 : chess_assert {
    fnm : "chess_assert" 'void chess_assert(uint12)'; 
    arg : ( uint12:i );
}

// void chess_report(uint12)
void_chess_report_uint12 : chess_report {
    fnm : "chess_report" 'void chess_report(uint12)'; 
    arg : ( uint12:i );
}

// void chess_assert(uint16)
void_chess_assert_uint16 : chess_assert {
    fnm : "chess_assert" 'void chess_assert(uint16)'; 
    arg : ( uint16:i );
}

// void chess_report(uint16)
void_chess_report_uint16 : chess_report {
    fnm : "chess_report" 'void chess_report(uint16)'; 
    arg : ( uint16:i );
}

// void chess_assert(int3)
void_chess_assert_int3 : chess_assert {
    fnm : "chess_assert" 'void chess_assert(int3)'; 
    arg : ( int3:i );
}

// void chess_report(int3)
void_chess_report_int3 : chess_report {
    fnm : "chess_report" 'void chess_report(int3)'; 
    arg : ( int3:i );
}

// void chess_assert(int5)
void_chess_assert_int5 : chess_assert {
    fnm : "chess_assert" 'void chess_assert(int5)'; 
    arg : ( int5:i );
}

// void chess_report(int5)
void_chess_report_int5 : chess_report {
    fnm : "chess_report" 'void chess_report(int5)'; 
    arg : ( int5:i );
}

// void chess_assert(int6n)
void_chess_assert_int6n : chess_assert {
    fnm : "chess_assert" 'void chess_assert(int6n)'; 
    arg : ( int6n:i );
}

// void chess_report(int6n)
void_chess_report_int6n : chess_report {
    fnm : "chess_report" 'void chess_report(int6n)'; 
    arg : ( int6n:i );
}

// void chess_assert(int6p)
void_chess_assert_int6p : chess_assert {
    fnm : "chess_assert" 'void chess_assert(int6p)'; 
    arg : ( int6p:i );
}

// void chess_report(int6p)
void_chess_report_int6p : chess_report {
    fnm : "chess_report" 'void chess_report(int6p)'; 
    arg : ( int6p:i );
}

// void chess_assert(int6)
void_chess_assert_int6 : chess_assert {
    fnm : "chess_assert" 'void chess_assert(int6)'; 
    arg : ( int6:i );
}

// void chess_report(int6)
void_chess_report_int6 : chess_report {
    fnm : "chess_report" 'void chess_report(int6)'; 
    arg : ( int6:i );
}

// void chess_assert(int9s2)
void_chess_assert_int9s2 : chess_assert {
    fnm : "chess_assert" 'void chess_assert(int9s2)'; 
    arg : ( int9s2:i );
}

// void chess_report(int9s2)
void_chess_report_int9s2 : chess_report {
    fnm : "chess_report" 'void chess_report(int9s2)'; 
    arg : ( int9s2:i );
}

// void chess_assert(int10ns16)
void_chess_assert_int10ns16 : chess_assert {
    fnm : "chess_assert" 'void chess_assert(int10ns16)'; 
    arg : ( int10ns16:i );
}

// void chess_report(int10ns16)
void_chess_report_int10ns16 : chess_report {
    fnm : "chess_report" 'void chess_report(int10ns16)'; 
    arg : ( int10ns16:i );
}

// void chess_assert(int10ps16)
void_chess_assert_int10ps16 : chess_assert {
    fnm : "chess_assert" 'void chess_assert(int10ps16)'; 
    arg : ( int10ps16:i );
}

// void chess_report(int10ps16)
void_chess_report_int10ps16 : chess_report {
    fnm : "chess_report" 'void chess_report(int10ps16)'; 
    arg : ( int10ps16:i );
}

// void chess_assert(int12)
void_chess_assert_int12 : chess_assert {
    fnm : "chess_assert" 'void chess_assert(int12)'; 
    arg : ( int12:i );
}

// void chess_report(int12)
void_chess_report_int12 : chess_report {
    fnm : "chess_report" 'void chess_report(int12)'; 
    arg : ( int12:i );
}

// void chess_assert(int12s2)
void_chess_assert_int12s2 : chess_assert {
    fnm : "chess_assert" 'void chess_assert(int12s2)'; 
    arg : ( int12s2:i );
}

// void chess_report(int12s2)
void_chess_report_int12s2 : chess_report {
    fnm : "chess_report" 'void chess_report(int12s2)'; 
    arg : ( int12s2:i );
}

// void chess_assert(int13s2)
void_chess_assert_int13s2 : chess_assert {
    fnm : "chess_assert" 'void chess_assert(int13s2)'; 
    arg : ( int13s2:i );
}

// void chess_report(int13s2)
void_chess_report_int13s2 : chess_report {
    fnm : "chess_report" 'void chess_report(int13s2)'; 
    arg : ( int13s2:i );
}

// void chess_assert(int16)
void_chess_assert_int16 : chess_assert {
    fnm : "chess_assert" 'void chess_assert(int16)'; 
    arg : ( int16:i );
}

// void chess_report(int16)
void_chess_report_int16 : chess_report {
    fnm : "chess_report" 'void chess_report(int16)'; 
    arg : ( int16:i );
}

// void chess_assert(int20)
void_chess_assert_int20 : chess_assert {
    fnm : "chess_assert" 'void chess_assert(int20)'; 
    arg : ( int20:i );
}

// void chess_report(int20)
void_chess_report_int20 : chess_report {
    fnm : "chess_report" 'void chess_report(int20)'; 
    arg : ( int20:i );
}

// void chess_assert(int20p)
void_chess_assert_int20p : chess_assert {
    fnm : "chess_assert" 'void chess_assert(int20p)'; 
    arg : ( int20p:i );
}

// void chess_report(int20p)
void_chess_report_int20p : chess_report {
    fnm : "chess_report" 'void chess_report(int20p)'; 
    arg : ( int20p:i );
}

// void chess_assert(int21s2)
void_chess_assert_int21s2 : chess_assert {
    fnm : "chess_assert" 'void chess_assert(int21s2)'; 
    arg : ( int21s2:i );
}

// void chess_report(int21s2)
void_chess_report_int21s2 : chess_report {
    fnm : "chess_report" 'void chess_report(int21s2)'; 
    arg : ( int21s2:i );
}

// void chess_assert(int26)
void_chess_assert_int26 : chess_assert {
    fnm : "chess_assert" 'void chess_assert(int26)'; 
    arg : ( int26:i );
}

// void chess_report(int26)
void_chess_report_int26 : chess_report {
    fnm : "chess_report" 'void chess_report(int26)'; 
    arg : ( int26:i );
}

// void chess_assert(v4uint1)
void_chess_assert_v4uint1 : chess_assert {
    fnm : "chess_assert" 'void chess_assert(v4uint1)'; 
    arg : ( v4uint1:i );
}

// void chess_report(v4uint1)
void_chess_report_v4uint1 : chess_report {
    fnm : "chess_report" 'void chess_report(v4uint1)'; 
    arg : ( v4uint1:i );
}

// void chess_assert(v4uint8)
void_chess_assert_v4uint8 : chess_assert {
    fnm : "chess_assert" 'void chess_assert(v4uint8)'; 
    arg : ( v4uint8:i );
}

// void chess_report(v4uint8)
void_chess_report_v4uint8 : chess_report {
    fnm : "chess_report" 'void chess_report(v4uint8)'; 
    arg : ( v4uint8:i );
}

// void chess_assert(v2short)
void_chess_assert_v2short : chess_assert {
    fnm : "chess_assert" 'void chess_assert(v2short)'; 
    arg : ( w32:i );
}

// void chess_report(v2short)
void_chess_report_v2short : chess_report {
    fnm : "chess_report" 'void chess_report(v2short)'; 
    arg : ( w32:i );
}

// unsigned long long chess_cycle_count()
__ulonglong_chess_cycle_count : chess_cycle_count {
    fnm : "chess_cycle_count" 'unsigned long long chess_cycle_count()'; 
    arg : ( w32:r w32:r );
    loc : ( R[10] R[11] );
}

// void chess_storage(PMb) *chess_return_address()
__PPMbvoid_chess_return_address : event_opn {
    fnm : "chess_return_address" 'void chess_storage(PMb) *chess_return_address()'; 
    arg : ( __Pvoid:r );
}

// void chess_memory_fence()
void_chess_memory_fence : event_opn {
    fnm : "chess_memory_fence" 'void chess_memory_fence()'; 
}

// void chess_exit(int)
void_chess_exit___sint : chess_exit {
    fnm : "chess_exit" 'void chess_exit(int)'; 
    arg : ( w32:i );
}

// void chess_hosted_io(void *)
void_chess_hosted_io___Pvoid : chess_hosted_io {
    fnm : "chess_hosted_io" 'void chess_hosted_io(void *)'; 
    arg : ( w32:i );
}

// void __pat1_stack_load(w08 &)
void___pat1_stack_load_w08 : stack_load {
    fnm : "__pat1_stack_load" 'void __pat1_stack_load(w08 &)'; 
    arg : ( w08:o );
}

// void __pat2_stack_store(const w08 &)
void___pat2_stack_store_w08 : stack_store {
    fnm : "__pat2_stack_store" 'void __pat2_stack_store(const w08 &)'; 
    arg : ( w08:i );
}

// void __pat3_stack_load(w16 &)
void___pat3_stack_load_w16 : stack_load {
    fnm : "__pat3_stack_load" 'void __pat3_stack_load(w16 &)'; 
    arg : ( w16:o );
}

// void __pat4_stack_store(const w16 &)
void___pat4_stack_store_w16 : stack_store {
    fnm : "__pat4_stack_store" 'void __pat4_stack_store(const w16 &)'; 
    arg : ( w16:i );
}

// void __pat5_stack_load(w32 &)
void___pat5_stack_load_w32 : stack_load {
    fnm : "__pat5_stack_load" 'void __pat5_stack_load(w32 &)'; 
    arg : ( w32:o );
}

// void __pat6_stack_store(const w32 &)
void___pat6_stack_store_w32 : stack_store {
    fnm : "__pat6_stack_store" 'void __pat6_stack_store(const w32 &)'; 
    arg : ( w32:i );
}

excl_conv(__schar) = { w32_extend_zero_w08 w32_extend_zero_w16 } 

excl_conv(__uchar) = { w32_extend_sign_w08 w32_extend_sign_w16 } 

excl_conv(__sshort) = { w32_extend_zero_w16 } 

excl_conv(__ushort) = { w32_extend_sign_w16 } 

