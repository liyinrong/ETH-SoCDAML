
// File generated by animal version O-2018.09#f5599cac26#190121, Tue May 28 10:41:29 2024
// Copyright 2014-2018 Synopsys, Inc. All rights reserved.
// animal -B -Iisg +wisg -Iruntime/include -D__tct_patch__=300 -h -C -D__chess__ -D__programmers_view__ tmicro

toolrelease _18R3;
copy0 : copy { }
copy1 : copy { }

name tmicro(16,48)

//Properties
prop ocd_swbreak = ( ocd_swbreak_req );
prop stage_names = ( IF ID E1 );
prop default_cycles = ( words );
prop program_counter = ( PC );
prop ocd_execute_instruction = ( ocd_exe );
prop ocd_disable_interrupt = ( ocd_dis_int );
prop decode_stage = ( 1 );
prop dead_end = ( muly_acc dma_data dma_cmd );
prop inports = ( ireq_pcu_inp dma_ready );
prop ocd_address_register = ( ocd_addr );
prop control_signals = ( compact );
prop ocd_instruction_register = ( ocd_instr );
prop program_memory = ( PM );
prop ocd_data_register = ( ocd_data );
prop unconnected = ( LF LS LE LC ocd_instr_r );
prop strict_WAW_hazard_checking = ( off );
prop ocd_request = ( ocd_req );
prop endianness = ( little );
prop outports = ( iack_pcu_out halted_out debug_out );
prop ocd_increment_address_guard = ( ocd_incr_addr );

//Memories are printed after the transitories

//Registers
reg R[0..7,1]<word,uint3> syntax { R0 R1 R2 R3 R4 R5 R6 R7 } ;
reg PL<word> alias R[6] align 1;
reg PH<word> alias R[7] align 1;
reg LR<word>;
reg SP<word>;
reg PC<addr>;
reg LF<uint2>;
reg LS[0..2,1]<addr,uint2>;
reg LE[0..2,1]<addr,uint2>;
reg LC[0..2,1]<addr,uint2>;
reg CND<bool>;
reg CB<uint1>;
reg IE<uint1>;
reg SRa<uint2>;
reg SRb<uint3>;
reg IM<ubyte>;
reg SR<word> {
    CND;
    CB;
    IE;
    SRa;
    SRb;
    IM;
};
reg ILR<word>;
reg ISR<word>;
reg ocd_addr<addr>;
reg ocd_data<word>;
reg ocd_instr<iword>;
reg ireq_pcu_inp<ubyte>;
reg iack_pcu_out<ubyte>;
reg halted_out<uint1>;
reg debug_out<uint1>;
reg dma_ready<uint1>;

//Transitories
trn pm_ld<bool>;
trn pm_read<iword>;
trn pm_addr<addr>;
trn pm_st<bool>;
trn pm_write<iword>;
trn dm_ld<bool>;
trn dm_read<word>;
trn dm_addr<addr>;
trn dm_st<bool>;
trn dm_write<word>;
trn rrid<word>;
trn rre1<word>;
trn rse1<word>;
trn rtid<word>;
trn rte1<word>;
trn pcr<addr>;
trn pcw<addr>;
trn lfr<uint2>;
trn lfra<uint2>;
trn lfw<uint2>;
trn lsr<addr>;
trn lsw<addr>;
trn ler<addr>;
trn lew<addr>;
trn lcr<addr>;
trn lcw<addr>;
trn cndr<bool>;
trn cndw<bool>;
trn cbr<uint1>;
trn cbw<uint1>;
trn iew<uint1>;
trn imw<ubyte>;
trn ocd_addr_r<addr>;
trn ocd_addr_w<addr>;
trn ocd_instr_r<iword>;
trn ocd_incr_addr<bool>;
trn ocd_req<uint1>;
trn ocd_exe<uint1>;
trn ocd_dis_int<uint1>;
trn alur<word>;
trn alus<word>;
trn alut<word>;
trn shr<word>;
trn shf<word>;
trn sht<word>;
trn mulr<word>;
trn muls<word>;
trn mulu<word>;
trn mulv<word>;
trn mulx<word>;
trn muly<word>;
trn mulx_acc<word>;
trn muly_acc<word>;
trn wbus<word>;
trn ag1p<word>;
trn ag1m<word>;
trn ag1q<word>;
trn trgt<addr>;
trn offs<sbyte>;
trn tcc<bool>;
trn diid<bool>;
trn die1<bool>;
trn jcr<bool>;
trn jc<bool>;
trn ocd_swbreak_req<bool>;
trn lnk_if<addr>;
trn lnk_pf<addr>;
trn dma_data<word>;
trn dma_cmd<uint2>;
trn cbus<uint2>;
trn __pm_addr_pipe_r<addr>;
trn __pm_addr_pipe_w<addr>;
trn __dm_addr_pipe_r<addr>;
trn __dm_addr_pipe_w<addr>;
trn __ireq_pcu_inp_r<ubyte>;
trn __ireq_pcu_inp_w<ubyte>;
trn __dma_ready_r<uint1>;
trn __dma_ready_w<uint1>;
trn __iack_pcu_out_r<ubyte>;
trn __iack_pcu_out_w<ubyte>;
trn __halted_out_r<uint1>;
trn __halted_out_w<uint1>;
trn __debug_out_r<uint1>;
trn __debug_out_w<uint1>;
trn __CTuint3_cstP10_E1<uint3> exp = r pos = ( 10: u 2..0 u );
trn __R_rre1_rad<uint3>;
trn __CTuint3_cstP13_E1<uint3> exp = r pos = ( 13: u 2..0 u );
trn __R_rse1_rad<uint3>;
trn __rsrc_CB_wr_cbw_E1<uint1>;
trn __CTuint3_cstP7_E1<uint3> exp = r pos = ( 7: u 2..0 u );
trn __R_rte1_wad<uint3>;
trn __rsrc_R_wr_rte1___R_rte1_wad_E1<word>;
trn __rsrc_PL_wr_mulx_E1<word>;
trn __rsrc_PH_wr_muly_E1<word>;
trn __rsrc_CND_wr_cndw_E1<bool>;
trn __CTuint3_cstP9_E1<uint3> exp = r pos = ( 9: u 2..0 u );
trn __rsrc_SP_wr_wbus_E1<word>;
trn __rsrc_LR_wr_wbus_E1<word>;
trn __rsrc_SR_wr_wbus_E1<word>;
trn __rsrc_ILR_wr_wbus_E1<word>;
trn __rsrc_ISR_wr_wbus_E1<word>;
trn __CTwbus_word_cstP16_E1<word> exp = imm pos = ( 16: u 15..0 u );
trn __CTwbus_sbyte_cstP4_E1<sbyte> exp = imm pos = ( 4: u 7..0 u );
trn __rsrc_IM_wr_imw_E1<ubyte>;
trn __CTimw_ubyte_cstP8_E1<ubyte> exp = imm pos = ( 8: u 7..0 u );
trn __rsrc_IE_wr_iew_E1<uint1>;
trn __CTiew_uint1_cstV1_E1<uint1> cst = 1f;
trn __CTdiid_bool_cstV1_ID<bool> cst = 1f;
trn __CTdie1_bool_cstV1_E1<bool> cst = 1f;
trn __CTiew_uint1_cstV0_E1<uint1> cst = 0f;
trn __rsrc_ocd_data_wr_wbus_E1<word>;
trn __CTag1m_nint9_cstP4_7_0_ID<nint9> exp = offs pos = ( 4: o 7..0 u );
trn __rsrc_SP_wr_dm_read_E1<word>;
trn __rsrc_LR_wr_dm_read_E1<word>;
trn __rsrc_SR_wr_dm_read_E1<word>;
trn __rsrc_ILR_wr_dm_read_E1<word>;
trn __rsrc_ISR_wr_dm_read_E1<word>;
trn __CTuint3_cstP7_ID<uint3> exp = r pos = ( 7: u 2..0 u );
trn __R_rrid_rad<uint3>;
trn __R_rtid_wad<uint3>;
trn __rsrc_R_wr_rtid___R_rtid_wad_ID<word>;
trn __CTag1m_word_cstV1_ID<word> cst = 1f;
trn __CTag1m_word_cstVm1_ID<word> cst = -1f;
trn __pm_read_w_word<word>;
trn __rsrc_SP_wr___pm_read_w_word_E1<word>;
trn __rsrc_LR_wr___pm_read_w_word_E1<word>;
trn __rsrc_SR_wr___pm_read_w_word_E1<word>;
trn __rsrc_ILR_wr___pm_read_w_word_E1<word>;
trn __rsrc_ISR_wr___pm_read_w_word_E1<word>;
trn __pm_write_r_word<word>;
trn __rsrc_SP_wr_ag1q_ID<word>;
trn __CTag1m_word_cstP16_ID<word> exp = imm pos = ( 16: u 15..0 u );
trn __CTag1m_sbyte_cstP4_ID<sbyte> exp = imm pos = ( 4: u 7..0 u );
trn __CToffs_sbyte_cstP8_ID<sbyte> exp = of pos = ( 8: u 7..0 u );
trn __CToffs_sbyte_cstP8_E1<sbyte> exp = of pos = ( 8: u 7..0 u );
trn __CTjcr_bool_cstV1_E1<bool> cst = 1f;
trn __CTtrgt_addr_cstP16_ID<addr> exp = tg pos = ( 16: u 15..0 u );
trn __CTtrgt_addr_cstP16_E1<addr> exp = tg pos = ( 16: u 15..0 u );
trn __CTjc_bool_cstV1_E1<bool> cst = 1f;
trn __lnk_pf_w_word<word>;
trn __rsrc_LR_wr___lnk_pf_w_word_ID<word>;
trn __rsrc_LR_wr___lnk_pf_w_word_E1<word>;
trn __trgt_r_word<word>;
trn __CTlew_addr_cstP16_E1<addr> exp = last pos = ( 16: u 15..0 u );
trn __CTlcw_addr_cstP32_E1<addr> exp = count pos = ( 32: u 15..0 u );
trn __rsrc_LF_wr_lfw_E1<uint2>;
trn __lnk_if_w_word<word>;
trn __rsrc_ILR_wr___lnk_if_w_word_ID<word>;
trn __CTtrgt_uint4_cstP12_ID<uint4> exp = tg pos = ( 12: u 3..0 u );
trn __CTocd_swbreak_req_bool_cstV1_ID<bool> cst = 1f;
trn __CTcbus_uint2_cstP10_E1<uint2> exp = op pos = ( 10: u 1..0 u );
trn __CTcbus_uint2_cstV0_E1<uint2> cst = 0f;
trn __t<word>;
trn __t1<word>;
trn __t2<addr>;
trn __t3<addr>;
trn __t4<word>;
trn __t5<addr>;

//Memories
mem PM[0..65535,1]<iword,addr> access {
    pm_ld: pm_read `1` = PM[pm_addr];
    pm_st: PM[pm_addr] = pm_write;
};
mem DM[0..65535,1]<word,addr> access {
    dm_ld: dm_read `1` = DM[dm_addr];
    dm_st: DM[dm_addr] = dm_write;
};

//Functional units
fu dlflg
fu alu
fu sh
fu mul
fu ag1

//HW init values
hw_init LR = others => 0;
hw_init PC = others => 0;
hw_init LF = others => 3;
hw_init CND = others => 0;
hw_init IE = others => 0;
hw_init cndr = others => 0;
hw_init ocd_incr_addr = others => 0;
hw_init ocd_req = others => 0;
hw_init ocd_exe = others => 0;
hw_init ocd_dis_int = others => 0;
hw_init trgt = others => 0;
hw_init offs = others => 0;
hw_init tcc = others => 0;
hw_init diid = others => 0;
hw_init die1 = others => 0;
hw_init jcr = others => 0;
hw_init jc = others => 0;
hw_init ocd_swbreak_req = others => 0;
hw_init lnk_pf = others => 0;

//SW init values

//Operations
uint3_cstP10_E1 : const {
    fst : 2;
    ost : ( 2 );
    rid : 1;
    isg : t;
    out : ( __CTuint3_cstP10_E1 );
    ins : 1;
}

alur_copy0_rre1_E1 : copy0 {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 2;
    isg : t;
    inp : ( rre1 );
    out : ( alur );
    rsc : (2) alur ;
    ins : 2;
}

__R_rre1_rad_copy0___CTuint3_cstP10_E1 : copy0 {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 3;
    isg : t;
    inp : ( __CTuint3_cstP10_E1 );
    out : ( __R_rre1_rad );
    rsc : (2) __R_rre1_rad ;
    ins : 1;
}

rre1_rd_R___R_rre1_rad_E1 : read_file {
    fst : 2;
    ist : ( 2 2 );
    ost : ( 2 );
    rid : 4;
    isg : t;
    inp : ( R __R_rre1_rad );
    out : ( rre1 );
    rsc : (2) rre1 ;
    ins : 1;
}

uint3_cstP13_E1 : const {
    fst : 2;
    ost : ( 2 );
    rid : 5;
    isg : t;
    out : ( __CTuint3_cstP13_E1 );
    ins : 3;
}

alus_copy0_rse1_E1 : copy0 {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 6;
    isg : t;
    inp : ( rse1 );
    out : ( alus );
    rsc : (2) alus ;
    ins : 4;
}

__R_rse1_rad_copy0___CTuint3_cstP13_E1 : copy0 {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 7;
    isg : t;
    inp : ( __CTuint3_cstP13_E1 );
    out : ( __R_rse1_rad );
    rsc : (2) __R_rse1_rad ;
    ins : 5;
}

rse1_rd_R___R_rse1_rad_E1 : read_file {
    fst : 2;
    ist : ( 2 2 );
    ost : ( 2 );
    rid : 8;
    isg : t;
    inp : ( R __R_rse1_rad );
    out : ( rse1 );
    rsc : (2) rse1 ;
    ins : 5;
}

CB_wr_cbw_E1 : write_reg {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 9;
    isg : t;
    inp : ( cbw );
    out : ( CB );
    rsc : (2) __rsrc_CB_wr_cbw_E1 ;
    ins : 6;
}

alut_add_alur_alus_cbw_alu_E1 : word_add_word_word_uint1 {
    fst : 2;
    ist : ( 2 2 );
    ost : ( 2 2 );
    rid : 10;
    isg : t;
    inp : ( alur alus );
    out : ( alut cbw );
    rsc : (2) alut cbw ;
    ins : 7;
    opr : alu;
    com : alut_add_alus_alur_cbw_alu_E1;
}

cbr_rd_CB_E1 : read_reg {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 11;
    isg : t;
    inp : ( CB );
    out : ( cbr );
    rsc : (2) cbr ;
    ins : 8;
}

alut_addc_alur_alus_cbr_cbw_alu_E1 : word_addc_word_word_uint1_uint1 {
    fst : 2;
    ist : ( 2 2 2 );
    ost : ( 2 2 );
    rid : 12;
    isg : t;
    inp : ( alur alus cbr );
    out : ( alut cbw );
    rsc : (2) alut cbw ;
    ins : 9;
    opr : alu;
    com : alut_addc_alus_alur_cbr_cbw_alu_E1;
}

alut_sub_alur_alus_cbw_alu_E1 : word_sub_word_word_uint1 {
    fst : 2;
    ist : ( 2 2 );
    ost : ( 2 2 );
    rid : 13;
    isg : t;
    inp : ( alur alus );
    out : ( alut cbw );
    rsc : (2) alut cbw ;
    ins : 10;
    opr : alu;
}

alut_subb_alur_alus_cbr_cbw_alu_E1 : word_subb_word_word_uint1_uint1 {
    fst : 2;
    ist : ( 2 2 2 );
    ost : ( 2 2 );
    rid : 14;
    isg : t;
    inp : ( alur alus cbr );
    out : ( alut cbw );
    rsc : (2) alut cbw ;
    ins : 11;
    opr : alu;
}

alut_andw_alur_alus_alu_E1 : word_andw_word_word {
    fst : 2;
    ist : ( 2 2 );
    ost : ( 2 );
    rid : 15;
    isg : t;
    inp : ( alur alus );
    out : ( alut );
    rsc : (2) alut ;
    ins : 12;
    opr : alu;
    com : alut_andw_alus_alur_alu_E1;
}

alut_orw_alur_alus_alu_E1 : word_orw_word_word {
    fst : 2;
    ist : ( 2 2 );
    ost : ( 2 );
    rid : 16;
    isg : t;
    inp : ( alur alus );
    out : ( alut );
    rsc : (2) alut ;
    ins : 13;
    opr : alu;
    com : alut_orw_alus_alur_alu_E1;
}

alut_xorw_alur_alus_alu_E1 : word_xorw_word_word {
    fst : 2;
    ist : ( 2 2 );
    ost : ( 2 );
    rid : 17;
    isg : t;
    inp : ( alur alus );
    out : ( alut );
    rsc : (2) alut ;
    ins : 14;
    opr : alu;
    com : alut_xorw_alus_alur_alu_E1;
}

uint3_cstP7_E1 : const {
    fst : 2;
    ost : ( 2 );
    rid : 18;
    isg : t;
    out : ( __CTuint3_cstP7_E1 );
    ins : 15;
}

__R_rte1_wad_copy0___CTuint3_cstP7_E1 : copy0 {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 19;
    isg : t;
    inp : ( __CTuint3_cstP7_E1 );
    out : ( __R_rte1_wad );
    rsc : (2) __R_rte1_wad ;
    ins : 15;
}

R_wr_rte1___R_rte1_wad_E1 : write_file {
    fst : 2;
    ist : ( 2 2 );
    ost : ( 2 );
    rid : 20;
    isg : t;
    inp : ( rte1 __R_rte1_wad );
    out : ( R );
    rsc : (2) __rsrc_R_wr_rte1___R_rte1_wad_E1 ;
    ins : 16;
}

rte1_copy0_alut_E1 : copy0 {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 21;
    isg : t;
    inp : ( alut );
    out : ( rte1 );
    rsc : (2) rte1 ;
    ins : 17;
}

shr_copy0_rre1_E1 : copy0 {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 22;
    isg : t;
    inp : ( rre1 );
    out : ( shr );
    rsc : (2) shr ;
    ins : 18;
}

shf_copy0_rse1_E1 : copy0 {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 23;
    isg : t;
    inp : ( rse1 );
    out : ( shf );
    rsc : (2) shf ;
    ins : 18;
}

sht_asr_shr_shf_sh_E1 : word_asr_word_word {
    fst : 2;
    ist : ( 2 2 );
    ost : ( 2 );
    rid : 24;
    isg : t;
    inp : ( shr shf );
    out : ( sht );
    rsc : (2) sht ;
    ins : 19;
    opr : sh;
}

sht_lsr_shr_shf_sh_E1 : word_lsr_word_word {
    fst : 2;
    ist : ( 2 2 );
    ost : ( 2 );
    rid : 25;
    isg : t;
    inp : ( shr shf );
    out : ( sht );
    rsc : (2) sht ;
    ins : 20;
    opr : sh;
}

sht_lsl_shr_shf_sh_E1 : word_lsl_word_word {
    fst : 2;
    ist : ( 2 2 );
    ost : ( 2 );
    rid : 26;
    isg : t;
    inp : ( shr shf );
    out : ( sht );
    rsc : (2) sht ;
    ins : 21;
    opr : sh;
}

rte1_copy0_sht_E1 : copy0 {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 27;
    isg : t;
    inp : ( sht );
    out : ( rte1 );
    rsc : (2) rte1 ;
    ins : 18;
}

mulr_copy0_rre1_E1 : copy0 {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 28;
    isg : t;
    inp : ( rre1 );
    out : ( mulr );
    rsc : (2) mulr ;
    ins : 22;
}

muls_copy0_rse1_E1 : copy0 {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 29;
    isg : t;
    inp : ( rse1 );
    out : ( muls );
    rsc : (2) muls ;
    ins : 22;
}

PL_wr_mulx_E1 : write_reg {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 30;
    isg : t;
    inp : ( mulx );
    out : ( PL );
    rsc : (2) __rsrc_PL_wr_mulx_E1 ;
    ins : 23;
}

PH_wr_muly_E1 : write_reg {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 31;
    isg : t;
    inp : ( muly );
    out : ( PH );
    rsc : (2) __rsrc_PH_wr_muly_E1 ;
    ins : 24;
}

vd_muluu_mulr_muls_mulx_muly_mul_E1 : void_muluu_word_word_word_word {
    fst : 2;
    ist : ( 2 2 );
    ost : ( 2 2 );
    rid : 33;
    isg : t;
    inp : ( mulr muls );
    out : ( mulx muly );
    rsc : (2) mulx muly ;
    ins : 25;
    opr : mul;
}

mulv_rd_PH_E1 : read_reg {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 35;
    isg : t;
    inp : ( PH );
    out : ( mulv );
    rsc : (2) mulv ;
    ins : 26;
}

muly_add_mulx_acc_mulv_mul_E1 : word_add_word_word {
    fst : 2;
    ist : ( 2 2 );
    ost : ( 2 );
    rid : 36;
    isg : t;
    inp : ( mulx_acc mulv );
    out : ( muly );
    rsc : (2) muly ;
    ins : 27;
    opr : mul;
    com : muly_add_mulv_mulx_acc_mul_E1;
}

mulu_rd_PL_E1 : read_reg {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 37;
    isg : t;
    inp : ( PL );
    out : ( mulu );
    rsc : (2) mulu ;
    ins : 28;
}

vd_divstep_alur_mulu_mulv_mulx_muly_alu_E1 : void_divstep_word_word_word_word_word {
    fst : 2;
    ist : ( 2 2 2 );
    ost : ( 2 2 );
    rid : 38;
    isg : t;
    inp : ( alur mulu mulv );
    out : ( mulx muly );
    rsc : (2) mulx muly ;
    ins : 28;
    opr : alu;
}

CND_wr_cndw_E1 : write_reg {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 39;
    isg : t;
    inp : ( cndw );
    out : ( CND );
    rsc : (2) __rsrc_CND_wr_cndw_E1 ;
    ins : 29;
}

cndw_lts_alur_alus_alu_E1 : bool_lts_word_word {
    fst : 2;
    ist : ( 2 2 );
    ost : ( 2 );
    rid : 40;
    isg : t;
    inp : ( alur alus );
    out : ( cndw );
    rsc : (2) cndw ;
    ins : 30;
    opr : alu;
}

cndw_ltu_alur_alus_alu_E1 : bool_ltu_word_word {
    fst : 2;
    ist : ( 2 2 );
    ost : ( 2 );
    rid : 41;
    isg : t;
    inp : ( alur alus );
    out : ( cndw );
    rsc : (2) cndw ;
    ins : 31;
    opr : alu;
}

cndw_les_alur_alus_alu_E1 : bool_les_word_word {
    fst : 2;
    ist : ( 2 2 );
    ost : ( 2 );
    rid : 42;
    isg : t;
    inp : ( alur alus );
    out : ( cndw );
    rsc : (2) cndw ;
    ins : 32;
    opr : alu;
}

cndw_leu_alur_alus_alu_E1 : bool_leu_word_word {
    fst : 2;
    ist : ( 2 2 );
    ost : ( 2 );
    rid : 43;
    isg : t;
    inp : ( alur alus );
    out : ( cndw );
    rsc : (2) cndw ;
    ins : 33;
    opr : alu;
}

cndw_gts_alur_alus_alu_E1 : bool_gts_word_word {
    fst : 2;
    ist : ( 2 2 );
    ost : ( 2 );
    rid : 44;
    isg : t;
    inp : ( alur alus );
    out : ( cndw );
    rsc : (2) cndw ;
    ins : 34;
    opr : alu;
}

cndw_gtu_alur_alus_alu_E1 : bool_gtu_word_word {
    fst : 2;
    ist : ( 2 2 );
    ost : ( 2 );
    rid : 45;
    isg : t;
    inp : ( alur alus );
    out : ( cndw );
    rsc : (2) cndw ;
    ins : 35;
    opr : alu;
}

cndw_ges_alur_alus_alu_E1 : bool_ges_word_word {
    fst : 2;
    ist : ( 2 2 );
    ost : ( 2 );
    rid : 46;
    isg : t;
    inp : ( alur alus );
    out : ( cndw );
    rsc : (2) cndw ;
    ins : 36;
    opr : alu;
}

cndw_geu_alur_alus_alu_E1 : bool_geu_word_word {
    fst : 2;
    ist : ( 2 2 );
    ost : ( 2 );
    rid : 47;
    isg : t;
    inp : ( alur alus );
    out : ( cndw );
    rsc : (2) cndw ;
    ins : 37;
    opr : alu;
}

cndw_eq_alur_alus_alu_E1 : bool_eq_word_word {
    fst : 2;
    ist : ( 2 2 );
    ost : ( 2 );
    rid : 48;
    isg : t;
    inp : ( alur alus );
    out : ( cndw );
    rsc : (2) cndw ;
    ins : 38;
    opr : alu;
}

cndw_ne_alur_alus_alu_E1 : bool_ne_word_word {
    fst : 2;
    ist : ( 2 2 );
    ost : ( 2 );
    rid : 49;
    isg : t;
    inp : ( alur alus );
    out : ( cndw );
    rsc : (2) cndw ;
    ins : 39;
    opr : alu;
}

alut_complement_alus_alu_E1 : word_complement_word {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 50;
    isg : t;
    inp : ( alus );
    out : ( alut );
    rsc : (2) alut ;
    ins : 40;
    opr : alu;
}

alut_extend_sign_alus_alu_E1 : word_extend_sign_word {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 51;
    isg : t;
    inp : ( alus );
    out : ( alut );
    rsc : (2) alut ;
    ins : 41;
    opr : alu;
}

alut_minw_alur_alus_alu_E1 : word_minw_word_word {
    fst : 2;
    ist : ( 2 2 );
    ost : ( 2 );
    rid : 52;
    isg : t;
    inp : ( alur alus );
    out : ( alut );
    rsc : (2) alut ;
    ins : 42;
    opr : alu;
}

alut_maxw_alur_alus_alu_E1 : word_maxw_word_word {
    fst : 2;
    ist : ( 2 2 );
    ost : ( 2 );
    rid : 53;
    isg : t;
    inp : ( alur alus );
    out : ( alut );
    rsc : (2) alut ;
    ins : 43;
    opr : alu;
}

cndr_rd_CND_E1 : read_reg {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 54;
    isg : t;
    inp : ( CND );
    out : ( cndr );
    rsc : (2) cndr ;
    ins : 44;
}

alut_select_cndr_alur_alus_alu_E1 : word_select_bool_word_word {
    fst : 2;
    ist : ( 2 2 2 );
    ost : ( 2 );
    rid : 55;
    isg : t;
    inp : ( cndr alur alus );
    out : ( alut );
    rsc : (2) alut ;
    ins : 45;
    opr : alu;
}

uint3_cstP9_E1 : const {
    fst : 2;
    ost : ( 2 );
    rid : 56;
    isg : t;
    out : ( __CTuint3_cstP9_E1 );
    ins : 46;
}

__R_rte1_wad_copy0___CTuint3_cstP9_E1 : copy0 {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 57;
    isg : t;
    inp : ( __CTuint3_cstP9_E1 );
    out : ( __R_rte1_wad );
    rsc : (2) __R_rte1_wad ;
    ins : 46;
}

rte1_copy0_wbus_E1 : copy0 {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 58;
    isg : t;
    inp : ( wbus );
    out : ( rte1 );
    rsc : (2) rte1 ;
    ins : 47;
}

SP_wr_wbus_E1 : write_reg {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 59;
    isg : t;
    inp : ( wbus );
    out : ( SP );
    rsc : (2) __rsrc_SP_wr_wbus_E1 ;
    ins : 48;
}

LR_wr_wbus_E1 : write_reg {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 60;
    isg : t;
    inp : ( wbus );
    out : ( LR );
    rsc : (2) __rsrc_LR_wr_wbus_E1 ;
    ins : 49;
}

SR_wr_wbus_E1 : write_reg {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 61;
    isg : t;
    inp : ( wbus );
    out : ( SR );
    rsc : (2) __rsrc_SR_wr_wbus_E1 ;
    ins : 50;
}

ILR_wr_wbus_E1 : write_reg {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 62;
    isg : t;
    inp : ( wbus );
    out : ( ILR );
    rsc : (2) __rsrc_ILR_wr_wbus_E1 ;
    ins : 51;
}

ISR_wr_wbus_E1 : write_reg {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 63;
    isg : t;
    inp : ( wbus );
    out : ( ISR );
    rsc : (2) __rsrc_ISR_wr_wbus_E1 ;
    ins : 52;
}

wbus_copy0_rse1_E1 : copy0 {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 64;
    isg : t;
    inp : ( rse1 );
    out : ( wbus );
    rsc : (2) wbus ;
    ins : 53;
}

wbus_rd_SP_E1 : read_reg {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 65;
    isg : t;
    inp : ( SP );
    out : ( wbus );
    rsc : (2) wbus ;
    ins : 54;
}

wbus_rd_LR_E1 : read_reg {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 66;
    isg : t;
    inp : ( LR );
    out : ( wbus );
    rsc : (2) wbus ;
    ins : 55;
}

wbus_rd_SR_E1 : read_reg {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 67;
    isg : t;
    inp : ( SR );
    out : ( wbus );
    rsc : (2) wbus ;
    ins : 56;
}

wbus_rd_ILR_E1 : read_reg {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 68;
    isg : t;
    inp : ( ILR );
    out : ( wbus );
    rsc : (2) wbus ;
    ins : 57;
}

wbus_rd_ISR_E1 : read_reg {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 69;
    isg : t;
    inp : ( ISR );
    out : ( wbus );
    rsc : (2) wbus ;
    ins : 58;
}

__R_rte1_wad_copy0___CTuint3_cstP13_E1 : copy0 {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 70;
    isg : t;
    inp : ( __CTuint3_cstP13_E1 );
    out : ( __R_rte1_wad );
    rsc : (2) __R_rte1_wad ;
    ins : 59;
}

wbus_word_cstP16_E1 : const {
    fst : 2;
    ost : ( 2 );
    rid : 71;
    isg : t;
    out : ( __CTwbus_word_cstP16_E1 );
    ins : 60;
}

wbus_copy0___CTwbus_word_cstP16_E1 : copy0 {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 72;
    isg : t;
    inp : ( __CTwbus_word_cstP16_E1 );
    out : ( wbus );
    rsc : (2) wbus ;
    ins : 60;
}

wbus_sbyte_cstP4_E1 : const {
    fst : 2;
    ost : ( 2 );
    rid : 73;
    isg : t;
    out : ( __CTwbus_sbyte_cstP4_E1 );
    ins : 61;
}

IM_wr_imw_E1 : write_reg {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 75;
    isg : t;
    inp : ( imw );
    out : ( IM );
    rsc : (2) __rsrc_IM_wr_imw_E1 ;
    ins : 62;
}

imw_ubyte_cstP8_E1 : const {
    fst : 2;
    ost : ( 2 );
    rid : 76;
    isg : t;
    out : ( __CTimw_ubyte_cstP8_E1 );
    ins : 62;
}

imw_copy0___CTimw_ubyte_cstP8_E1 : copy0 {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 77;
    isg : t;
    inp : ( __CTimw_ubyte_cstP8_E1 );
    out : ( imw );
    rsc : (2) imw ;
    ins : 62;
}

IE_wr_iew_E1 : write_reg {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 78;
    isg : t;
    inp : ( iew );
    out : ( IE );
    rsc : (2) __rsrc_IE_wr_iew_E1 ;
    ins : 63;
}

iew_uint1_cstV1_E1 : const {
    fst : 2;
    ost : ( 2 );
    rid : 79;
    isg : t;
    out : ( __CTiew_uint1_cstV1_E1 );
    ins : 64;
}

iew_copy0___CTiew_uint1_cstV1_E1 : copy0 {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 80;
    isg : t;
    inp : ( __CTiew_uint1_cstV1_E1 );
    out : ( iew );
    rsc : (2) iew ;
    ins : 64;
}

diid_bool_cstV1_ID : const {
    fst : 1;
    ost : ( 1 );
    rid : 81;
    isg : t;
    out : ( __CTdiid_bool_cstV1_ID );
    ins : 65;
}

diid_copy0___CTdiid_bool_cstV1_ID : copy0 {
    fst : 1;
    ist : ( 1 );
    ost : ( 1 );
    rid : 82;
    isg : t;
    inp : ( __CTdiid_bool_cstV1_ID );
    out : ( diid );
    rsc : (1) diid ;
    ins : 65;
}

die1_bool_cstV1_E1 : const {
    fst : 2;
    ost : ( 2 );
    rid : 83;
    isg : t;
    out : ( __CTdie1_bool_cstV1_E1 );
    ins : 66;
}

die1_copy0___CTdie1_bool_cstV1_E1 : copy0 {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 84;
    isg : t;
    inp : ( __CTdie1_bool_cstV1_E1 );
    out : ( die1 );
    rsc : (2) die1 ;
    ins : 66;
}

iew_uint1_cstV0_E1 : const {
    fst : 2;
    ost : ( 2 );
    rid : 85;
    isg : t;
    out : ( __CTiew_uint1_cstV0_E1 );
    ins : 67;
}

iew_copy0___CTiew_uint1_cstV0_E1 : copy0 {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 86;
    isg : t;
    inp : ( __CTiew_uint1_cstV0_E1 );
    out : ( iew );
    rsc : (2) iew ;
    ins : 67;
}

wbus_rd_ocd_data_E1 : read_reg {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 87;
    isg : t;
    inp : ( ocd_data );
    out : ( wbus );
    rsc : (2) wbus ;
    ins : 68;
}

ocd_data_wr_wbus_E1 : write_reg {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 88;
    isg : t;
    inp : ( wbus );
    out : ( ocd_data );
    rsc : (2) __rsrc_ocd_data_wr_wbus_E1 ;
    ins : 69;
}

ag1p_rd_SP_ID : read_reg {
    fst : 1;
    ist : ( 1 );
    ost : ( 1 );
    rid : 89;
    isg : t;
    inp : ( SP );
    out : ( ag1p );
    rsc : (1) ag1p ;
    ins : 70;
}

ag1m_nint9_cstP4_7_0_ID : const {
    fst : 1;
    ost : ( 1 );
    rid : 90;
    isg : t;
    out : ( __CTag1m_nint9_cstP4_7_0_ID );
    ins : 71;
}

ag1q_add_ag1p_ag1m_ag1_ID : word_add_word_word {
    fst : 1;
    ist : ( 1 1 );
    ost : ( 1 );
    rid : 92;
    isg : t;
    inp : ( ag1p ag1m );
    out : ( ag1q );
    rsc : (1) ag1q ;
    ins : 72;
    opr : ag1;
    com : ag1q_add_ag1m_ag1p_ag1_ID;
}

rte1_copy0_dm_read_E1 : copy0 {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 94;
    isg : t;
    inp : ( dm_read );
    out : ( rte1 );
    rsc : (2) rte1 ;
    ins : 73;
}

SP_wr_dm_read_E1 : write_reg {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 95;
    isg : t;
    inp : ( dm_read );
    out : ( SP );
    rsc : (2) __rsrc_SP_wr_dm_read_E1 ;
    ins : 74;
}

LR_wr_dm_read_E1 : write_reg {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 96;
    isg : t;
    inp : ( dm_read );
    out : ( LR );
    rsc : (2) __rsrc_LR_wr_dm_read_E1 ;
    ins : 75;
}

SR_wr_dm_read_E1 : write_reg {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 97;
    isg : t;
    inp : ( dm_read );
    out : ( SR );
    rsc : (2) __rsrc_SR_wr_dm_read_E1 ;
    ins : 76;
}

ILR_wr_dm_read_E1 : write_reg {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 98;
    isg : t;
    inp : ( dm_read );
    out : ( ILR );
    rsc : (2) __rsrc_ILR_wr_dm_read_E1 ;
    ins : 77;
}

ISR_wr_dm_read_E1 : write_reg {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 99;
    isg : t;
    inp : ( dm_read );
    out : ( ISR );
    rsc : (2) __rsrc_ISR_wr_dm_read_E1 ;
    ins : 78;
}

dm_read_ld_DM_dm_addr_ID : load {
    fst : 1;
    ist : ( 1 1 );
    ost : ( 2 );
    rid : 100;
    isg : t;
    inp : ( DM dm_addr );
    out : ( dm_read );
    rsc : (2) dm_read ;
    ins : 79;
}

_pipe_dm_addr_pipe_ID : copy1 {
    fst : 1;
    ist : ( 1 );
    ost : ( 2 );
    rid : 101;
    isg : t;
    inp : ( __dm_addr_pipe_w );
    out : ( __dm_addr_pipe_r );
    rsc : (2) __dm_addr_pipe_r ;
    ins : 80;
}

dm_addr_copy0_dm_addr_pipe_E1 : copy0 {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 103;
    isg : t;
    inp : ( __dm_addr_pipe_r );
    out : ( dm_addr );
    rsc : (2) dm_addr ;
    ins : 80;
}

DM_st_dm_write_dm_addr_E1 : store {
    fst : 2;
    ist : ( 2 2 );
    ost : ( 2 );
    rid : 104;
    isg : t;
    inp : ( dm_write dm_addr );
    out : ( DM );
    ins : 80;
}

dm_write_copy0_rse1_E1 : copy0 {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 105;
    isg : t;
    inp : ( rse1 );
    out : ( dm_write );
    rsc : (2) dm_write ;
    ins : 81;
}

dm_write_rd_SP_E1 : read_reg {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 106;
    isg : t;
    inp : ( SP );
    out : ( dm_write );
    rsc : (2) dm_write ;
    ins : 82;
}

dm_write_rd_LR_E1 : read_reg {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 107;
    isg : t;
    inp : ( LR );
    out : ( dm_write );
    rsc : (2) dm_write ;
    ins : 83;
}

dm_write_rd_SR_E1 : read_reg {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 108;
    isg : t;
    inp : ( SR );
    out : ( dm_write );
    rsc : (2) dm_write ;
    ins : 84;
}

dm_write_rd_ILR_E1 : read_reg {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 109;
    isg : t;
    inp : ( ILR );
    out : ( dm_write );
    rsc : (2) dm_write ;
    ins : 85;
}

dm_write_rd_ISR_E1 : read_reg {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 110;
    isg : t;
    inp : ( ISR );
    out : ( dm_write );
    rsc : (2) dm_write ;
    ins : 86;
}

uint3_cstP7_ID : const {
    fst : 1;
    ost : ( 1 );
    rid : 111;
    isg : t;
    out : ( __CTuint3_cstP7_ID );
    ins : 87;
}

ag1p_copy0_rrid_ID : copy0 {
    fst : 1;
    ist : ( 1 );
    ost : ( 1 );
    rid : 112;
    isg : t;
    inp : ( rrid );
    out : ( ag1p );
    rsc : (1) ag1p ;
    ins : 87;
}

__R_rrid_rad_copy0___CTuint3_cstP7_ID : copy0 {
    fst : 1;
    ist : ( 1 );
    ost : ( 1 );
    rid : 113;
    isg : t;
    inp : ( __CTuint3_cstP7_ID );
    out : ( __R_rrid_rad );
    rsc : (1) __R_rrid_rad ;
    ins : 87;
}

rrid_rd_R___R_rrid_rad_ID : read_file {
    fst : 1;
    ist : ( 1 1 );
    ost : ( 1 );
    rid : 114;
    isg : t;
    inp : ( R __R_rrid_rad );
    out : ( rrid );
    rsc : (1) rrid ;
    ins : 87;
}

__R_rtid_wad_copy0___CTuint3_cstP7_ID : copy0 {
    fst : 1;
    ist : ( 1 );
    ost : ( 1 );
    rid : 115;
    isg : t;
    inp : ( __CTuint3_cstP7_ID );
    out : ( __R_rtid_wad );
    rsc : (1) __R_rtid_wad ;
    ins : 88;
}

R_wr_rtid___R_rtid_wad_ID : write_file {
    fst : 1;
    ist : ( 1 1 );
    ost : ( 1 );
    rid : 116;
    isg : t;
    inp : ( rtid __R_rtid_wad );
    out : ( R );
    rsc : (1) __rsrc_R_wr_rtid___R_rtid_wad_ID ;
    ins : 88;
}

rtid_copy0_ag1q_ID : copy0 {
    fst : 1;
    ist : ( 1 );
    ost : ( 1 );
    rid : 117;
    isg : t;
    inp : ( ag1q );
    out : ( rtid );
    rsc : (1) rtid ;
    ins : 88;
}

ag1m_word_cstV1_ID : const {
    fst : 1;
    ost : ( 1 );
    rid : 118;
    isg : t;
    out : ( __CTag1m_word_cstV1_ID );
    ins : 89;
}

ag1m_copy0___CTag1m_word_cstV1_ID : copy0 {
    fst : 1;
    ist : ( 1 );
    ost : ( 1 );
    rid : 119;
    isg : t;
    inp : ( __CTag1m_word_cstV1_ID );
    out : ( ag1m );
    rsc : (1) ag1m ;
    ins : 89;
}

ag1m_word_cstVm1_ID : const {
    fst : 1;
    ost : ( 1 );
    rid : 120;
    isg : t;
    out : ( __CTag1m_word_cstVm1_ID );
    ins : 90;
}

ag1m_copy0___CTag1m_word_cstVm1_ID : copy0 {
    fst : 1;
    ist : ( 1 );
    ost : ( 1 );
    rid : 121;
    isg : t;
    inp : ( __CTag1m_word_cstVm1_ID );
    out : ( ag1m );
    rsc : (1) ag1m ;
    ins : 90;
}

SP_wr___pm_read_w_word_E1 : write_reg {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 127;
    isg : t;
    inp : ( __pm_read_w_word );
    out : ( SP );
    rsc : (2) __rsrc_SP_wr___pm_read_w_word_E1 ;
    ins : 91;
}

LR_wr___pm_read_w_word_E1 : write_reg {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 128;
    isg : t;
    inp : ( __pm_read_w_word );
    out : ( LR );
    rsc : (2) __rsrc_LR_wr___pm_read_w_word_E1 ;
    ins : 92;
}

SR_wr___pm_read_w_word_E1 : write_reg {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 129;
    isg : t;
    inp : ( __pm_read_w_word );
    out : ( SR );
    rsc : (2) __rsrc_SR_wr___pm_read_w_word_E1 ;
    ins : 93;
}

ILR_wr___pm_read_w_word_E1 : write_reg {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 130;
    isg : t;
    inp : ( __pm_read_w_word );
    out : ( ILR );
    rsc : (2) __rsrc_ILR_wr___pm_read_w_word_E1 ;
    ins : 94;
}

ISR_wr___pm_read_w_word_E1 : write_reg {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 131;
    isg : t;
    inp : ( __pm_read_w_word );
    out : ( ISR );
    rsc : (2) __rsrc_ISR_wr___pm_read_w_word_E1 ;
    ins : 95;
}

pm_read_ld_PM_pm_addr_ID : load {
    fst : 1;
    ist : ( 1 1 );
    ost : ( 2 );
    rid : 132;
    isg : t;
    inp : ( PM pm_addr );
    out : ( pm_read );
    rsc : (2) pm_read ;
    ins : 96;
}

_pipe_pm_addr_pipe_ID : copy1 {
    fst : 1;
    ist : ( 1 );
    ost : ( 2 );
    rid : 133;
    isg : t;
    inp : ( __pm_addr_pipe_w );
    out : ( __pm_addr_pipe_r );
    rsc : (2) __pm_addr_pipe_r ;
    ins : 97;
}

pm_addr_copy0_pm_addr_pipe_E1 : copy0 {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 135;
    isg : t;
    inp : ( __pm_addr_pipe_r );
    out : ( pm_addr );
    rsc : (2) pm_addr ;
    ins : 97;
}

PM_st_pm_write_pm_addr_E1 : store {
    fst : 2;
    ist : ( 2 2 );
    ost : ( 2 );
    rid : 136;
    isg : t;
    inp : ( pm_write pm_addr );
    out : ( PM );
    ins : 97;
}

__pm_write_r_word_rd_SP_E1 : read_reg {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 139;
    isg : t;
    inp : ( SP );
    out : ( __pm_write_r_word );
    rsc : (2) __pm_write_r_word ;
    ins : 98;
}

__pm_write_r_word_rd_LR_E1 : read_reg {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 140;
    isg : t;
    inp : ( LR );
    out : ( __pm_write_r_word );
    rsc : (2) __pm_write_r_word ;
    ins : 99;
}

__pm_write_r_word_rd_SR_E1 : read_reg {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 141;
    isg : t;
    inp : ( SR );
    out : ( __pm_write_r_word );
    rsc : (2) __pm_write_r_word ;
    ins : 100;
}

__pm_write_r_word_rd_ILR_E1 : read_reg {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 142;
    isg : t;
    inp : ( ILR );
    out : ( __pm_write_r_word );
    rsc : (2) __pm_write_r_word ;
    ins : 101;
}

__pm_write_r_word_rd_ISR_E1 : read_reg {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 143;
    isg : t;
    inp : ( ISR );
    out : ( __pm_write_r_word );
    rsc : (2) __pm_write_r_word ;
    ins : 102;
}

SP_wr_ag1q_ID : write_reg {
    fst : 1;
    ist : ( 1 );
    ost : ( 1 );
    rid : 144;
    isg : t;
    inp : ( ag1q );
    out : ( SP );
    rsc : (1) __rsrc_SP_wr_ag1q_ID ;
    ins : 103;
}

ag1m_word_cstP16_ID : const {
    fst : 1;
    ost : ( 1 );
    rid : 145;
    isg : t;
    out : ( __CTag1m_word_cstP16_ID );
    ins : 104;
}

ag1m_copy0___CTag1m_word_cstP16_ID : copy0 {
    fst : 1;
    ist : ( 1 );
    ost : ( 1 );
    rid : 146;
    isg : t;
    inp : ( __CTag1m_word_cstP16_ID );
    out : ( ag1m );
    rsc : (1) ag1m ;
    ins : 104;
}

ag1m_sbyte_cstP4_ID : const {
    fst : 1;
    ost : ( 1 );
    rid : 147;
    isg : t;
    out : ( __CTag1m_sbyte_cstP4_ID );
    ins : 105;
}

offs_sbyte_cstP8_ID : const {
    fst : 1;
    ost : ( 1 );
    rid : 149;
    isg : t;
    out : ( __CToffs_sbyte_cstP8_ID );
    ins : 106;
}

offs_copy0___CToffs_sbyte_cstP8_ID : copy0 {
    fst : 1;
    ist : ( 1 );
    ost : ( 1 );
    rid : 150;
    isg : t;
    inp : ( __CToffs_sbyte_cstP8_ID );
    out : ( offs );
    rsc : (1) offs ;
    ins : 106;
}

vd_jump_offs_ID : void_jump_sbyte {
    fst : 1;
    ist : ( 1 );
    rid : 151;
    isg : t;
    inp : ( offs );
    ins : 106;
}

tcc_copy0_cndr_E1 : copy0 {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 152;
    isg : t;
    inp : ( cndr );
    out : ( tcc );
    rsc : (2) tcc ;
    ins : 107;
}

offs_sbyte_cstP8_E1 : const {
    fst : 2;
    ost : ( 2 );
    rid : 153;
    isg : t;
    out : ( __CToffs_sbyte_cstP8_E1 );
    ins : 108;
}

offs_copy0___CToffs_sbyte_cstP8_E1 : copy0 {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 154;
    isg : t;
    inp : ( __CToffs_sbyte_cstP8_E1 );
    out : ( offs );
    rsc : (2) offs ;
    ins : 108;
}

vd_jump_tcc_offs_E1 : void_jump_bool_sbyte {
    fst : 2;
    ist : ( 2 2 );
    rid : 155;
    isg : t;
    inp : ( tcc offs );
    ins : 108;
}

jcr_bool_cstV1_E1 : const {
    fst : 2;
    ost : ( 2 );
    rid : 156;
    isg : t;
    out : ( __CTjcr_bool_cstV1_E1 );
    ins : 108;
}

jcr_copy0___CTjcr_bool_cstV1_E1 : copy0 {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 157;
    isg : t;
    inp : ( __CTjcr_bool_cstV1_E1 );
    out : ( jcr );
    rsc : (2) jcr ;
    ins : 108;
}

trgt_addr_cstP16_ID : const {
    fst : 1;
    ost : ( 1 );
    rid : 158;
    isg : t;
    out : ( __CTtrgt_addr_cstP16_ID );
    ins : 109;
}

trgt_copy0___CTtrgt_addr_cstP16_ID : copy0 {
    fst : 1;
    ist : ( 1 );
    ost : ( 1 );
    rid : 159;
    isg : t;
    inp : ( __CTtrgt_addr_cstP16_ID );
    out : ( trgt );
    rsc : (1) trgt ;
    ins : 109;
}

vd_jump_trgt_ID : void_jump_addr {
    fst : 1;
    ist : ( 1 );
    rid : 160;
    isg : t;
    inp : ( trgt );
    ins : 110;
}

trgt_addr_cstP16_E1 : const {
    fst : 2;
    ost : ( 2 );
    rid : 161;
    isg : t;
    out : ( __CTtrgt_addr_cstP16_E1 );
    ins : 111;
}

trgt_copy0___CTtrgt_addr_cstP16_E1 : copy0 {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 162;
    isg : t;
    inp : ( __CTtrgt_addr_cstP16_E1 );
    out : ( trgt );
    rsc : (2) trgt ;
    ins : 111;
}

vd_jump_tcc_trgt_E1 : void_jump_bool_addr {
    fst : 2;
    ist : ( 2 2 );
    rid : 163;
    isg : t;
    inp : ( tcc trgt );
    ins : 111;
}

jc_bool_cstV1_E1 : const {
    fst : 2;
    ost : ( 2 );
    rid : 164;
    isg : t;
    out : ( __CTjc_bool_cstV1_E1 );
    ins : 111;
}

jc_copy0___CTjc_bool_cstV1_E1 : copy0 {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 165;
    isg : t;
    inp : ( __CTjc_bool_cstV1_E1 );
    out : ( jc );
    rsc : (2) jc ;
    ins : 111;
}

vd_jump_trgt_E1 : void_jump_addr {
    fst : 2;
    ist : ( 2 );
    rid : 167;
    isg : t;
    inp : ( trgt );
    ins : 112;
}

LR_wr___lnk_pf_w_word_ID : write_reg {
    fst : 1;
    ist : ( 1 );
    ost : ( 1 );
    rid : 169;
    isg : t;
    inp : ( __lnk_pf_w_word );
    out : ( LR );
    rsc : (1) __rsrc_LR_wr___lnk_pf_w_word_ID ;
    ins : 113;
}

lnk_pf_bsr_trgt_ID : addr_bsr_addr {
    fst : 1;
    ist : ( 1 );
    ost : ( 1 );
    rid : 170;
    isg : t;
    inp : ( trgt );
    out : ( lnk_pf );
    rsc : (1) lnk_pf ;
    ins : 113;
}

LR_wr___lnk_pf_w_word_E1 : write_reg {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 172;
    isg : t;
    inp : ( __lnk_pf_w_word );
    out : ( LR );
    rsc : (2) __rsrc_LR_wr___lnk_pf_w_word_E1 ;
    ins : 114;
}

lnk_pf_bsr_trgt_E1 : addr_bsr_addr {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 173;
    isg : t;
    inp : ( trgt );
    out : ( lnk_pf );
    rsc : (2) lnk_pf ;
    ins : 114;
}

__trgt_r_word_rd_LR_E1 : read_reg {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 175;
    isg : t;
    inp : ( LR );
    out : ( __trgt_r_word );
    rsc : (2) __trgt_r_word ;
    ins : 115;
}

vd_ret_trgt_E1 : void_ret_addr {
    fst : 2;
    ist : ( 2 );
    rid : 176;
    isg : t;
    inp : ( trgt );
    ins : 115;
}

lew_addr_cstP16_E1 : const {
    fst : 2;
    ost : ( 2 );
    rid : 178;
    isg : t;
    out : ( __CTlew_addr_cstP16_E1 );
    ins : 116;
}

lew_copy0___CTlew_addr_cstP16_E1 : copy0 {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 179;
    isg : t;
    inp : ( __CTlew_addr_cstP16_E1 );
    out : ( lew );
    rsc : (2) lew ;
    ins : 116;
}

vd_hwdo_lcw_lew_E1 : void_hwdo_addr_addr {
    fst : 2;
    ist : ( 2 2 );
    rid : 180;
    isg : t;
    inp : ( lcw lew );
    ins : 116;
}

lcw_addr_cstP32_E1 : const {
    fst : 2;
    ost : ( 2 );
    rid : 181;
    isg : t;
    out : ( __CTlcw_addr_cstP32_E1 );
    ins : 117;
}

lcw_copy0___CTlcw_addr_cstP32_E1 : copy0 {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 182;
    isg : t;
    inp : ( __CTlcw_addr_cstP32_E1 );
    out : ( lcw );
    rsc : (2) lcw ;
    ins : 117;
}

LF_wr_lfw_E1 : write_reg {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 183;
    isg : t;
    inp : ( lfw );
    out : ( LF );
    rsc : (2) __rsrc_LF_wr_lfw_E1 ;
    ins : 118;
}

lfr_rd_LF_E1 : read_reg {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 184;
    isg : t;
    inp : ( LF );
    out : ( lfr );
    rsc : (2) lfr ;
    ins : 118;
}

lfw_decr_lfr_dlflg_E1 : uint2_decr_uint2 {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 185;
    isg : t;
    inp : ( lfr );
    out : ( lfw );
    rsc : (2) lfw ;
    ins : 118;
    opr : dlflg;
}

ILR_wr___lnk_if_w_word_ID : write_reg {
    fst : 1;
    ist : ( 1 );
    ost : ( 1 );
    rid : 187;
    isg : t;
    inp : ( __lnk_if_w_word );
    out : ( ILR );
    rsc : (1) __rsrc_ILR_wr___lnk_if_w_word_ID ;
    ins : 0;
}

trgt_uint4_cstP12_ID : const {
    fst : 1;
    ost : ( 1 );
    rid : 188;
    isg : t;
    out : ( __CTtrgt_uint4_cstP12_ID );
    ins : 0;
}

lnk_if_jti_trgt_ID : addr_jti_addr {
    fst : 1;
    ist : ( 1 );
    ost : ( 1 );
    rid : 190;
    isg : t;
    inp : ( trgt );
    out : ( lnk_if );
    rsc : (1) lnk_if ;
    ins : 0;
}

__trgt_r_word_rd_ILR_ID : read_reg {
    fst : 1;
    ist : ( 1 );
    ost : ( 1 );
    rid : 192;
    isg : t;
    inp : ( ILR );
    out : ( __trgt_r_word );
    rsc : (1) __trgt_r_word ;
    ins : 119;
}

vd_rti_trgt_ID : void_rti_addr {
    fst : 1;
    ist : ( 1 );
    rid : 193;
    isg : t;
    inp : ( trgt );
    ins : 119;
}

vd_halt_ID : void_halt {
    fst : 1;
    rid : 194;
    isg : t;
    ins : 120;
}

ocd_swbreak_req_bool_cstV1_ID : const {
    fst : 1;
    ost : ( 1 );
    rid : 195;
    isg : t;
    out : ( __CTocd_swbreak_req_bool_cstV1_ID );
    ins : 121;
}

ocd_swbreak_req_copy0___CTocd_swbreak_req_bool_cstV1_ID : copy0 {
    fst : 1;
    ist : ( 1 );
    ost : ( 1 );
    rid : 196;
    isg : t;
    inp : ( __CTocd_swbreak_req_bool_cstV1_ID );
    out : ( ocd_swbreak_req );
    rsc : (1) ocd_swbreak_req ;
    ins : 121;
}

vd_nop_E1 : void_nop {
    fst : 2;
    rid : 197;
    isg : t;
    ins : 122;
}

dma_cmd_copy0_cbus_E1 : copy0 {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 198;
    isg : t;
    inp : ( cbus );
    out : ( dma_cmd );
    rsc : (2) dma_cmd ;
    ins : 123;
}

cbus_uint2_cstP10_E1 : const {
    fst : 2;
    ost : ( 2 );
    rid : 199;
    isg : t;
    out : ( __CTcbus_uint2_cstP10_E1 );
    ins : 124;
}

cbus_copy0___CTcbus_uint2_cstP10_E1 : copy0 {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 200;
    isg : t;
    inp : ( __CTcbus_uint2_cstP10_E1 );
    out : ( cbus );
    rsc : (2) cbus ;
    ins : 124;
}

dma_data_copy0_wbus_E1 : copy0 {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 201;
    isg : t;
    inp : ( wbus );
    out : ( dma_data );
    rsc : (2) dma_data ;
    ins : 124;
}

cbus_uint2_cstV0_E1 : const {
    fst : 2;
    ost : ( 2 );
    rid : 202;
    isg : t;
    out : ( __CTcbus_uint2_cstV0_E1 );
    ins : 125;
}

cbus_copy0___CTcbus_uint2_cstV0_E1 : copy0 {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 203;
    isg : t;
    inp : ( __CTcbus_uint2_cstV0_E1 );
    out : ( cbus );
    rsc : (2) cbus ;
    ins : 125;
}

__dma_ready_r_rd_dma_ready_E1 : read_reg {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 205;
    isg : t;
    inp : ( dma_ready );
    out : ( __dma_ready_r );
    rsc : (2) __dma_ready_r ;
    ins : 126;
}

alut_ext_abs_alur_alu_E1 : word_ext_abs_word {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 206;
    isg : t;
    inp : ( alur );
    out : ( alut );
    rsc : (2) alut ;
    ins : 127;
    opr : alu;
}

wbus_conv0___CTwbus_sbyte_cstP4_E1 : word_word_sbyte {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 207;
    isg : t;
    inp : ( __CTwbus_sbyte_cstP4_E1 );
    out : ( wbus );
    rsc : (2) wbus ;
    ins : 61;
}

ag1m_conv0___CTag1m_nint9_cstP4_7_0_ID : word_word_nint9 {
    fst : 1;
    ist : ( 1 );
    ost : ( 1 );
    rid : 208;
    isg : t;
    inp : ( __CTag1m_nint9_cstP4_7_0_ID );
    out : ( ag1m );
    rsc : (1) ag1m ;
    ins : 71;
}

pm_write_conv0_rse1_E1 : iword_iword_word {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 217;
    isg : t;
    inp : ( rse1 );
    out : ( pm_write );
    rsc : (2) pm_write ;
    ins : 128;
}

pm_write_conv0___pm_write_r_word_E1 : iword_iword_word {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 218;
    isg : t;
    inp : ( __pm_write_r_word );
    out : ( pm_write );
    rsc : (2) pm_write ;
    ins : 129;
}

ag1m_conv0___CTag1m_sbyte_cstP4_ID : word_word_sbyte {
    fst : 1;
    ist : ( 1 );
    ost : ( 1 );
    rid : 219;
    isg : t;
    inp : ( __CTag1m_sbyte_cstP4_ID );
    out : ( ag1m );
    rsc : (1) ag1m ;
    ins : 105;
}

__lnk_pf_w_word_conv0_lnk_pf_ID : word_word_addr {
    fst : 1;
    ist : ( 1 );
    ost : ( 1 );
    rid : 221;
    isg : t;
    inp : ( lnk_pf );
    out : ( __lnk_pf_w_word );
    rsc : (1) __lnk_pf_w_word ;
    ins : 113;
}

__lnk_pf_w_word_conv0_lnk_pf_E1 : word_word_addr {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 222;
    isg : t;
    inp : ( lnk_pf );
    out : ( __lnk_pf_w_word );
    rsc : (2) __lnk_pf_w_word ;
    ins : 114;
}

trgt_conv0___trgt_r_word_E1 : addr_addr_word {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 223;
    isg : t;
    inp : ( __trgt_r_word );
    out : ( trgt );
    rsc : (2) trgt ;
    ins : 115;
}

__lnk_if_w_word_conv0_lnk_if_ID : word_word_addr {
    fst : 1;
    ist : ( 1 );
    ost : ( 1 );
    rid : 225;
    isg : t;
    inp : ( lnk_if );
    out : ( __lnk_if_w_word );
    rsc : (1) __lnk_if_w_word ;
    ins : 0;
}

trgt_conv0___CTtrgt_uint4_cstP12_ID : addr_addr_uint4 {
    fst : 1;
    ist : ( 1 );
    ost : ( 1 );
    rid : 226;
    isg : t;
    inp : ( __CTtrgt_uint4_cstP12_ID );
    out : ( trgt );
    rsc : (1) trgt ;
    ins : 0;
}

trgt_conv0___trgt_r_word_ID : addr_addr_word {
    fst : 1;
    ist : ( 1 );
    ost : ( 1 );
    rid : 227;
    isg : t;
    inp : ( __trgt_r_word );
    out : ( trgt );
    rsc : (1) trgt ;
    ins : 119;
}

wbus_conv0___dma_ready_r_E1 : word_word_uint1 {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 228;
    isg : t;
    inp : ( __dma_ready_r );
    out : ( wbus );
    rsc : (2) wbus ;
    ins : 126;
}

mulss_mulr_muls___t___t1_mul_E1 : void_mulss_word_word_word_word {
    fst : 2;
    ist : ( 2 2 );
    ost : ( 2 2 );
    rid : 229;
    isg : t;
    inp : ( mulr muls );
    out : ( __t __t1 );
    rsc : (2) __t __t1 ;
    ins : 130;
    opr : mul;
}

mulx_copy0___t_E1 : copy0 {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 230;
    isg : t;
    inp : ( __t );
    out : ( mulx );
    rsc : (2) mulx ;
    ins : 131;
}

muly_copy0___t1_E1 : copy0 {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 231;
    isg : t;
    inp : ( __t1 );
    out : ( muly );
    rsc : (2) muly ;
    ins : 131;
}

mulx_acc_copy0___t_E1 : copy0 {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 232;
    isg : t;
    inp : ( __t );
    out : ( mulx_acc );
    rsc : (2) mulx_acc ;
    ins : 27;
}

muly_acc_copy0___t1_E1 : copy0 {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 233;
    isg : t;
    inp : ( __t1 );
    out : ( muly_acc );
    rsc : (2) muly_acc ;
    ins : 27;
}

__t2_conv_ag1q_ID : addr_addr_word {
    fst : 1;
    ist : ( 1 );
    ost : ( 1 );
    rid : 234;
    isg : t;
    inp : ( ag1q );
    out : ( __t2 );
    rsc : (1) __t2 ;
    ins : 71;
}

dm_addr_copy0___t2_ID : copy0 {
    fst : 1;
    ist : ( 1 );
    ost : ( 1 );
    rid : 235;
    isg : t;
    inp : ( __t2 );
    out : ( dm_addr );
    rsc : (1) dm_addr ;
    ins : 132;
}

__dm_addr_pipe_w_copy0___t2_ID : copy0 {
    fst : 1;
    ist : ( 1 );
    ost : ( 1 );
    rid : 236;
    isg : t;
    inp : ( __t2 );
    out : ( __dm_addr_pipe_w );
    rsc : (1) __dm_addr_pipe_w ;
    ins : 133;
}

__t3_conv_ag1p_ID : addr_addr_word {
    fst : 1;
    ist : ( 1 );
    ost : ( 1 );
    rid : 237;
    isg : t;
    inp : ( ag1p );
    out : ( __t3 );
    rsc : (1) __t3 ;
    ins : 87;
}

dm_addr_copy0___t3_ID : copy0 {
    fst : 1;
    ist : ( 1 );
    ost : ( 1 );
    rid : 238;
    isg : t;
    inp : ( __t3 );
    out : ( dm_addr );
    rsc : (1) dm_addr ;
    ins : 134;
}

__dm_addr_pipe_w_copy0___t3_ID : copy0 {
    fst : 1;
    ist : ( 1 );
    ost : ( 1 );
    rid : 239;
    isg : t;
    inp : ( __t3 );
    out : ( __dm_addr_pipe_w );
    rsc : (1) __dm_addr_pipe_w ;
    ins : 135;
}

pm_addr_copy0___t3_ID : copy0 {
    fst : 1;
    ist : ( 1 );
    ost : ( 1 );
    rid : 240;
    isg : t;
    inp : ( __t3 );
    out : ( pm_addr );
    rsc : (1) pm_addr ;
    ins : 96;
}

__pm_addr_pipe_w_copy0___t3_ID : copy0 {
    fst : 1;
    ist : ( 1 );
    ost : ( 1 );
    rid : 241;
    isg : t;
    inp : ( __t3 );
    out : ( __pm_addr_pipe_w );
    rsc : (1) __pm_addr_pipe_w ;
    ins : 97;
}

__t4_conv_pm_read_E1 : word_word_iword {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 242;
    isg : t;
    inp : ( pm_read );
    out : ( __t4 );
    rsc : (2) __t4 ;
    ins : 96;
}

rte1_copy0___t4_E1 : copy0 {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 243;
    isg : t;
    inp : ( __t4 );
    out : ( rte1 );
    rsc : (2) rte1 ;
    ins : 136;
}

__pm_read_w_word_copy0___t4_E1 : copy0 {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 244;
    isg : t;
    inp : ( __t4 );
    out : ( __pm_read_w_word );
    rsc : (2) __pm_read_w_word ;
    ins : 137;
}

__t5_conv_rse1_E1 : addr_addr_word {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 245;
    isg : t;
    inp : ( rse1 );
    out : ( __t5 );
    rsc : (2) __t5 ;
    ins : 138;
}

trgt_copy0___t5_E1 : copy0 {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 246;
    isg : t;
    inp : ( __t5 );
    out : ( trgt );
    rsc : (2) trgt ;
    ins : 139;
}

lcw_copy0___t5_E1 : copy0 {
    fst : 2;
    ist : ( 2 );
    ost : ( 2 );
    rid : 247;
    isg : t;
    inp : ( __t5 );
    out : ( lcw );
    rsc : (2) lcw ;
    ins : 140;
}

alut_add_alus_alur_cbw_alu_E1 : word_add_word_word_uint1 {
    fst : 2;
    ist : ( 2 2 );
    ost : ( 2 2 );
    rid : 264;
    isg : t;
    inp : ( alus alur );
    out : ( alut cbw );
    rsc : (2) alut cbw ;
    ins : 7;
    opr : alu;
    com : alut_add_alur_alus_cbw_alu_E1;
    org : alut_add_alur_alus_cbw_alu_E1;
}

alut_addc_alus_alur_cbr_cbw_alu_E1 : word_addc_word_word_uint1_uint1 {
    fst : 2;
    ist : ( 2 2 2 );
    ost : ( 2 2 );
    rid : 265;
    isg : t;
    inp : ( alus alur cbr );
    out : ( alut cbw );
    rsc : (2) alut cbw ;
    ins : 9;
    opr : alu;
    com : alut_addc_alur_alus_cbr_cbw_alu_E1;
    org : alut_addc_alur_alus_cbr_cbw_alu_E1;
}

alut_andw_alus_alur_alu_E1 : word_andw_word_word {
    fst : 2;
    ist : ( 2 2 );
    ost : ( 2 );
    rid : 266;
    isg : t;
    inp : ( alus alur );
    out : ( alut );
    rsc : (2) alut ;
    ins : 12;
    opr : alu;
    com : alut_andw_alur_alus_alu_E1;
    org : alut_andw_alur_alus_alu_E1;
}

alut_orw_alus_alur_alu_E1 : word_orw_word_word {
    fst : 2;
    ist : ( 2 2 );
    ost : ( 2 );
    rid : 267;
    isg : t;
    inp : ( alus alur );
    out : ( alut );
    rsc : (2) alut ;
    ins : 13;
    opr : alu;
    com : alut_orw_alur_alus_alu_E1;
    org : alut_orw_alur_alus_alu_E1;
}

alut_xorw_alus_alur_alu_E1 : word_xorw_word_word {
    fst : 2;
    ist : ( 2 2 );
    ost : ( 2 );
    rid : 268;
    isg : t;
    inp : ( alus alur );
    out : ( alut );
    rsc : (2) alut ;
    ins : 14;
    opr : alu;
    com : alut_xorw_alur_alus_alu_E1;
    org : alut_xorw_alur_alus_alu_E1;
}

muly_add_mulv_mulx_acc_mul_E1 : word_add_word_word {
    fst : 2;
    ist : ( 2 2 );
    ost : ( 2 );
    rid : 269;
    isg : t;
    inp : ( mulv mulx_acc );
    out : ( muly );
    rsc : (2) muly ;
    ins : 27;
    opr : mul;
    com : muly_add_mulx_acc_mulv_mul_E1;
    org : muly_add_mulx_acc_mulv_mul_E1;
}

ag1q_add_ag1m_ag1p_ag1_ID : word_add_word_word {
    fst : 1;
    ist : ( 1 1 );
    ost : ( 1 );
    rid : 270;
    isg : t;
    inp : ( ag1m ag1p );
    out : ( ag1q );
    rsc : (1) ag1q ;
    ins : 72;
    opr : ag1;
    com : ag1q_add_ag1p_ag1m_ag1_ID;
    org : ag1q_add_ag1p_ag1m_ag1_ID;
}


//Hazards
sw_stall [1,1] w n <jump_to_loop_end> {
    ins : 141;
} -> {
    spc : end_of_loop;
} rid : 271;

sw_stall [1,2] w n <jump_to_loop_end> {
    ins : 108;
} -> {
    spc : end_of_loop;
} rid : 272;

sw_stall [1,2] w n <jump_to_loop_end> {
    ins : 111;
} -> {
    spc : end_of_loop;
} rid : 273;

sw_stall [1,2] w n <bsr_to_loop_end> {
    ins : 113;
} -> {
    spc : end_of_loop;
} rid : 275;

sw_stall [1,3] w n <bsr_to_loop_end> {
    ins : 114;
} -> {
    spc : end_of_loop;
} rid : 277;

sw_stall [0,0] w n <between_loop_ends> {
    spc : end_of_loop;
} -> {
    spc : end_of_loop;
} rid : 278;

sw_stall [1,1] i n <hazards_n_L71> {
    spc : pdc_sw_breakpoint;
} -> {
    spc : end_of_loop;
} rid : 279;

sw_stall [1,2] c n <pm_load_conflict> {
    ins : 96;
} -> {
    spc : delay_slot_end;
    ins : 142;
} rid : 281;

sw_stall [1,1] c n <offs_conflict> {
    ins : 108;
} -> {
    ins : 106;
} rid : 284;

sw_stall [1,1] c n <dm_addr_conflict> {
    ins : 80;
} -> {
    ins : 79;
} rid : 287;

sw_stall [1,1] c f <read_after_write_R> at_en {
    reg : R_wr_rte1___R_rte1_wad_E1 PL_wr_mulx_E1 PH_wr_muly_E1;
    ins : 143;
} -> {
    reg : rrid_rd_R___R_rrid_rad_ID;
    ins : 87;
} rid : 290;

sw_stall [1,1] c f <read_after_write_SP> {
    reg : SP_wr_wbus_E1 SP_wr_dm_read_E1 SP_wr___pm_read_w_word_E1;
    ins : 144;
} -> {
    reg : ag1p_rd_SP_ID;
    ins : 70;
} rid : 293;

sw_stall [1,1] c f <read_after_write_ILR> {
    reg : ILR_wr_wbus_E1 ILR_wr_dm_read_E1 ILR_wr___pm_read_w_word_E1;
    ins : 145;
} -> {
    reg : __trgt_r_word_rd_ILR_ID;
    ins : 119;
} rid : 296;



//Instruction properties
i_class_tmicro : instruction_class {
    ins : 146;
}

i_class_alu_instr : instruction_class {
    ins : 147;
}

i_class_alu_rrr : instruction_class {
    ins : 148;
}

i_class_rr : instruction_class {
    ins : 1;
}

i_class_rr_r : instruction_class {
    ins : 1;
}

i_class_rs : instruction_class {
    ins : 149;
}

i_class_rs_r : instruction_class {
    ins : 149;
}

i_class_rt : instruction_class {
    ins : 15;
}

i_class_rt_w : instruction_class {
    ins : 15;
}

i_class_shift_rrr : instruction_class {
    ins : 18;
}

i_class_mul_rr : instruction_class {
    ins : 22;
}

i_class_div_r : instruction_class {
    ins : 28;
}

i_class_compare_rr : instruction_class {
    ins : 150;
}

i_class_equal_rr : instruction_class {
    ins : 151;
}

i_class_alu_rr : instruction_class {
    ins : 152;
}

i_class_minmax_rrr : instruction_class {
    ins : 153;
}

i_class_select_rrr : instruction_class {
    ins : 45;
}

i_class_move_instr : instruction_class {
    ins : 154;
}

i_class_mv_wreg : instruction_class {
    ins : 155;
}

i_class_wreg : instruction_class {
    ins : 156;
}

i_class_wreg_w : instruction_class {
    ins : 157;
}

i_class_r_reg : instruction_class {
    ins : 158;
}

i_class_r_reg_w : instruction_class {
    ins : 159;
}

i_class_sp_reg : instruction_class {
    ins : 160;
}

i_class_sp_reg_w : instruction_class {
    ins : 144;
}

i_class_lr_reg : instruction_class {
    ins : 161;
}

i_class_lr_reg_w : instruction_class {
    ins : 162;
}

i_class_sr_reg : instruction_class {
    ins : 163;
}

i_class_sr_reg_w : instruction_class {
    ins : 164;
}

i_class_ilr_reg : instruction_class {
    ins : 165;
}

i_class_ilr_reg_w : instruction_class {
    ins : 145;
}

i_class_isr_reg : instruction_class {
    ins : 166;
}

i_class_isr_reg_w : instruction_class {
    ins : 167;
}

i_class_wreg_r : instruction_class {
    ins : 168;
}

i_class_r_reg_r : instruction_class {
    ins : 169;
}

i_class_sp_reg_r : instruction_class {
    ins : 170;
}

i_class_lr_reg_r : instruction_class {
    ins : 171;
}

i_class_sr_reg_r : instruction_class {
    ins : 172;
}

i_class_ilr_reg_r : instruction_class {
    ins : 173;
}

i_class_isr_reg_r : instruction_class {
    ins : 174;
}

i_class_mvi_wreg_word : instruction_class {
    ins : 60;
}

i_class_mvi_wreg_byte : instruction_class {
    ins : 61;
}

i_class_mvi_im : instruction_class {
    ins : 62;
}

i_class_ei : instruction_class {
    ins : 64;
}

i_class_di : instruction_class {
    ins : 175;
}

i_class_mv_dbg_wreg : instruction_class {
    ins : 68;
}

i_class_mv_wreg_dbg : instruction_class {
    ins : 69;
}

i_class_load_store_instr : instruction_class {
    ins : 176;
}

i_class_sp_indexed : instruction_class {
    ins : 71;
}

i_class_load_store_wreg_sp_indexed : instruction_class {
    ins : 71;
}

i_class_load_store_wreg_indirect : instruction_class {
    ins : 177;
}

i_class_ag1_opn : instruction_class {
    ins : 87;
}

i_class_rrid : instruction_class {
    ins : 87;
}

i_class_rrid_r : instruction_class {
    ins : 87;
}

i_class_rrid_w : instruction_class {
    ins : 88;
}

i_class_load_store_pm_wreg_indirect : instruction_class {
    ins : 178;
}

i_class_load_pm_wreg_indirect : instruction_class {
    ins : 96;
}

i_class_store_pm_wreg_indirect : instruction_class {
    ins : 97;
}

i_class_add_sp_word : instruction_class {
    ins : 104;
}

i_class_add_sp_byte : instruction_class {
    ins : 105;
}

i_class_control_instr : instruction_class {
    ins : 179;
}

i_class_jump : instruction_class {
    ins : 141;
}

i_class_jrd : instruction_class {
    ins : 180;
}

i_class_jr : instruction_class {
    ins : 181;
}

i_class_jcr : instruction_class {
    ins : 108;
}

i_class_j : instruction_class {
    ins : 110;
}

i_class_jc : instruction_class {
    ins : 111;
}

i_class_ji : instruction_class {
    ins : 112;
}

i_class_cl : instruction_class {
    ins : 113;
}

i_class_clid : instruction_class {
    ins : 114;
}

i_class_ret : instruction_class {
    ins : 182;
}

i_class_rtd : instruction_class {
    ins : 183;
}

i_class_do : instruction_class {
    ins : 140;
}

i_class_loop : instruction_class {
    ins : 116;
}

i_class_doi : instruction_class {
    ins : 117;
}

i_class_dlf : instruction_class {
    ins : 118;
}

i_class_swi : instruction_class {
    ins : 0;
}

i_class_rti : instruction_class {
    ins : 119;
}

i_class_halt : instruction_class {
    ins : 120;
}

i_class_swbrk : instruction_class {
    ins : 121;
}

i_class_nop : instruction_class {
    ins : 122;
}

i_class_dma : instruction_class {
    ins : 184;
}

i_class_write_dma_command : instruction_class {
    ins : 124;
}

i_class_write_dma_reset : instruction_class {
    ins : 125;
}

i_class_read_dma_ready : instruction_class {
    ins : 126;
}

i_class_ext_instr : instruction_class {
    ins : 127;
}

i_class_ext_abs_r : instruction_class {
    ins : 127;
}


cycles1 : cycles {
    cyc : 1;
    ins : 185;
}

cycles2 : cycles {
    cyc : 2;
    ins : 186;
}

cycles3 : cycles {
    cyc : 3;
    ins : 187;
}


words1 : words {
    wrd : 1;
    ins : 188;
}

words2 : words {
    wrd : 2;
    ins : 189;
}

words3 : words {
    wrd : 3;
    ins : 117;
}


alt_cycles0 : alt_cycles {
    ins : 190;
}

alt_cycles1 : alt_cycles {
    acy : 1;
    ins : 108;
}

alt_cycles2 : alt_cycles {
    acy : 2;
    ins : 111;
}


delay_slots0 : delay_slots {
    ins : 191;
}

delay_slots1 : delay_slots {
    del : 1;
    ins : 192;
}

delay_slots2 : delay_slots {
    del : 2;
    ins : 142;
}


pc_offset0 : pc_offset {
    ins : 193;
}

pc_offset1 : pc_offset {
    pco : 1;
    ins : 106;
}

pc_offset2 : pc_offset {
    pco : 2;
    ins : 108;
}



0 : 'alu.n';
1 : 'control.n';
2 : 'dma.n';
3 : 'hazards.n';
4 : 'load_store.n';
5 : 'move.n';
6 : 'tmicro.n';
----------
----------
1 : (0,65:9,0) (0,183:8,0) (0,215:9,0) (0,232:57,0) (0,86:16,0) (0,107:9,0) (0,137:16,0) (0,153:16,0) (0,166:12,0) (6,159:30,0);
2 : (0,65:9,0) (0,232:57,0) (0,86:16,0) (0,107:9,0) (0,137:16,0) (0,153:16,0) (0,166:12,0) (6,159:43,0);
3 : (0,65:9,0) (0,183:8,0) (0,215:9,0) (0,232:57,0) (0,86:16,0) (0,107:9,0) (0,137:16,0) (0,153:16,0) (0,166:12,0) (6,159:43,0);
4 : (0,65:9,0) (0,183:8,0) (0,215:9,0) (0,232:57,0) (0,86:16,0) (0,107:9,0) (0,137:16,0) (0,153:16,0) (0,166:12,0) (6,159:43,0);
5 : (0,66:9,0) (0,184:8,0) (0,216:9,0) (0,87:16,0) (0,108:9,0) (0,122:16,0) (0,138:16,0) (0,154:9,0) (5,48:39,0) (5,55:38,0) (5,62:38,0) (5,106:22,0) (5,96:22,0) (4,51:47,0) (4,57:36,0) (4,93:47,0) (4,99:36,0) (4,116:43,0) (4,130:35,0) (1,112:35,0) (1,145:33,0) (1,191:11,0) (2,51:22,0) (2,70:23,0) (6,160:30,0) (6,125:16,0);
6 : (0,66:9,0) (0,87:16,0) (0,108:9,0) (0,122:16,0) (0,138:16,0) (0,154:9,0) (6,160:43,0);
7 : (0,66:9,0) (0,184:8,0) (0,216:9,0) (0,87:16,0) (0,108:9,0) (0,122:16,0) (0,138:16,0) (0,154:9,0) (5,48:39,0) (5,96:22,0) (4,57:36,0) (4,99:36,0) (4,130:35,0) (1,112:35,0) (1,145:33,0) (1,191:11,0) (2,51:22,0) (6,160:43,0) (6,125:40,0);
8 : (0,66:9,0) (0,184:8,0) (0,216:9,0) (0,87:16,0) (0,108:9,0) (0,122:16,0) (0,138:16,0) (0,154:9,0) (5,48:39,0) (5,96:22,0) (4,57:36,0) (4,99:36,0) (4,130:35,0) (1,112:35,0) (1,145:33,0) (1,191:11,0) (2,51:22,0) (6,160:43,0) (6,125:40,0);
9 : (0,68:44,0) (0,69:44,0) (0,70:44,0) (0,71:44,0) (0,68:38,0) (0,69:41,0) (0,70:38,0) (0,71:41,0);
10 : (0,68:44,0);
11 : (0,69:44,0) (0,71:44,0) (0,69:38,0) (0,71:38,0);
12 : (0,69:44,0);
13 : (0,70:44,0);
14 : (0,71:44,0);
15 : (0,72:44,0);
16 : (0,73:44,0);
17 : (0,74:44,0);
18 : (0,76:9,0) (0,190:8,0) (0,127:9,0) (0,143:9,0) (0,156:9,0) (0,168:12,0) (6,161:30,0);
19 : (0,76:9,0) (0,190:8,0) (0,127:9,0) (0,143:9,0) (0,156:9,0) (0,168:12,0) (6,161:43,0);
20 : (0,76:9,0) (0,190:8,0) (0,127:9,0) (0,143:9,0) (0,156:9,0) (5,48:39,0) (5,55:38,0) (5,62:38,0) (5,106:22,0) (4,51:47,0) (4,93:47,0) (4,116:43,0) (2,70:23,0) (0,168:12,0) (6,161:43,0) (6,125:40,0);
21 : (0,76:9,0) (0,127:9,0) (0,143:9,0) (0,156:9,0) (0,168:12,0) (6,161:43,0);
22 : (0,183:8,0) (6,159:43,0);
23 : (0,184:8,0) (6,160:43,0);
24 : (0,186:31,0);
25 : (0,187:31,0);
26 : (0,188:31,0);
27 : (0,190:8,0) (6,161:43,0);
28 : (0,215:9,0) (6,159:43,0);
29 : (0,216:9,0) (6,160:43,0);
30 : (0,218:58,0) (0,219:58,0) (0,232:57,0) (0,218:33,0) (0,219:33,0) (0,232:41,0);
31 : (0,218:58,0) (0,219:58,0) (0,221:58,0) (0,232:57,0) (0,218:44,0) (0,219:44,0) (0,221:16,0) (0,232:49,0);
33 : (0,219:58,0);
35 : (0,221:58,0) (0,232:57,0) (0,221:44,0) (0,232:35,0);
36 : (0,221:58,0);
37 : (0,232:57,0) (0,232:27,0);
38 : (0,232:57,0);
39 : (0,89:33,0) (0,90:33,0) (0,91:33,0) (0,92:33,0) (0,93:33,0) (0,94:33,0) (0,95:33,0) (0,96:33,0) (0,110:32,0) (0,111:32,0) (0,89:15,0) (0,90:15,0) (0,91:15,0) (0,92:15,0) (0,93:15,0) (0,94:15,0) (0,95:15,0) (0,96:15,0) (0,110:15,0) (0,111:15,0);
40 : (0,89:33,0);
41 : (0,90:33,0);
42 : (0,91:33,0);
43 : (0,92:33,0);
44 : (0,93:33,0);
45 : (0,94:33,0);
46 : (0,95:33,0);
47 : (0,96:33,0);
48 : (0,110:32,0);
49 : (0,111:32,0);
50 : (0,124:37,0);
51 : (0,125:38,0);
52 : (0,140:41,0);
53 : (0,141:41,0);
54 : (0,155:34,0) (1,95:17,0) (1,121:17,0) (0,155:18,0) (1,95:5,0) (1,121:5,0);
55 : (0,155:34,0);
56 : (5,48:39,0) (6,125:16,0);
57 : (5,48:39,0) (6,125:40,0);
58 : (5,48:39,0) (5,55:38,0) (5,62:38,0) (5,106:22,0) (2,70:23,0) (6,125:40,0);
59 : (5,48:39,0) (5,55:38,0) (5,62:38,0) (5,106:22,0) (2,70:23,0) (6,130:32,0);
60 : (5,48:39,0) (5,55:38,0) (5,62:38,0) (5,106:22,0) (2,70:23,0) (6,131:32,0);
61 : (5,48:39,0) (5,55:38,0) (5,62:38,0) (5,106:22,0) (2,70:23,0) (6,132:32,0);
62 : (5,48:39,0) (5,55:38,0) (5,62:38,0) (5,106:22,0) (2,70:23,0) (6,134:33,0);
63 : (5,48:39,0) (5,55:38,0) (5,62:38,0) (5,106:22,0) (1,225:16,0) (2,70:23,0) (6,135:33,0) (1,225:5,0);
64 : (5,48:39,0) (5,96:22,0) (2,51:22,0) (6,125:40,0);
65 : (5,48:39,0) (5,96:22,0) (2,51:22,0) (6,130:32,0);
66 : (5,48:39,0) (5,96:22,0) (2,51:22,0) (6,131:32,0);
67 : (5,48:39,0) (5,96:22,0) (1,225:16,0) (2,51:22,0) (6,132:32,0) (1,225:5,0);
68 : (5,48:39,0) (5,96:22,0) (2,51:22,0) (6,134:33,0);
69 : (5,48:39,0) (5,96:22,0) (2,51:22,0) (6,135:33,0);
70 : (5,55:38,0) (5,62:38,0) (5,106:22,0) (4,51:47,0) (4,93:47,0) (4,116:43,0) (2,70:23,0) (6,125:40,0);
71 : (5,55:38,0) (5,55:26,0);
72 : (5,55:38,0) (5,55:26,0);
73 : (5,62:38,0) (5,62:26,0);
75 : (5,69:37,0) (5,69:26,0);
76 : (5,69:37,0) (5,69:26,0);
77 : (5,69:37,0) (5,69:26,0);
78 : (5,76:35,0) (5,87:17,0) (1,224:13,0) (5,76:26,0) (5,87:8,0) (1,224:4,0);
79 : (5,76:35,0) (5,76:26,0);
80 : (5,76:35,0) (5,76:26,0);
81 : (5,84:13,0) (1,76:29,0) (1,92:16,0) (1,142:16,0) (1,161:24,0) (1,221:16,0) (1,250:16,0) (5,84:10,0) (1,76:27,0) (1,92:13,0) (1,142:13,0) (1,161:22,0) (1,221:13,0) (1,250:13,0);
82 : (5,84:13,0) (1,76:29,0) (1,92:16,0) (1,142:16,0) (1,161:24,0) (1,221:16,0) (1,250:16,0) (5,84:10,0) (1,76:27,0) (1,92:13,0) (1,142:13,0) (1,161:22,0) (1,221:13,0) (1,250:13,0);
83 : (5,86:13,0) (1,94:16,0) (1,144:16,0) (1,162:26,0) (1,223:16,0) (1,252:16,0) (5,86:10,0) (1,94:13,0) (1,144:13,0) (1,162:23,0) (1,223:13,0) (1,252:13,0);
84 : (5,86:13,0) (1,94:16,0) (1,144:16,0) (1,162:26,0) (1,223:16,0) (1,252:16,0) (5,86:10,0) (1,94:13,0) (1,144:13,0) (1,162:23,0) (1,223:13,0) (1,252:13,0);
85 : (5,87:17,0) (1,224:13,0) (5,87:8,0) (1,224:4,0);
86 : (5,87:17,0) (1,224:13,0) (5,87:8,0) (1,224:4,0);
87 : (5,106:22,0) (5,106:5,0);
88 : (5,96:22,0) (5,96:10,0);
89 : (4,46:32,0) (4,138:58,0) (4,145:58,0) (4,46:16,0) (4,138:43,0) (4,145:43,0);
90 : (4,46:32,0) (4,46:24,0);
92 : (4,46:32,0) (4,76:45,0) (4,77:45,0) (4,138:58,0) (4,145:58,0);
94 : (4,51:47,0) (4,93:47,0) (6,125:40,0);
95 : (4,51:47,0) (4,93:47,0) (6,130:32,0);
96 : (4,51:47,0) (4,93:47,0) (6,131:32,0);
97 : (4,51:47,0) (4,93:47,0) (6,132:32,0);
98 : (4,51:47,0) (4,93:47,0) (6,134:33,0);
99 : (4,51:47,0) (4,93:47,0) (6,135:33,0);
100 : (4,51:47,0) (4,93:47,0) (4,51:12,0) (4,93:12,0);
101 : (4,54:21,0) (4,96:21,0) (4,54:15,0) (4,96:15,0);
103 : (4,56:24,0) (4,98:24,0) (4,56:10,0) (4,98:10,0);
104 : (4,57:36,0) (4,99:36,0) (4,57:21,0) (4,99:21,0);
105 : (4,57:36,0) (4,99:36,0) (6,125:40,0);
106 : (4,57:36,0) (4,99:36,0) (6,130:32,0);
107 : (4,57:36,0) (4,99:36,0) (6,131:32,0);
108 : (4,57:36,0) (4,99:36,0) (6,132:32,0);
109 : (4,57:36,0) (4,99:36,0) (6,134:33,0);
110 : (4,57:36,0) (4,99:36,0) (6,135:33,0);
111 : (4,75:21,0) (4,76:45,0) (4,77:45,0) (6,154:16,0);
112 : (4,75:21,0) (4,76:45,0) (4,77:45,0) (6,154:41,0);
113 : (4,75:21,0) (4,76:45,0) (4,77:45,0) (6,154:41,0);
114 : (4,75:21,0) (4,76:45,0) (4,77:45,0) (6,154:41,0);
115 : (4,76:45,0) (4,77:45,0) (6,154:41,0);
116 : (4,76:45,0) (4,77:45,0) (6,154:41,0);
117 : (4,76:45,0) (4,77:45,0) (6,154:41,0);
118 : (4,76:45,0) (4,76:39,0);
119 : (4,76:45,0) (4,76:39,0);
120 : (4,77:45,0) (4,77:39,0);
121 : (4,77:45,0) (4,77:39,0);
127 : (4,116:43,0) (6,130:32,0);
128 : (4,116:43,0) (6,131:32,0);
129 : (4,116:43,0) (6,132:32,0);
130 : (4,116:43,0) (6,134:33,0);
131 : (4,116:43,0) (6,135:33,0);
132 : (4,116:43,0) (4,116:8,0);
133 : (4,127:20,0) (4,127:14,0);
135 : (4,129:30,0) (4,129:16,0);
136 : (4,130:35,0) (4,130:20,0);
139 : (4,130:35,0) (6,130:32,0);
140 : (4,130:35,0) (6,131:32,0);
141 : (4,130:35,0) (6,132:32,0);
142 : (4,130:35,0) (6,134:33,0);
143 : (4,130:35,0) (6,135:33,0);
144 : (4,138:58,0) (4,145:58,0) (4,138:26,0) (4,145:26,0);
145 : (4,138:58,0) (4,138:51,0);
146 : (4,138:58,0) (4,138:51,0);
147 : (4,145:58,0) (4,145:51,0);
149 : (1,76:44,0) (1,83:36,0) (1,76:40,0) (1,83:32,0);
150 : (1,76:44,0) (1,83:36,0) (1,76:40,0) (1,83:32,0);
151 : (1,76:44,0) (1,83:36,0);
152 : (1,95:17,0) (1,121:17,0) (1,95:5,0) (1,121:5,0);
153 : (1,96:18,0) (1,96:14,0);
154 : (1,96:18,0) (1,96:14,0);
155 : (1,96:18,0);
156 : (1,97:8,0) (1,97:5,0);
157 : (1,97:8,0) (1,97:5,0);
158 : (1,105:36,0) (1,132:40,0) (1,105:32,0) (1,132:36,0);
159 : (1,105:36,0) (1,132:40,0) (1,105:32,0) (1,132:36,0);
160 : (1,105:36,0);
161 : (1,122:25,0) (1,122:21,0);
162 : (1,122:25,0) (1,122:21,0);
163 : (1,122:25,0);
164 : (1,123:7,0) (1,123:4,0);
165 : (1,123:7,0) (1,123:4,0);
167 : (1,112:35,0);
169 : (1,132:40,0) (1,132:17,0);
170 : (1,132:40,0);
172 : (1,145:33,0) (1,145:11,0);
173 : (1,145:33,0);
175 : (1,153:35,0) (1,162:41,0) (1,153:31,0) (1,162:37,0);
176 : (1,153:35,0) (1,162:41,0);
178 : (1,174:18,0) (1,174:12,0);
179 : (1,174:18,0) (1,174:12,0);
180 : (1,175:21,0);
181 : (1,202:10,0) (1,202:4,0);
182 : (1,202:10,0) (1,202:4,0);
183 : (1,211:48,0) (1,211:26,0);
184 : (1,211:48,0) (1,211:42,0);
185 : (1,211:48,0);
187 : (1,220:35,0) (1,220:12,0);
188 : (1,220:35,0) (1,220:31,0);
190 : (1,220:35,0);
192 : (1,235:14,0) (1,235:9,0);
193 : (1,235:14,0);
194 : (1,249:14,0);
195 : (1,262:20,0) (1,262:17,0);
196 : (1,262:20,0) (1,262:17,0);
197 : (1,270:28,0);
198 : (2,50:20,0) (2,61:19,0) (2,50:9,0) (2,61:9,0);
199 : (2,50:20,0) (2,50:9,0);
200 : (2,50:20,0) (2,50:9,0);
201 : (2,51:22,0) (2,51:10,0);
202 : (2,61:19,0) (2,61:9,0);
203 : (2,61:19,0) (2,61:9,0);
205 : (2,70:23,0) (2,70:5,0);
206 : (0,167:26,0);
207 : (5,62:38,0) (5,62:26,0);
208 : (4,46:32,0) (4,46:24,0);
217 : (4,130:35,0) (6,125:40,0);
218 : (4,130:35,0) (6,130:32,0) (6,131:32,0) (6,132:32,0) (6,134:33,0) (6,135:33,0);
219 : (4,145:58,0) (4,145:51,0);
221 : (1,132:40,0) (1,132:17,0);
222 : (1,145:33,0) (1,145:11,0);
223 : (1,153:35,0) (1,162:41,0) (1,153:31,0) (1,162:37,0);
225 : (1,220:35,0) (1,220:12,0);
226 : (1,220:35,0) (1,220:31,0);
227 : (1,235:14,0) (1,235:9,0);
228 : (2,70:23,0) (2,70:5,0);
229 : (0,218:58,0) (0,220:58,0);
230 : (0,218:58,0);
231 : (0,218:58,0);
232 : (0,220:58,0);
233 : (0,220:58,0);
234 : (4,50:27,0) (4,54:21,0) (4,50:17,0) (4,54:15,0);
235 : (4,50:27,0) (4,50:17,0);
236 : (4,54:21,0) (4,54:15,0);
237 : (4,92:27,0) (4,96:21,0) (4,115:23,0) (4,127:20,0) (4,92:17,0) (4,96:15,0) (4,115:13,0) (4,127:14,0);
238 : (4,92:27,0) (4,92:17,0);
239 : (4,96:21,0) (4,96:15,0);
240 : (4,115:23,0) (4,115:13,0);
241 : (4,127:20,0) (4,127:14,0);
242 : (4,116:43,0) (6,125:40,0) (6,130:32,0) (6,131:32,0) (6,132:32,0) (6,134:33,0) (6,135:33,0);
243 : (4,116:43,0) (6,125:40,0);
244 : (4,116:43,0) (6,130:32,0) (6,131:32,0) (6,132:32,0) (6,134:33,0) (6,135:33,0);
245 : (1,112:35,0) (1,145:33,0) (1,191:11,0) (6,160:43,0) (1,191:4,0);
246 : (1,112:35,0) (1,145:33,0) (6,160:43,0);
247 : (1,191:11,0) (1,191:4,0);
264 : (0,68:44,0);
265 : (0,69:44,0);
266 : (0,72:44,0);
267 : (0,73:44,0);
268 : (0,74:44,0);
269 : (0,221:58,0);
270 : (4,46:32,0) (4,76:45,0) (4,77:45,0) (4,138:58,0) (4,145:58,0);
271 : (3,28:42,0);
272 : (3,36:45,0);
273 : (3,44:45,0);
275 : (3,52:44,0);
277 : (3,57:44,0);
278 : (3,64:43,0);
279 : (3,71:25,0);
281 : (3,81:46,0);
284 : (3,92:40,0);
287 : (3,100:43,0);
290 : (3,109:62,0);
293 : (3,117:46,0);
296 : (3,125:47,0);


