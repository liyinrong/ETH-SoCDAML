
// File generated by noodle version O-2018.09#f5599cac26#190121, Tue May 28 12:03:13 2024
// Copyright 2014-2018 Synopsys, Inc. All rights reserved.
// noodle -Pc -B -Iisg +wisg -Iruntime/include -D__tct_patch__=300 -D__chess__ -D__programmers_view__ tzscale

#ifdef __chess__
#error "generated native file not intended for compilation by chess"
#endif

// Native C++ types and functions

#ifndef _tzscale_chess_types_h
#define _tzscale_chess_types_h

#include "chess.h"
#include "vbit.h"

#include "tzscale_iss_types.h"

#ifdef CHESS_NATIVE_NAMESPACE
namespace CHESS_NATIVE_NAMESPACE {
#endif


//  Application types (declarations)

//class float;          // property( 32 bit /*sign_magnitude*/ 8 exp_bits /*exp_biased*/ /*layout_sign_exp_frac*/ /*msb_implicit_integral*/ );
//class double;         // property( 64 bit /*sign_magnitude*/ 11 exp_bits /*exp_biased*/ /*layout_sign_exp_frac*/ /*msb_implicit_integral*/ );
//class long double;    // property( 64 bit /*sign_magnitude*/ 11 exp_bits /*exp_biased*/ /*layout_sign_exp_frac*/ /*msb_implicit_integral*/ );
class v2short;          // property( vector short[2] );


extern long long dbl2expo(double, int bits, int sign, int expo, int sexp, int layo, int mbit, int zexp);
extern double expo2dbl(long long, int bits, int sign, int expo, int sexp, int layo, int mbit, int zexp);
// fast ieee versions, with NaN support, and avoiding (float)(double)(float) which isn't idempotent for some NaNs
inline long      flt2ieee(float     a) { return (long     &)a; }
inline long long dbl2ieee(double    a) { return (long long&)a; }
inline float     ieee2flt(long      a) { return (float    &)a; }
inline double    ieee2dbl(long long a) { return (double   &)a; }

//  Built-in type wrappers (bit-true behaviour or used as vector element type)

namespace tzscale_BT {

//class BTbool /* std C conforming */

//class BT__schar /* std C conforming */

//class BT__uchar /* std C conforming */

// used as vector element type
class BT__sshort
{
public:
    typedef VBit<16, true> BitType;
    static const int bits = BitType::bits;
    static const bool isSigned = BitType::isSigned;
    BitType val;
public:
    BT__sshort() = default;
    template <int B, bool S> BT__sshort(const VBit<B, S>& a) : val(a) {}
    BT__sshort(const VBitWrapper& a) : val(a) {}
    template <typename DataType, int E> BT__sshort(const VBitVector<DataType, E>& a) : val(a) {}
public:
    // backwards compatibility api
    BitType::ValueType& value() { return val.value(); }
    const BitType::ValueType& value() const { return val.value(); }
    void value(const BitType::ValueType& v) { val.value(v); }
    BT__sshort(BitType::ValueType a) : val(a) {}
    BitType::UBaseType to_unsigned() const { return val.to_unsigned(); }
    BitType::SBaseType to_signed() const { return val.to_signed(); }
    friend std::ostream& operator<<(std::ostream& os, const BT__sshort& x) { os << x.val; return os; }
    friend std::istream& operator>>(std::istream& is, BT__sshort& x) { is >> x.val; return is; }
public:
    operator BitType::ValueType() const { return val.value(); }
    BT__sshort& operator=(BitType::ValueType a) { val = a; return *this; }
    BT__sshort& operator+=(const BT__sshort& a) { val += a.val; return *this; }
    BT__sshort& operator-=(const BT__sshort& a) { val -= a.val; return *this; }
    BT__sshort& operator*=(const BT__sshort& a) { val *= a.val; return *this; }
    BT__sshort& operator/=(const BT__sshort& a) { val /= a.val; return *this; }
    BT__sshort& operator%=(const BT__sshort& a) { val %= a.val; return *this; }
    BT__sshort& operator&=(const BT__sshort& a) { val &= a.val; return *this; }
    BT__sshort& operator|=(const BT__sshort& a) { val |= a.val; return *this; }
    BT__sshort& operator^=(const BT__sshort& a) { val ^= a.val; return *this; }
    BT__sshort& operator<<=(const int& a) { val <<= a; return *this; }
    BT__sshort& operator>>=(const int& a) { val >>= a; return *this; }
    BT__sshort& operator++() { ++val; return *this; }
    BT__sshort operator++(int) { BT__sshort i = *this; val++; return i; }
    BT__sshort& operator--() { --val; return *this; }
    BT__sshort operator--(int) { BT__sshort i = *this; val--; return i; }
};
inline const BT__sshort::BitType& toBitType(const BT__sshort& v) { return v.val; }

//class BT__ushort /* std C conforming */

//class BT__sint /* std C conforming */

//class BT__uint /* std C conforming */

//class BT__slonglong /* std C conforming */

//class BT__ulonglong /* std C conforming */

//class BT__ffloat /* std C conforming */

//class BT__fdouble /* std C conforming */

} //namespace tzscale_BT


//  Application types (definitions)

class v2short
{
public:
    typedef VBitVector<tzscale_BT::BT__sshort, 2> BitType;
    typedef BitType::handle handle;
    static const int bits = BitType::bits;
    static const bool isSigned = BitType::isSigned;
    BitType val;
public:
    v2short() = default;
    template <typename DataType, int E> v2short(const VBitVector<DataType, E>& a) : val(a) {}
    v2short(const VBitWrapper& a) : val(a) {}
    template <int B, bool S> v2short(const VBit<B, S>& a) : val(a) {}
    // backwards compatibility api
    tzscale_BT::BT__sshort& elem(int i) { return val.elem(i); }
    const tzscale_BT::BT__sshort& elem(int i) const { return val.elem(i); }
    void elem(int i, const tzscale_BT::BT__sshort& a) { val.elem(i, a); }
    handle value() { return val.value(); }
    handle value() const { return val.value(); }
    void value(unsigned long long a) { val = a; }
    unsigned long long to_unsigned() const { unsigned long long tmp[(bits + 63) / 64]; val.to_unsigned(tmp); return tmp[0]; }
    long long to_signed() const { long long tmp[(bits + 63) / 64]; val.to_signed(tmp); return tmp[0]; }
    friend std::ostream& operator<<(std::ostream& os, const v2short& x) { os << x.val; return os; }
    friend std::istream& operator>>(std::istream& is, v2short& x) { is >> x.val; return is; }
    tzscale_BT::BT__sshort& getElement(int i) { return elem(i); }
    const tzscale_BT::BT__sshort& getElement(int i) const { return elem(i); }
    void putElement(const tzscale_BT::BT__sshort& a, int i) { elem(i, a); }
public:
    v2short(int);
};
inline const v2short::BitType& toBitType(const v2short& v) { return v.val; }

//  Application types (additional)

#ifndef do_not_generate_additional_appl_types /*trouble-shooting hook*/

namespace tzscale_primitive {
    struct dint {
        unsigned low;
        unsigned high;
        typedef VBit<64, false> BitType;
    };
}

typedef struct tzscale_primitive::dint float64;

typedef unsigned float32;

#endif /*do_not_generate_additional_appl_types*/


//  Conversions

inline v2short::v2short(int a)           { val = a; }

inline int as_int32(float a)            { return dbl2expo(a,32,2,8,3,0,0,0); }
inline float as_float(int a)            { return expo2dbl(a,32,2,8,3,0,0,0); }
inline long long as_int64(double a)     { return dbl2expo(a,64,2,11,3,0,0,0); }
inline double as_double(long long a)    { return expo2dbl(a,64,2,11,3,0,0,0); }

//  Operations

//TBD

//  Chess_message hook for printing text between chess_reports (native only)

#define chess_message(msg) std::cout << msg << std::endl


#ifndef do_not_generate_chess_assert /*trouble-shooting hook*/

//  Chess_assert ancillary functions (native emulating ISS)

#define chess_assert(val)  (void)(chess_assert_(val)||chess_assert_msg(__FILE__,__LINE__))

inline int chess_assert_msg(const char* file, int line) {
    std::cout.flush();
    std::cerr << "ERROR Assertion failed in \"" << file << "\", line " << line << '.' << std::endl;
    return 0;
}

//  Overloaded chess_assert functions (allow to assert types without operator bool())

inline int chess_assert_(bool a) {
  return a != 0 ? 1 : 0;
}
inline int chess_assert_(char a) {
  return a != 0 ? 1 : 0;
}
inline int chess_assert_(signed char a) {
  return a != 0 ? 1 : 0;
}
inline int chess_assert_(unsigned char a) {
  return a != 0 ? 1 : 0;
}
inline int chess_assert_(short a) {
  return a != 0 ? 1 : 0;
}
inline int chess_assert_(unsigned short a) {
  return a != 0 ? 1 : 0;
}
inline int chess_assert_(int a) {
  return a != 0 ? 1 : 0;
}
inline int chess_assert_(unsigned a) {
  return a != 0 ? 1 : 0;
}
inline int chess_assert_(long a) {
  return a != 0 ? 1 : 0;
}
inline int chess_assert_(unsigned long a) {
  return a != 0 ? 1 : 0;
}
inline int chess_assert_(long long a) {
  return a != 0 ? 1 : 0;
}
inline int chess_assert_(unsigned long long a) {
  return a != 0 ? 1 : 0;
}
inline int chess_assert_(float a) {
  return a != 0 ? 1 : 0;
}
inline int chess_assert_(double a) {
  return a != 0 ? 1 : 0;
}
inline int chess_assert_(long double a) {
  return a != 0 ? 1 : 0;
}
inline int chess_assert_(const volatile void* a) {
  return a != 0 ? 1 : 0;
}
inline int chess_assert_(tzscale_primitive::w08 a) {
  return toVBit(a) != 0 ? 1 : 0;
}
inline int chess_assert_(tzscale_primitive::w16 a) {
  return toVBit(a) != 0 ? 1 : 0;
}
inline int chess_assert_(tzscale_primitive::w32 a) {
  return toVBit(a) != 0 ? 1 : 0;
}
inline int chess_assert_(tzscale_primitive::addr a) {
  return toVBit(a) != 0 ? 1 : 0;
}
inline int chess_assert_(tzscale_primitive::iword a) {
  return toVBit(a) != 0 ? 1 : 0;
}
inline int chess_assert_(tzscale_primitive::uint1 a) {
  return toVBit(a) != 0 ? 1 : 0;
}
inline int chess_assert_(tzscale_primitive::uint3 a) {
  return toVBit(a) != 0 ? 1 : 0;
}
inline int chess_assert_(tzscale_primitive::uint4 a) {
  return toVBit(a) != 0 ? 1 : 0;
}
inline int chess_assert_(tzscale_primitive::uint5 a) {
  return toVBit(a) != 0 ? 1 : 0;
}
inline int chess_assert_(tzscale_primitive::uint5nz a) {
  return toVBit(a) != 0 ? 1 : 0;
}
inline int chess_assert_(tzscale_primitive::uint6_1_31 a) {
  return toVBit(a) != 0 ? 1 : 0;
}
inline int chess_assert_(tzscale_primitive::uint7s4 a) {
  return toVBit(a) != 0 ? 1 : 0;
}
inline int chess_assert_(tzscale_primitive::uint8 a) {
  return toVBit(a) != 0 ? 1 : 0;
}
inline int chess_assert_(tzscale_primitive::uint8s4 a) {
  return toVBit(a) != 0 ? 1 : 0;
}
inline int chess_assert_(tzscale_primitive::uint10nz4 a) {
  return toVBit(a) != 0 ? 1 : 0;
}
inline int chess_assert_(tzscale_primitive::uint12 a) {
  return toVBit(a) != 0 ? 1 : 0;
}
inline int chess_assert_(tzscale_primitive::uint16 a) {
  return toVBit(a) != 0 ? 1 : 0;
}
inline int chess_assert_(tzscale_primitive::int3 a) {
  return toVBit(a) != 0 ? 1 : 0;
}
inline int chess_assert_(tzscale_primitive::int5 a) {
  return toVBit(a) != 0 ? 1 : 0;
}
inline int chess_assert_(tzscale_primitive::int6n a) {
  return toVBit(a) != 0 ? 1 : 0;
}
inline int chess_assert_(tzscale_primitive::int6p a) {
  return toVBit(a) != 0 ? 1 : 0;
}
inline int chess_assert_(tzscale_primitive::int6 a) {
  return toVBit(a) != 0 ? 1 : 0;
}
inline int chess_assert_(tzscale_primitive::int9s2 a) {
  return toVBit(a) != 0 ? 1 : 0;
}
inline int chess_assert_(tzscale_primitive::int10ns16 a) {
  return toVBit(a) != 0 ? 1 : 0;
}
inline int chess_assert_(tzscale_primitive::int10ps16 a) {
  return toVBit(a) != 0 ? 1 : 0;
}
inline int chess_assert_(tzscale_primitive::int12 a) {
  return toVBit(a) != 0 ? 1 : 0;
}
inline int chess_assert_(tzscale_primitive::int12s2 a) {
  return toVBit(a) != 0 ? 1 : 0;
}
inline int chess_assert_(tzscale_primitive::int13s2 a) {
  return toVBit(a) != 0 ? 1 : 0;
}
inline int chess_assert_(tzscale_primitive::int16 a) {
  return toVBit(a) != 0 ? 1 : 0;
}
inline int chess_assert_(tzscale_primitive::int20 a) {
  return toVBit(a) != 0 ? 1 : 0;
}
inline int chess_assert_(tzscale_primitive::int20p a) {
  return toVBit(a) != 0 ? 1 : 0;
}
inline int chess_assert_(tzscale_primitive::int21s2 a) {
  return toVBit(a) != 0 ? 1 : 0;
}
inline int chess_assert_(tzscale_primitive::int26 a) {
  return toVBit(a) != 0 ? 1 : 0;
}
inline int chess_assert_(tzscale_primitive::v4uint1 a) {
  return toVBit(a) != 0 ? 1 : 0;
}
inline int chess_assert_(tzscale_primitive::v4uint8 a) {
  return toVBit(a) != 0 ? 1 : 0;
}
inline int chess_assert_(v2short a) {
  return toVBit(a) != 0 ? 1 : 0;
}
inline int chess_assert_(tzscale_BT::BT__sshort a) {
  return toVBit(a) != 0 ? 1 : 0;
}

#endif /*!do_not_generate_chess_assert*/


#ifndef do_not_generate_chess_report /*trouble-shooting hook*/

//  Chess_report ancillary functions (common to ISS and native)

inline void chess_report_hex(int bits, long long val, std::ostream& os) {
    auto flags(os.flags());
    os << " 0x" << std::hex << std::setfill('0') << std::setw((bits+3)/4) << CHESS_MASKLL(val,bits);
    os.flags(flags);
}
inline void chess_report_signed  (long long  val, std::ostream& os) {
    auto flags(os.flags());
    os << ' ' << std::dec << val;
    os.flags(flags);
}
inline void chess_report_unsigned(unsigned long long val, std::ostream& os) {
    auto flags(os.flags());
    os << ' ' << std::dec << val;
    os.flags(flags);
}
inline void chess_report_expo(int prc, double val, std::ostream& os) {
    auto flags(os.flags());
    os << ' ' << std::scientific << std::setprecision(prc) << val;
    os.flags(flags);
}

//  Overloaded chess_report functions

inline void chess_report(bool a) {
    std::ostream& os = std::cout;
    os << "chess_report(bool):";
    chess_report_hex(1, a, os);
    os << " //";
    chess_report_unsigned(a, os);
    os << std::endl;
}
inline void chess_report(char a) {
    std::ostream& os = std::cout;
    os << "chess_report(char):";
    chess_report_hex(8, a, os);
    os << " //";
    chess_report_signed(a, os);
    os << std::endl;
}
inline void chess_report(signed char a) {
    std::ostream& os = std::cout;
    os << "chess_report(signed char):";
    chess_report_hex(8, a, os);
    os << " //";
    chess_report_signed(a, os);
    os << std::endl;
}
inline void chess_report(unsigned char a) {
    std::ostream& os = std::cout;
    os << "chess_report(unsigned char):";
    chess_report_hex(8, a, os);
    os << " //";
    chess_report_unsigned(a, os);
    os << std::endl;
}
inline void chess_report(short a) {
    std::ostream& os = std::cout;
    os << "chess_report(short):";
    chess_report_hex(16, a, os);
    os << " //";
    chess_report_signed(a, os);
    os << std::endl;
}
inline void chess_report(unsigned short a) {
    std::ostream& os = std::cout;
    os << "chess_report(unsigned short):";
    chess_report_hex(16, a, os);
    os << " //";
    chess_report_unsigned(a, os);
    os << std::endl;
}
inline void chess_report(int a) {
    std::ostream& os = std::cout;
    os << "chess_report(int):";
    chess_report_hex(32, a, os);
    os << " //";
    chess_report_signed(a, os);
    os << std::endl;
}
inline void chess_report(unsigned a) {
    std::ostream& os = std::cout;
    os << "chess_report(unsigned):";
    chess_report_hex(32, a, os);
    os << " //";
    chess_report_unsigned(a, os);
    os << std::endl;
}
inline void chess_report(long a) {
    std::ostream& os = std::cout;
    os << "chess_report(long):";
    chess_report_hex(32, a, os);
    os << " //";
    chess_report_signed(a, os);
    os << std::endl;
}
inline void chess_report(unsigned long a) {
    std::ostream& os = std::cout;
    os << "chess_report(unsigned long):";
    chess_report_hex(32, a, os);
    os << " //";
    chess_report_unsigned(a, os);
    os << std::endl;
}
inline void chess_report(long long a) {
    std::ostream& os = std::cout;
    os << "chess_report(long long):";
    chess_report_hex(64, a, os);
    os << " //";
    chess_report_signed(a, os);
    os << std::endl;
}
inline void chess_report(unsigned long long a) {
    std::ostream& os = std::cout;
    os << "chess_report(unsigned long long):";
    chess_report_hex(64, a, os);
    os << " //";
    chess_report_unsigned(a, os);
    os << std::endl;
}
inline void chess_report(float a) {
    std::ostream& os = std::cout;
    os << "chess_report(float):";
    chess_report_hex(32, dbl2expo(a,32,2,8,3,0,0,0), os);
    os << " //";
    chess_report_expo(7, a, os);
    os << std::endl;
}
inline void chess_report(double a) {
    std::ostream& os = std::cout;
    os << "chess_report(double):";
    chess_report_hex(64, dbl2expo(a,64,2,11,3,0,0,0), os);
    os << " //";
    chess_report_expo(16, a, os);
    os << std::endl;
}
inline void chess_report(long double a) {
    std::ostream& os = std::cout;
    os << "chess_report(long double):";
    chess_report_hex(64, dbl2expo(a,64,2,11,3,0,0,0), os);
    os << " //";
    chess_report_expo(16, a, os);
    os << std::endl;
}
inline void chess_report(const volatile void* a) {
    std::ostream& os = std::cout;
    os << "chess_report(void*):";
    chess_report_hex(sizeof(void*)*8/*no mask*/, (unsigned long long)a, os);
    os << " //";
    chess_report_unsigned((unsigned long long)a, os);
    os << std::endl;
}
inline void chess_report(tzscale_primitive::w08 a) {
    std::ostream& os = std::cout;
    os << "chess_report(tzscale_primitive::w08):";
    chess_report_hex(8, toVBit(a).value(), os);
    os << " //";
    chess_report_signed(toVBit(a).value(), os);
    os << std::endl;
}
inline void chess_report(tzscale_primitive::w16 a) {
    std::ostream& os = std::cout;
    os << "chess_report(tzscale_primitive::w16):";
    chess_report_hex(16, toVBit(a).value(), os);
    os << " //";
    chess_report_signed(toVBit(a).value(), os);
    os << std::endl;
}
inline void chess_report(tzscale_primitive::w32 a) {
    std::ostream& os = std::cout;
    os << "chess_report(tzscale_primitive::w32):";
    chess_report_hex(32, toVBit(a).value(), os);
    os << " //";
    chess_report_signed(toVBit(a).value(), os);
    os << std::endl;
}
inline void chess_report(tzscale_primitive::addr a) {
    std::ostream& os = std::cout;
    os << "chess_report(tzscale_primitive::addr):";
    chess_report_hex(32, toVBit(a).value(), os);
    os << " //";
    chess_report_unsigned(toVBit(a).value(), os);
    os << std::endl;
}
inline void chess_report(tzscale_primitive::iword a) {
    std::ostream& os = std::cout;
    os << "chess_report(tzscale_primitive::iword):";
    chess_report_hex(32, toVBit(a).value(), os);
    os << " //";
    chess_report_unsigned(toVBit(a).value(), os);
    os << std::endl;
}
inline void chess_report(tzscale_primitive::uint1 a) {
    std::ostream& os = std::cout;
    os << "chess_report(tzscale_primitive::uint1):";
    chess_report_hex(1, toVBit(a).value(), os);
    os << " //";
    chess_report_unsigned(toVBit(a).value(), os);
    os << std::endl;
}
inline void chess_report(tzscale_primitive::uint3 a) {
    std::ostream& os = std::cout;
    os << "chess_report(tzscale_primitive::uint3):";
    chess_report_hex(3, toVBit(a).value(), os);
    os << " //";
    chess_report_unsigned(toVBit(a).value(), os);
    os << std::endl;
}
inline void chess_report(tzscale_primitive::uint4 a) {
    std::ostream& os = std::cout;
    os << "chess_report(tzscale_primitive::uint4):";
    chess_report_hex(4, toVBit(a).value(), os);
    os << " //";
    chess_report_unsigned(toVBit(a).value(), os);
    os << std::endl;
}
inline void chess_report(tzscale_primitive::uint5 a) {
    std::ostream& os = std::cout;
    os << "chess_report(tzscale_primitive::uint5):";
    chess_report_hex(5, toVBit(a).value(), os);
    os << " //";
    chess_report_unsigned(toVBit(a).value(), os);
    os << std::endl;
}
inline void chess_report(tzscale_primitive::uint5nz a) {
    std::ostream& os = std::cout;
    os << "chess_report(tzscale_primitive::uint5nz):";
    chess_report_hex(5, toVBit(a).value(), os);
    os << " //";
    chess_report_unsigned(toVBit(a).value(), os);
    os << std::endl;
}
inline void chess_report(tzscale_primitive::uint6_1_31 a) {
    std::ostream& os = std::cout;
    os << "chess_report(tzscale_primitive::uint6_1_31):";
    chess_report_hex(6, toVBit(a).value(), os);
    os << " //";
    chess_report_unsigned(toVBit(a).value(), os);
    os << std::endl;
}
inline void chess_report(tzscale_primitive::uint7s4 a) {
    std::ostream& os = std::cout;
    os << "chess_report(tzscale_primitive::uint7s4):";
    chess_report_hex(7, toVBit(a).value(), os);
    os << " //";
    chess_report_unsigned(toVBit(a).value(), os);
    os << std::endl;
}
inline void chess_report(tzscale_primitive::uint8 a) {
    std::ostream& os = std::cout;
    os << "chess_report(tzscale_primitive::uint8):";
    chess_report_hex(8, toVBit(a).value(), os);
    os << " //";
    chess_report_unsigned(toVBit(a).value(), os);
    os << std::endl;
}
inline void chess_report(tzscale_primitive::uint8s4 a) {
    std::ostream& os = std::cout;
    os << "chess_report(tzscale_primitive::uint8s4):";
    chess_report_hex(8, toVBit(a).value(), os);
    os << " //";
    chess_report_unsigned(toVBit(a).value(), os);
    os << std::endl;
}
inline void chess_report(tzscale_primitive::uint10nz4 a) {
    std::ostream& os = std::cout;
    os << "chess_report(tzscale_primitive::uint10nz4):";
    chess_report_hex(10, toVBit(a).value(), os);
    os << " //";
    chess_report_unsigned(toVBit(a).value(), os);
    os << std::endl;
}
inline void chess_report(tzscale_primitive::uint12 a) {
    std::ostream& os = std::cout;
    os << "chess_report(tzscale_primitive::uint12):";
    chess_report_hex(12, toVBit(a).value(), os);
    os << " //";
    chess_report_unsigned(toVBit(a).value(), os);
    os << std::endl;
}
inline void chess_report(tzscale_primitive::uint16 a) {
    std::ostream& os = std::cout;
    os << "chess_report(tzscale_primitive::uint16):";
    chess_report_hex(16, toVBit(a).value(), os);
    os << " //";
    chess_report_unsigned(toVBit(a).value(), os);
    os << std::endl;
}
inline void chess_report(tzscale_primitive::int3 a) {
    std::ostream& os = std::cout;
    os << "chess_report(tzscale_primitive::int3):";
    chess_report_hex(3, toVBit(a).value(), os);
    os << " //";
    chess_report_signed(toVBit(a).value(), os);
    os << std::endl;
}
inline void chess_report(tzscale_primitive::int5 a) {
    std::ostream& os = std::cout;
    os << "chess_report(tzscale_primitive::int5):";
    chess_report_hex(5, toVBit(a).value(), os);
    os << " //";
    chess_report_signed(toVBit(a).value(), os);
    os << std::endl;
}
inline void chess_report(tzscale_primitive::int6n a) {
    std::ostream& os = std::cout;
    os << "chess_report(tzscale_primitive::int6n):";
    chess_report_hex(6, toVBit(a).value(), os);
    os << " //";
    chess_report_signed(toVBit(a).value(), os);
    os << std::endl;
}
inline void chess_report(tzscale_primitive::int6p a) {
    std::ostream& os = std::cout;
    os << "chess_report(tzscale_primitive::int6p):";
    chess_report_hex(6, toVBit(a).value(), os);
    os << " //";
    chess_report_signed(toVBit(a).value(), os);
    os << std::endl;
}
inline void chess_report(tzscale_primitive::int6 a) {
    std::ostream& os = std::cout;
    os << "chess_report(tzscale_primitive::int6):";
    chess_report_hex(6, toVBit(a).value(), os);
    os << " //";
    chess_report_signed(toVBit(a).value(), os);
    os << std::endl;
}
inline void chess_report(tzscale_primitive::int9s2 a) {
    std::ostream& os = std::cout;
    os << "chess_report(tzscale_primitive::int9s2):";
    chess_report_hex(9, toVBit(a).value(), os);
    os << " //";
    chess_report_signed(toVBit(a).value(), os);
    os << std::endl;
}
inline void chess_report(tzscale_primitive::int10ns16 a) {
    std::ostream& os = std::cout;
    os << "chess_report(tzscale_primitive::int10ns16):";
    chess_report_hex(10, toVBit(a).value(), os);
    os << " //";
    chess_report_signed(toVBit(a).value(), os);
    os << std::endl;
}
inline void chess_report(tzscale_primitive::int10ps16 a) {
    std::ostream& os = std::cout;
    os << "chess_report(tzscale_primitive::int10ps16):";
    chess_report_hex(10, toVBit(a).value(), os);
    os << " //";
    chess_report_signed(toVBit(a).value(), os);
    os << std::endl;
}
inline void chess_report(tzscale_primitive::int12 a) {
    std::ostream& os = std::cout;
    os << "chess_report(tzscale_primitive::int12):";
    chess_report_hex(12, toVBit(a).value(), os);
    os << " //";
    chess_report_signed(toVBit(a).value(), os);
    os << std::endl;
}
inline void chess_report(tzscale_primitive::int12s2 a) {
    std::ostream& os = std::cout;
    os << "chess_report(tzscale_primitive::int12s2):";
    chess_report_hex(12, toVBit(a).value(), os);
    os << " //";
    chess_report_signed(toVBit(a).value(), os);
    os << std::endl;
}
inline void chess_report(tzscale_primitive::int13s2 a) {
    std::ostream& os = std::cout;
    os << "chess_report(tzscale_primitive::int13s2):";
    chess_report_hex(13, toVBit(a).value(), os);
    os << " //";
    chess_report_signed(toVBit(a).value(), os);
    os << std::endl;
}
inline void chess_report(tzscale_primitive::int16 a) {
    std::ostream& os = std::cout;
    os << "chess_report(tzscale_primitive::int16):";
    chess_report_hex(16, toVBit(a).value(), os);
    os << " //";
    chess_report_signed(toVBit(a).value(), os);
    os << std::endl;
}
inline void chess_report(tzscale_primitive::int20 a) {
    std::ostream& os = std::cout;
    os << "chess_report(tzscale_primitive::int20):";
    chess_report_hex(20, toVBit(a).value(), os);
    os << " //";
    chess_report_signed(toVBit(a).value(), os);
    os << std::endl;
}
inline void chess_report(tzscale_primitive::int20p a) {
    std::ostream& os = std::cout;
    os << "chess_report(tzscale_primitive::int20p):";
    chess_report_hex(20, toVBit(a).value(), os);
    os << " //";
    chess_report_signed(toVBit(a).value(), os);
    os << std::endl;
}
inline void chess_report(tzscale_primitive::int21s2 a) {
    std::ostream& os = std::cout;
    os << "chess_report(tzscale_primitive::int21s2):";
    chess_report_hex(21, toVBit(a).value(), os);
    os << " //";
    chess_report_signed(toVBit(a).value(), os);
    os << std::endl;
}
inline void chess_report(tzscale_primitive::int26 a) {
    std::ostream& os = std::cout;
    os << "chess_report(tzscale_primitive::int26):";
    chess_report_hex(26, toVBit(a).value(), os);
    os << " //";
    chess_report_signed(toVBit(a).value(), os);
    os << std::endl;
}
inline void chess_report(tzscale_primitive::v4uint1 a) {
    std::ostream& os = std::cout;
    os << "chess_report(tzscale_primitive::v4uint1):";
    for (int i = 0; i < 4; i++) chess_report_hex(1, toVBit(a.elem(i)).value(), os);
    os << " //";
    for (int i = 0; i < 4; i++) chess_report_unsigned(toVBit(a.elem(i)).value(), os);
    os << std::endl;
}
inline void chess_report(tzscale_primitive::v4uint8 a) {
    std::ostream& os = std::cout;
    os << "chess_report(tzscale_primitive::v4uint8):";
    for (int i = 0; i < 4; i++) chess_report_hex(8, toVBit(a.elem(i)).value(), os);
    os << " //";
    for (int i = 0; i < 4; i++) chess_report_unsigned(toVBit(a.elem(i)).value(), os);
    os << std::endl;
}
inline void chess_report(v2short a) {
    std::ostream& os = std::cout;
    os << "chess_report(v2short):";
    for (int i = 0; i < 2; i++) chess_report_hex(16, toVBit(a.elem(i)).value(), os);
    os << " //";
    for (int i = 0; i < 2; i++) chess_report_signed(toVBit(a.elem(i)).value(), os);
    os << std::endl;
}
inline void chess_report(tzscale_BT::BT__sshort a) {
    std::ostream& os = std::cout;
    os << "chess_report(short):";
    chess_report_hex(16, toVBit(a).value(), os);
    os << " //";
    chess_report_signed(toVBit(a).value(), os);
    os << std::endl;
}

#endif /*!do_not_generate_chess_report*/


#ifndef do_not_generate_chess_cycle_count /*trouble-shooting hook*/

// stub, but with correct (largest suitable) return type on tzscale (may influence C++ overloading)
inline unsigned long long chess_cycle_count() { return 0; }

#endif /*!do_not_generate_chess_cycle_count*/


#ifndef do_not_generate_chess_return_address /*trouble-shooting hook*/

#if defined __GNUC__
#define chess_return_address() ((void*)__builtin_return_address(0))
#elif defined _WIN32
#include <intrin.h>
#pragma intrinsic(_ReturnAddress)
#define chess_return_address() ((void*)_ReturnAddress())
#else /*stub*/
#define chess_return_address() ((void*)0)
#endif

#endif /*!do_not_generate_chess_return_address*/


#ifndef do_not_generate_chess_stop_exit /*trouble-shooting hook*/

#include <stdlib.h>
#define chess_stop()  _Exit(0)

#define chess_exit(x) _Exit(x)

#endif /*!do_not_generate_chess_stop_exit*/


#ifndef do_not_generate_chess_dont_care /*trouble-shooting hook*/

#define chess_dont_care(T) chess_dont_care_<T>()
template<typename T>
T chess_dont_care_() { return T(); }
#endif /*!do_not_generate_chess_dont_care*/


#define chess_error(x) chess_stop()


#ifdef CHESS_NATIVE_NAMESPACE
} //namespace CHESS_NATIVE_NAMESPACE
#endif

#endif /*_tzscale_chess_types_h*/
