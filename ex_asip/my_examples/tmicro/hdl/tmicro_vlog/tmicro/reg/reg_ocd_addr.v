
// File generated by Go version O-2018.09#f5599cac26#190121, Tue May 28 10:45:21 2024
// Copyright 2014-2018 Synopsys, Inc. All rights reserved.
// go -B -I../lib -F -D__tct_patch__=300 -Verilog -otmicro_vlog -cgo_options.cfg -Itmicro_vlog/tmp_pdg -updg -updg_controller tmicro



`timescale 1ns/1ps

// module reg_ocd_addr : reg_ocd_addr
module reg_ocd_addr
  // synopsys translate_off
  #(parameter reg_log = 1'b1,
    parameter reg_log_name = "ocd_addr"
  )
  // synopsys translate_on
  ( input             clock,
    input             en_ocd_addr_pdcw_in, // std_logic
    input             ocd_incr_addr_in, // bool
    input             ocd_ld_DM_in, // bool
    input             ocd_ld_PM_in, // bool
    input             ocd_st_DM_in, // bool
    input             ocd_st_PM_in, // bool
    input      [15:0] ocd_addr_pdcw_in, // addr
    input      [15:0] ocd_addr_w_in, // addr
    output reg [15:0] ocd_addr_pdcr_out, // addr
    output reg [15:0] ocd_addr_r_out // addr
  );


  reg [15:0] reg_val;

  reg [15:0] reg_val_next;

  reg  reg_write_enab;


  // synopsys translate_off

  reg reg_write_log;
  reg old_reg_write_log;
  initial reg_write_log     = 1'b0;
  initial old_reg_write_log = 1'b0;

  always @ (negedge clock)
  begin : p_reg_ocd_addr_log


    if (reg_log)
    begin
      if (reg_write_log !=old_reg_write_log)
      begin
        $fdisplay(tmicro.inst_reg_PC.log_file, "%s = %0d", reg_log_name, reg_val);
      end
      old_reg_write_log <= reg_write_log;
    end
  end
  // synopsys translate_on

  always @ (*)
  begin : p_read_reg_ocd_addr

    // ocd_addr_pdcr_out = 0;
    ocd_addr_r_out = 0;

    // (ocd_addr_r_rd_ocd_addr_ocd_ld_DM_ID_alw, ocd_addr_r_rd_ocd_addr_ocd_ld_PM_ID_alw, ocd_addr_r_rd_ocd_addr_ocd_st_DM_ID_alw, ocd_addr_r_rd_ocd_addr_ocd_st_PM_ID_alw, ocd_addr_pdcr_rd_ocd_addr, ocd_addr_r_rd_ocd_addr_ocd_incr_addr_alw)
    if (ocd_ld_DM_in)
    begin
      // [ocd_if.n:28]
      ocd_addr_r_out = reg_val;
    end
    if (ocd_ld_PM_in)
    begin
      // [ocd_if.n:40]
      ocd_addr_r_out = reg_val;
    end
    if (ocd_st_DM_in)
    begin
      // [ocd_if.n:32]
      ocd_addr_r_out = reg_val;
    end
    if (ocd_st_PM_in)
    begin
      // [ocd_if.n:44]
      ocd_addr_r_out = reg_val;
    end
    ocd_addr_pdcr_out = reg_val;
    if (ocd_incr_addr_in)
    begin
      // [ocd_if.n:23]
      ocd_addr_r_out = reg_val;
    end

  end

  always @ (*)
  begin : p_write_combin_reg_ocd_addr

    reg_write_enab = 0;
    reg_val_next = 0;


    // (ocd_addr_wr_ocd_addr_w_ocd_incr_addr_alw, ocd_addr_wr_ocd_addr_pdcw)
    if (ocd_incr_addr_in)
    begin
      // [ocd_if.n:23]
      reg_write_enab = 1'b1;
      reg_val_next = ocd_addr_w_in;
    end
    if (en_ocd_addr_pdcw_in)
    begin
      reg_write_enab = 1'b1;
      reg_val_next = ocd_addr_pdcw_in;
    end

  end

  always @ (posedge clock)
  begin : p_write_reg_ocd_addr

    if (reg_write_enab)
    begin
      reg_val <= reg_val_next;
      // synopsys translate_off
      reg_write_log <= ~reg_write_log;
      // synopsys translate_on
    end
  end

endmodule
