
// File generated by noodle version O-2018.09#f5599cac26#190121, Tue May 28 10:41:29 2024
// Copyright 2014-2018 Synopsys, Inc. All rights reserved.
// noodle -Pc -B -Iisg +wisg -Iruntime/include -D__tct_patch__=300 -D__chess__ -D__programmers_view__ tmicro


// Summary of nil (conversion) operations:
//   :: conversion constructor
//   $$ promotion_conversion function
//  *   promotion derived equivalent
//  !   promotion derived identity
//  ~   indirect representation derived equivalent
//  =   indirect representation derived identity

word                        -->  addr                        :: /*primitive*/ addr::addr(word)
word                        -->  iword                       :: /*primitive*/ iword::iword(word)
addr                        -->  word                        :: /*primitive*/ word::word(addr)
addr                        -->  iword                      

int                         -->  addr                       !:: addr::addr(int)
int                         -->  unsigned                   !:: operator unsigned(int)
unsigned                    -->  int                        !:: operator int(unsigned)
int                         -->  void *                     !:: operator void *(int)
void *                      -->  int                        !:: operator int(void *)
unsigned                    -->  void *                     !:: operator void *(unsigned)
void *                      -->  unsigned                   !:: operator unsigned(void *)
long                        -->  unsigned long              !:: operator unsigned long(long)
unsigned long               -->  long                       !:: operator long(unsigned long)
int                         -->  char                       =:: operator char(int)
int                         -->  signed char                =:: operator signed char(int)
int                         -->  unsigned char              ~:: operator unsigned char(int)
int                         -->  short                      =:: operator short(int)
int                         -->  unsigned short             ~:: operator unsigned short(int)
int                         -->  unsigned                   ~:: operator unsigned(int)
unsigned                    -->  int                        ~:: operator int(unsigned)
void *                      -->  void chess_storage(DM) *   =:: operator void chess_storage(DM) *(void *)
unsigned char               -->  unsigned                   =:: operator unsigned(unsigned char)
unsigned char               -->  int                        ~:: operator int(unsigned char)
unsigned                    -->  unsigned char              =:: operator unsigned char(unsigned)
signed char                 -->  int                        =:: operator int(signed char)
unsigned short              -->  unsigned                   =:: operator unsigned(unsigned short)
unsigned short              -->  int                        ~:: operator int(unsigned short)
unsigned                    -->  unsigned short             =:: operator unsigned short(unsigned)
short                       -->  int                        =:: operator int(short)
unsigned                    -->  void *                     ~:: operator void *(unsigned)
void *                      -->  unsigned                   ~:: operator unsigned(void *)
unsigned short              -->  unsigned char              =:: operator unsigned char(unsigned short)
unsigned char               -->  signed char                ~:: operator signed char(unsigned char)
signed char                 -->  unsigned short             ~:: operator unsigned short(signed char)
signed char                 -->  unsigned                   ~:: operator unsigned(signed char)
unsigned short              -->  short                      ~:: operator short(unsigned short)
short                       -->  unsigned                   ~:: operator unsigned(short)
unsigned long               -->  long                       ~:: operator long(unsigned long)
unsigned char               -->  unsigned short             =:: operator unsigned short(unsigned char)
signed char                 -->  unsigned char              ~:: operator unsigned char(signed char)
short                       -->  unsigned short             ~:: operator unsigned short(short)
long                        -->  unsigned long              ~:: operator unsigned long(long)
void chess_storage(PM) *    -->  void *                     =:: operator void *(void chess_storage(PM) *)
void chess_storage(DM) *    -->  void *                     =:: operator void *(void chess_storage(DM) *)
void *                      -->  void chess_storage(PM) *   =:: operator void chess_storage(PM) *(void *)
void chess_storage(DM) *    -->  void chess_storage(PM) *   =:: operator void chess_storage(PM) *(void chess_storage(DM) *)
void chess_storage(PM) *    -->  void chess_storage(DM) *   =:: operator void chess_storage(DM) *(void chess_storage(PM) *)


// Promotion conversion path analysis: type T promotable on X and Y:
// all (non-excluded) paths must agree (if any, and if determinable).
// A value of type T when moved from X to Y may be
//    ==0==  right-aligned  [ incl. diagonal \\0\\ ]
//    << N   right-padded
//    >> N   right-truncated
//    <<?>>  path exists, alignment not determinable
//    UNFLD  unfoldable
//    NONE   no path found
//    ERROR  distinct paths found with inconsistent alignment

word            FROM\TO  word    addr    iword    |
      word          |    \\0\\   ==0==   ==0==    |
      addr          |    ==0==   \\0\\   ==0==    |
      iword         |    ==0==   ==0==   \\0\\    |

addr            FROM\TO  addr    word    iword    |
      addr          |    \\0\\   ==0==   ==0==    |
      word          |    ==0==   \\0\\   ==0==    |
      iword         |    ==0==   ==0==   \\0\\    |



// Constant subsuming types, using the smallest type
// - that contains the value (possibly `right padded');
// - that can be nil converted to the original type.

addr            <-- word 
iword           <-- word addr 
word            <-- addr 


