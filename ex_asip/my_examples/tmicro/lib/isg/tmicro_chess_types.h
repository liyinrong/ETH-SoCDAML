
// File generated by noodle version O-2018.09#f5599cac26#190121, Tue May 28 10:41:29 2024
// Copyright 2014-2018 Synopsys, Inc. All rights reserved.
// noodle -Pc -B -Iisg +wisg -Iruntime/include -D__tct_patch__=300 -D__chess__ -D__programmers_view__ tmicro

#ifdef __chess__
#error "generated native file not intended for compilation by chess"
#endif

// Native C++ types and functions

#ifndef _tmicro_chess_types_h
#define _tmicro_chess_types_h

#include "chess.h"
#include "vbit.h"

#include "tmicro_iss_types.h"

#ifdef CHESS_NATIVE_NAMESPACE
namespace CHESS_NATIVE_NAMESPACE {
#endif


//  Application types (declarations)

//  (none)



//  Built-in type wrappers (bit-true behaviour or used as vector element type)

namespace tmicro_BT {

//class BTbool /* std C conforming */

// fewer bits
class BT__sint
{
public:
    typedef VBit<16, true> BitType;
    static const int bits = BitType::bits;
    static const bool isSigned = BitType::isSigned;
    BitType val;
public:
    BT__sint() = default;
    template <int B, bool S> BT__sint(const VBit<B, S>& a) : val(a) {}
    BT__sint(const VBitWrapper& a) : val(a) {}
    template <typename DataType, int E> BT__sint(const VBitVector<DataType, E>& a) : val(a) {}
public:
    // backwards compatibility api
    BitType::ValueType& value() { return val.value(); }
    const BitType::ValueType& value() const { return val.value(); }
    void value(const BitType::ValueType& v) { val.value(v); }
    BT__sint(BitType::ValueType a) : val(a) {}
    BitType::UBaseType to_unsigned() const { return val.to_unsigned(); }
    BitType::SBaseType to_signed() const { return val.to_signed(); }
    friend std::ostream& operator<<(std::ostream& os, const BT__sint& x) { os << x.val; return os; }
    friend std::istream& operator>>(std::istream& is, BT__sint& x) { is >> x.val; return is; }
public:
    operator BitType::ValueType() const { return val.value(); }
    BT__sint& operator=(BitType::ValueType a) { val = a; return *this; }
    BT__sint& operator+=(const BT__sint& a) { val += a.val; return *this; }
    BT__sint& operator-=(const BT__sint& a) { val -= a.val; return *this; }
    BT__sint& operator*=(const BT__sint& a) { val *= a.val; return *this; }
    BT__sint& operator/=(const BT__sint& a) { val /= a.val; return *this; }
    BT__sint& operator%=(const BT__sint& a) { val %= a.val; return *this; }
    BT__sint& operator&=(const BT__sint& a) { val &= a.val; return *this; }
    BT__sint& operator|=(const BT__sint& a) { val |= a.val; return *this; }
    BT__sint& operator^=(const BT__sint& a) { val ^= a.val; return *this; }
    BT__sint& operator<<=(const int& a) { val <<= a; return *this; }
    BT__sint& operator>>=(const int& a) { val >>= a; return *this; }
    BT__sint& operator++() { ++val; return *this; }
    BT__sint operator++(int) { BT__sint i = *this; val++; return i; }
    BT__sint& operator--() { --val; return *this; }
    BT__sint operator--(int) { BT__sint i = *this; val--; return i; }
};
inline const BT__sint::BitType& toBitType(const BT__sint& v) { return v.val; }

// fewer bits
class BT__uint
{
public:
    typedef VBit<16, false> BitType;
    static const int bits = BitType::bits;
    static const bool isSigned = BitType::isSigned;
    BitType val;
public:
    BT__uint() = default;
    template <int B, bool S> BT__uint(const VBit<B, S>& a) : val(a) {}
    BT__uint(const VBitWrapper& a) : val(a) {}
    template <typename DataType, int E> BT__uint(const VBitVector<DataType, E>& a) : val(a) {}
public:
    // backwards compatibility api
    BitType::ValueType& value() { return val.value(); }
    const BitType::ValueType& value() const { return val.value(); }
    void value(const BitType::ValueType& v) { val.value(v); }
    BT__uint(BitType::ValueType a) : val(a) {}
    BitType::UBaseType to_unsigned() const { return val.to_unsigned(); }
    BitType::SBaseType to_signed() const { return val.to_signed(); }
    friend std::ostream& operator<<(std::ostream& os, const BT__uint& x) { os << x.val; return os; }
    friend std::istream& operator>>(std::istream& is, BT__uint& x) { is >> x.val; return is; }
public:
    operator BitType::ValueType() const { return val.value(); }
    BT__uint& operator=(BitType::ValueType a) { val = a; return *this; }
    BT__uint& operator+=(const BT__uint& a) { val += a.val; return *this; }
    BT__uint& operator-=(const BT__uint& a) { val -= a.val; return *this; }
    BT__uint& operator*=(const BT__uint& a) { val *= a.val; return *this; }
    BT__uint& operator/=(const BT__uint& a) { val /= a.val; return *this; }
    BT__uint& operator%=(const BT__uint& a) { val %= a.val; return *this; }
    BT__uint& operator&=(const BT__uint& a) { val &= a.val; return *this; }
    BT__uint& operator|=(const BT__uint& a) { val |= a.val; return *this; }
    BT__uint& operator^=(const BT__uint& a) { val ^= a.val; return *this; }
    BT__uint& operator<<=(const int& a) { val <<= a; return *this; }
    BT__uint& operator>>=(const int& a) { val >>= a; return *this; }
    BT__uint& operator++() { ++val; return *this; }
    BT__uint operator++(int) { BT__uint i = *this; val++; return i; }
    BT__uint& operator--() { --val; return *this; }
    BT__uint operator--(int) { BT__uint i = *this; val--; return i; }
};
inline const BT__uint::BitType& toBitType(const BT__uint& v) { return v.val; }

//class BT__slong /* std C conforming */

//class BT__ulong /* std C conforming */

//class BT__slonglong /* std C conforming */

//class BT__ulonglong /* std C conforming */

} //namespace tmicro_BT


//  Application types (definitions)

//  Application types (additional)

#ifndef do_not_generate_additional_appl_types /*trouble-shooting hook*/

namespace tmicro_primitive {
    struct dint {
        unsigned lo;
        unsigned hi;
        typedef VBit<32, false> BitType;
    };
}

namespace tmicro_primitive {
    struct dlong {
        unsigned long lo;
        unsigned long hi;
        typedef VBit<64, false> BitType;
    };
}

#endif /*do_not_generate_additional_appl_types*/


//  Conversions


//  Operations

//TBD

//  Chess_message hook for printing text between chess_reports (native only)

#define chess_message(msg) std::cout << msg << std::endl


#ifndef do_not_generate_chess_assert /*trouble-shooting hook*/

//  Chess_assert ancillary functions (native emulating ISS)

#define chess_assert(val)  (void)(chess_assert_(val)||chess_assert_msg(__FILE__,__LINE__))

inline int chess_assert_msg(const char* file, int line) {
    std::cout.flush();
    std::cerr << "ERROR Assertion failed in \"" << file << "\", line " << line << '.' << std::endl;
    return 0;
}

//  Overloaded chess_assert functions (allow to assert types without operator bool())

inline int chess_assert_(bool a) {
  return a != 0 ? 1 : 0;
}
inline int chess_assert_(char a) {
  return a != 0 ? 1 : 0;
}
inline int chess_assert_(signed char a) {
  return a != 0 ? 1 : 0;
}
inline int chess_assert_(unsigned char a) {
  return a != 0 ? 1 : 0;
}
inline int chess_assert_(short a) {
  return a != 0 ? 1 : 0;
}
inline int chess_assert_(unsigned short a) {
  return a != 0 ? 1 : 0;
}
inline int chess_assert_(int a) {
  return a != 0 ? 1 : 0;
}
inline int chess_assert_(unsigned a) {
  return a != 0 ? 1 : 0;
}
inline int chess_assert_(long a) {
  return a != 0 ? 1 : 0;
}
inline int chess_assert_(unsigned long a) {
  return a != 0 ? 1 : 0;
}
inline int chess_assert_(long long a) {
  return a != 0 ? 1 : 0;
}
inline int chess_assert_(unsigned long long a) {
  return a != 0 ? 1 : 0;
}
inline int chess_assert_(const volatile void* a) {
  return a != 0 ? 1 : 0;
}
inline int chess_assert_(tmicro_primitive::word a) {
  return toVBit(a) != 0 ? 1 : 0;
}
inline int chess_assert_(tmicro_primitive::addr a) {
  return toVBit(a) != 0 ? 1 : 0;
}
inline int chess_assert_(tmicro_primitive::nint9 a) {
  return toVBit(a) != 0 ? 1 : 0;
}
inline int chess_assert_(tmicro_primitive::sbyte a) {
  return toVBit(a) != 0 ? 1 : 0;
}
inline int chess_assert_(tmicro_primitive::ubyte a) {
  return toVBit(a) != 0 ? 1 : 0;
}
inline int chess_assert_(tmicro_primitive::uint1 a) {
  return toVBit(a) != 0 ? 1 : 0;
}
inline int chess_assert_(tmicro_primitive::uint2 a) {
  return toVBit(a) != 0 ? 1 : 0;
}
inline int chess_assert_(tmicro_primitive::uint3 a) {
  return toVBit(a) != 0 ? 1 : 0;
}
inline int chess_assert_(tmicro_primitive::uint4 a) {
  return toVBit(a) != 0 ? 1 : 0;
}
inline int chess_assert_(tmicro_primitive::iword a) {
  return toVBit(a) != 0 ? 1 : 0;
}
inline int chess_assert_(tmicro_BT::BT__sint a) {
  return toVBit(a) != 0 ? 1 : 0;
}
inline int chess_assert_(tmicro_BT::BT__uint a) {
  return toVBit(a) != 0 ? 1 : 0;
}

#endif /*!do_not_generate_chess_assert*/


#ifndef do_not_generate_chess_report /*trouble-shooting hook*/

//  Chess_report ancillary functions (common to ISS and native)

inline void chess_report_hex(int bits, long long val, std::ostream& os) {
    auto flags(os.flags());
    os << " 0x" << std::hex << std::setfill('0') << std::setw((bits+3)/4) << CHESS_MASKLL(val,bits);
    os.flags(flags);
}
inline void chess_report_signed  (long long  val, std::ostream& os) {
    auto flags(os.flags());
    os << ' ' << std::dec << val;
    os.flags(flags);
}
inline void chess_report_unsigned(unsigned long long val, std::ostream& os) {
    auto flags(os.flags());
    os << ' ' << std::dec << val;
    os.flags(flags);
}

//  Overloaded chess_report functions

inline void chess_report(bool a) {
    std::ostream& os = std::cout;
    os << "chess_report(bool):";
    chess_report_hex(1, a, os);
    os << " //";
    chess_report_unsigned(a, os);
    os << std::endl;
}
inline void chess_report(char a) {
    std::ostream& os = std::cout;
    os << "chess_report(char):";
    chess_report_hex(16, a, os);
    os << " //";
    chess_report_signed(a, os);
    os << std::endl;
}
inline void chess_report(signed char a) {
    std::ostream& os = std::cout;
    os << "chess_report(signed char):";
    chess_report_hex(16, a, os);
    os << " //";
    chess_report_signed(a, os);
    os << std::endl;
}
inline void chess_report(unsigned char a) {
    std::ostream& os = std::cout;
    os << "chess_report(unsigned char):";
    chess_report_hex(16, a, os);
    os << " //";
    chess_report_unsigned(a, os);
    os << std::endl;
}
inline void chess_report(short a) {
    std::ostream& os = std::cout;
    os << "chess_report(short):";
    chess_report_hex(16, a, os);
    os << " //";
    chess_report_signed(a, os);
    os << std::endl;
}
inline void chess_report(unsigned short a) {
    std::ostream& os = std::cout;
    os << "chess_report(unsigned short):";
    chess_report_hex(16, a, os);
    os << " //";
    chess_report_unsigned(a, os);
    os << std::endl;
}
inline void chess_report(int a) {
    std::ostream& os = std::cout;
    os << "chess_report(int):";
    chess_report_hex(16, a, os);
    os << " //";
    chess_report_signed(a, os);
    os << std::endl;
}
inline void chess_report(unsigned a) {
    std::ostream& os = std::cout;
    os << "chess_report(unsigned):";
    chess_report_hex(16, a, os);
    os << " //";
    chess_report_unsigned(a, os);
    os << std::endl;
}
inline void chess_report(long a) {
    std::ostream& os = std::cout;
    os << "chess_report(long):";
    chess_report_hex(32, a, os);
    os << " //";
    chess_report_signed(a, os);
    os << std::endl;
}
inline void chess_report(unsigned long a) {
    std::ostream& os = std::cout;
    os << "chess_report(unsigned long):";
    chess_report_hex(32, a, os);
    os << " //";
    chess_report_unsigned(a, os);
    os << std::endl;
}
inline void chess_report(long long a) {
    std::ostream& os = std::cout;
    os << "chess_report(long long):";
    chess_report_hex(64, a, os);
    os << " //";
    chess_report_signed(a, os);
    os << std::endl;
}
inline void chess_report(unsigned long long a) {
    std::ostream& os = std::cout;
    os << "chess_report(unsigned long long):";
    chess_report_hex(64, a, os);
    os << " //";
    chess_report_unsigned(a, os);
    os << std::endl;
}
inline void chess_report(const volatile void* a) {
    std::ostream& os = std::cout;
    os << "chess_report(void*):";
    chess_report_hex(sizeof(void*)*8/*no mask*/, (unsigned long long)a, os);
    os << " //";
    chess_report_unsigned((unsigned long long)a, os);
    os << std::endl;
}
inline void chess_report(tmicro_primitive::word a) {
    std::ostream& os = std::cout;
    os << "chess_report(tmicro_primitive::word):";
    chess_report_hex(16, toVBit(a).value(), os);
    os << " //";
    chess_report_signed(toVBit(a).value(), os);
    os << std::endl;
}
inline void chess_report(tmicro_primitive::addr a) {
    std::ostream& os = std::cout;
    os << "chess_report(tmicro_primitive::addr):";
    chess_report_hex(16, toVBit(a).value(), os);
    os << " //";
    chess_report_unsigned(toVBit(a).value(), os);
    os << std::endl;
}
inline void chess_report(tmicro_primitive::nint9 a) {
    std::ostream& os = std::cout;
    os << "chess_report(tmicro_primitive::nint9):";
    chess_report_hex(9, toVBit(a).value(), os);
    os << " //";
    chess_report_signed(toVBit(a).value(), os);
    os << std::endl;
}
inline void chess_report(tmicro_primitive::sbyte a) {
    std::ostream& os = std::cout;
    os << "chess_report(tmicro_primitive::sbyte):";
    chess_report_hex(8, toVBit(a).value(), os);
    os << " //";
    chess_report_signed(toVBit(a).value(), os);
    os << std::endl;
}
inline void chess_report(tmicro_primitive::ubyte a) {
    std::ostream& os = std::cout;
    os << "chess_report(tmicro_primitive::ubyte):";
    chess_report_hex(8, toVBit(a).value(), os);
    os << " //";
    chess_report_unsigned(toVBit(a).value(), os);
    os << std::endl;
}
inline void chess_report(tmicro_primitive::uint1 a) {
    std::ostream& os = std::cout;
    os << "chess_report(tmicro_primitive::uint1):";
    chess_report_hex(1, toVBit(a).value(), os);
    os << " //";
    chess_report_unsigned(toVBit(a).value(), os);
    os << std::endl;
}
inline void chess_report(tmicro_primitive::uint2 a) {
    std::ostream& os = std::cout;
    os << "chess_report(tmicro_primitive::uint2):";
    chess_report_hex(2, toVBit(a).value(), os);
    os << " //";
    chess_report_unsigned(toVBit(a).value(), os);
    os << std::endl;
}
inline void chess_report(tmicro_primitive::uint3 a) {
    std::ostream& os = std::cout;
    os << "chess_report(tmicro_primitive::uint3):";
    chess_report_hex(3, toVBit(a).value(), os);
    os << " //";
    chess_report_unsigned(toVBit(a).value(), os);
    os << std::endl;
}
inline void chess_report(tmicro_primitive::uint4 a) {
    std::ostream& os = std::cout;
    os << "chess_report(tmicro_primitive::uint4):";
    chess_report_hex(4, toVBit(a).value(), os);
    os << " //";
    chess_report_unsigned(toVBit(a).value(), os);
    os << std::endl;
}
inline void chess_report(tmicro_primitive::iword a) {
    std::ostream& os = std::cout;
    os << "chess_report(tmicro_primitive::iword):";
    chess_report_hex(16, toVBit(a).value(), os);
    os << " //";
    chess_report_unsigned(toVBit(a).value(), os);
    os << std::endl;
}
inline void chess_report(tmicro_BT::BT__sint a) {
    std::ostream& os = std::cout;
    os << "chess_report(int):";
    chess_report_hex(16, toVBit(a).value(), os);
    os << " //";
    chess_report_signed(toVBit(a).value(), os);
    os << std::endl;
}
inline void chess_report(tmicro_BT::BT__uint a) {
    std::ostream& os = std::cout;
    os << "chess_report(unsigned):";
    chess_report_hex(16, toVBit(a).value(), os);
    os << " //";
    chess_report_unsigned(toVBit(a).value(), os);
    os << std::endl;
}

#endif /*!do_not_generate_chess_report*/


#ifndef do_not_generate_chess_cycle_count /*trouble-shooting hook*/

// stub, but with correct (largest suitable) return type on tmicro (may influence C++ overloading)
inline unsigned long chess_cycle_count() { return 0; }

#endif /*!do_not_generate_chess_cycle_count*/


#ifndef do_not_generate_chess_return_address /*trouble-shooting hook*/

#if defined __GNUC__
#define chess_return_address() ((void*)__builtin_return_address(0))
#elif defined _WIN32
#include <intrin.h>
#pragma intrinsic(_ReturnAddress)
#define chess_return_address() ((void*)_ReturnAddress())
#else /*stub*/
#define chess_return_address() ((void*)0)
#endif

#endif /*!do_not_generate_chess_return_address*/


#ifndef do_not_generate_chess_stop_exit /*trouble-shooting hook*/

#include <stdlib.h>
#define chess_stop()  _Exit(0)

#define chess_exit(x) _Exit(x)

#endif /*!do_not_generate_chess_stop_exit*/


#ifndef do_not_generate_chess_dont_care /*trouble-shooting hook*/

#define chess_dont_care(T) chess_dont_care_<T>()
template<typename T>
T chess_dont_care_() { return T(); }
#endif /*!do_not_generate_chess_dont_care*/


#define chess_error(x) chess_stop()


#ifdef CHESS_NATIVE_NAMESPACE
} //namespace CHESS_NATIVE_NAMESPACE
#endif

#endif /*_tmicro_chess_types_h*/
