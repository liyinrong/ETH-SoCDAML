
// File generated by noodle version O-2018.09#f5599cac26#190121, Tue May 28 10:41:37 2024
// Copyright 2014-2018 Synopsys, Inc. All rights reserved.
// noodle -B -I.. -I../isg -I../runtime/include -D__tct_patch__=300 -itmicro_chess.h +wlib/Release/chesswork src/stdio.c +Q0=+Sal,+Sca,+Osps,+NOtcr,+NOrle tmicro

toolrelease _18R3;

// int remove(const char *)
Fremove : user_defined, called {
    fnm : "remove" 'int remove(const char *)'; 
    arg : ( addr:i word:r addr:i );
    loc : ( LR[0] R[0] R[1] );
    frm : ( l=18 );
    llv : 0 0 0 0 0 ;
}

// int rename(const char *, const char *)
Frename : user_defined, called {
    fnm : "rename" 'int rename(const char *, const char *)'; 
    arg : ( addr:i word:r addr:i addr:i );
    loc : ( LR[0] R[0] R[1] R[2] );
    frm : ( l=18 );
    llv : 0 0 0 0 0 ;
}

// FILE *tmpfile()
Ftmpfile : user_defined, called {
    fnm : "tmpfile" 'FILE *tmpfile()'; 
    arg : ( addr:i addr:r );
    loc : ( LR[0] R[0] );
    frm : ( l=18 );
    llv : 0 0 0 0 0 ;
}

// int mkstemp(char *)
Fmkstemp : user_defined, called {
    fnm : "mkstemp" 'int mkstemp(char *)'; 
    arg : ( addr:i word:r addr:i );
    loc : ( LR[0] R[0] R[1] );
    frm : ( l=18 );
    llv : 0 0 0 0 0 ;
}

// FILE *fdopen(int, const char *)
Ffdopen : user_defined, called {
    fnm : "fdopen" 'FILE *fdopen(int, const char *)'; 
    arg : ( addr:i addr:r word:i addr:i );
    loc : ( LR[0] R[0] R[1] R[2] );
    frm : ( l=18 );
    llv : 0 0 0 0 0 ;
}

// int close(int)
Fclose : user_defined, called {
    fnm : "close" 'int close(int)'; 
    arg : ( addr:i word:r word:i );
    loc : ( LR[0] R[0] R[1] );
    frm : ( l=18 );
    llv : 0 0 0 0 0 ;
}

// FILE *fopen(const char *, const char *)
Ffopen : user_defined, called {
    fnm : "fopen" 'FILE *fopen(const char *, const char *)'; 
    arg : ( addr:i addr:r addr:i addr:i );
    loc : ( LR[0] R[0] R[1] R[2] );
    frm : ( l=18 );
    llv : 0 0 0 0 0 ;
}

// int fclose(FILE *)
Ffclose : user_defined, called {
    fnm : "fclose" 'int fclose(FILE *)'; 
    arg : ( addr:i word:r addr:i );
    loc : ( LR[0] R[0] R[1] );
    frm : ( l=18 );
    llv : 0 0 0 0 0 ;
}

// int fflush(FILE *)
Ffflush : user_defined, called {
    fnm : "fflush" 'int fflush(FILE *)'; 
    arg : ( addr:i word:r addr:i );
    loc : ( LR[0] R[0] R[1] );
    frm : ( l=18 );
    llv : 0 0 0 0 0 ;
}

// FILE *freopen(const char *, const char *, FILE *)
Ffreopen : user_defined, called {
    fnm : "freopen" 'FILE *freopen(const char *, const char *, FILE *)'; 
    arg : ( addr:i addr:r addr:i addr:i addr:i );
    loc : ( LR[0] R[0] R[1] R[2] R[3] );
    frm : ( l=18 );
    llv : 0 0 0 0 0 ;
}

// int vfprintf(FILE *, const char *, va_list)
Fvfprintf : user_defined, called {
    fnm : "vfprintf" 'int vfprintf(FILE *, const char *, va_list)'; 
    arg : ( addr:i word:r addr:i addr:i addr:i );
    loc : ( LR[0] R[0] R[1] R[2] R[3] );
    frm : ( l=18 );
    llv : 0 0 0 0 0 ;
}

// int fprintf(FILE *, const char *, ...)
Ffprintf : user_defined, called {
    fnm : "fprintf" 'int fprintf(FILE *, const char *, ...)'; 
    arg : ( addr:i word:r addr:i addr:i );
    loc : ( LR[0] R[0] R[1] R[2] );
    frm : ( l=18 );
    llv : 0 0 0 0 0 ;
}

// int printf(const char *, ...)
Fprintf : user_defined, called {
    fnm : "printf" 'int printf(const char *, ...)'; 
    arg : ( addr:i word:r addr:i );
    loc : ( LR[0] R[0] R[1] );
    frm : ( );
    llv : 0 0 0 0 0 ;
}

// int vfscanf(FILE *, const char *, va_list)
Fvfscanf : user_defined, called {
    fnm : "vfscanf" 'int vfscanf(FILE *, const char *, va_list)'; 
    arg : ( addr:i word:r addr:i addr:i addr:i );
    loc : ( LR[0] R[0] R[1] R[2] R[3] );
    frm : ( l=18 );
    llv : 0 0 0 0 0 ;
}

// int fscanf(FILE *, const char *, ...)
Ffscanf : user_defined, called {
    fnm : "fscanf" 'int fscanf(FILE *, const char *, ...)'; 
    arg : ( addr:i word:r addr:i addr:i );
    loc : ( LR[0] R[0] R[1] R[2] );
    frm : ( l=18 );
    llv : 0 0 0 0 0 ;
}

// int scanf(const char *, ...)
Fscanf : user_defined, called {
    fnm : "scanf" 'int scanf(const char *, ...)'; 
    arg : ( addr:i word:r addr:i );
    loc : ( LR[0] R[0] R[1] );
    frm : ( );
    llv : 0 0 0 0 0 ;
}

// int sprintf(char *, const char *, ...)
Fsprintf : user_defined, called {
    fnm : "sprintf" 'int sprintf(char *, const char *, ...)'; 
    arg : ( addr:i word:r addr:i addr:i );
    loc : ( LR[0] R[0] R[1] R[2] );
    frm : ( l=18 );
    llv : 0 0 0 0 0 ;
}

// int snprintf(char *, size_t, const char *, ...)
Fsnprintf : user_defined, called {
    fnm : "snprintf" 'int snprintf(char *, size_t, const char *, ...)'; 
    arg : ( addr:i word:r addr:i word:i addr:i );
    loc : ( LR[0] R[0] R[1] R[2] R[3] );
    frm : ( l=18 );
    llv : 0 0 0 0 0 ;
}

// int vsprintf(char *, const char *, va_list)
Fvsprintf : user_defined, called {
    fnm : "vsprintf" 'int vsprintf(char *, const char *, va_list)'; 
    arg : ( addr:i word:r addr:i addr:i addr:i );
    loc : ( LR[0] R[0] R[1] R[2] R[3] );
    frm : ( l=18 );
    llv : 0 0 0 0 0 ;
}

// int vsnprintf(char *, size_t, const char *, va_list)
Fvsnprintf : user_defined, called {
    fnm : "vsnprintf" 'int vsnprintf(char *, size_t, const char *, va_list)'; 
    arg : ( addr:i word:r addr:i word:i addr:i addr:i );
    loc : ( LR[0] R[0] R[1] R[2] R[3] R[4] );
    frm : ( l=18 );
    llv : 0 0 0 0 0 ;
}

// int sscanf(const char *, const char *, ...)
Fsscanf : user_defined, called {
    fnm : "sscanf" 'int sscanf(const char *, const char *, ...)'; 
    arg : ( addr:i word:r addr:i addr:i );
    loc : ( LR[0] R[0] R[1] R[2] );
    frm : ( l=18 );
    llv : 0 0 0 0 0 ;
}

// int vsscanf(const char *, const char *, va_list)
Fvsscanf : user_defined, called {
    fnm : "vsscanf" 'int vsscanf(const char *, const char *, va_list)'; 
    arg : ( addr:i word:r addr:i addr:i addr:i );
    loc : ( LR[0] R[0] R[1] R[2] R[3] );
    frm : ( l=18 );
    llv : 0 0 0 0 0 ;
}

// int fputc(int, FILE *)
Ffputc : user_defined, called {
    fnm : "fputc" 'int fputc(int, FILE *)'; 
    arg : ( addr:i word:r word:i addr:i );
    loc : ( LR[0] R[0] R[1] R[2] );
    frm : ( l=18 );
    llv : 0 0 0 0 0 ;
}

// int fputs(const char *, FILE *)
Ffputs : user_defined, called {
    fnm : "fputs" 'int fputs(const char *, FILE *)'; 
    arg : ( addr:i word:r addr:i addr:i );
    loc : ( LR[0] R[0] R[1] R[2] );
    frm : ( l=18 );
    llv : 0 0 0 0 0 ;
}

// int fgetc(FILE *)
Ffgetc : user_defined, called {
    fnm : "fgetc" 'int fgetc(FILE *)'; 
    arg : ( addr:i word:r addr:i );
    loc : ( LR[0] R[0] R[1] );
    frm : ( l=18 );
    llv : 0 0 0 0 0 ;
}

// char *fgets(char *, int, FILE *)
Ffgets : user_defined, called {
    fnm : "fgets" 'char *fgets(char *, int, FILE *)'; 
    arg : ( addr:i addr:r addr:i word:i addr:i );
    loc : ( LR[0] R[0] R[1] R[2] R[3] );
    frm : ( l=18 );
    llv : 0 0 0 0 0 ;
}

// char *gets(char *)
Fgets : user_defined, called {
    fnm : "gets" 'char *gets(char *)'; 
    arg : ( addr:i addr:r addr:i );
    loc : ( LR[0] R[0] R[1] );
    frm : ( l=18 );
    llv : 0 0 0 0 0 ;
}

// int ungetc(int, FILE *)
Fungetc : user_defined, called {
    fnm : "ungetc" 'int ungetc(int, FILE *)'; 
    arg : ( addr:i word:r word:i addr:i );
    loc : ( LR[0] R[0] R[1] R[2] );
    frm : ( l=18 );
    llv : 0 0 0 0 0 ;
}

// size_t fwrite(const void chess_storage(DM) *, size_t, size_t, FILE *)
Ffwrite : user_defined, called {
    fnm : "fwrite" 'size_t fwrite(const void chess_storage(DM) *, size_t, size_t, FILE *)'; 
    arg : ( addr:i word:r addr:i word:i word:i addr:i );
    loc : ( LR[0] R[0] R[1] R[2] R[3] R[4] );
    frm : ( l=18 );
    llv : 0 0 0 0 0 ;
}

// size_t fread(void chess_storage(DM) *, size_t, size_t, FILE *)
Ffread : user_defined, called {
    fnm : "fread" 'size_t fread(void chess_storage(DM) *, size_t, size_t, FILE *)'; 
    arg : ( addr:i word:r addr:i word:i word:i addr:i );
    loc : ( LR[0] R[0] R[1] R[2] R[3] R[4] );
    frm : ( l=18 );
    llv : 0 0 0 0 0 ;
}

// size_t fwrite_word(const void chess_storage(DM) *, size_t, size_t, int, FILE *)
Ffwrite_word : user_defined, called {
    fnm : "fwrite_word" 'size_t fwrite_word(const void chess_storage(DM) *, size_t, size_t, int, FILE *)'; 
    arg : ( addr:i word:r addr:i word:i word:i word:i addr:i );
    loc : ( LR[0] R[0] R[1] R[2] R[3] R[4] R[5] );
    frm : ( l=18 );
    llv : 0 0 0 0 0 ;
}

// size_t fread_word(void chess_storage(DM) *, size_t, size_t, int, FILE *)
Ffread_word : user_defined, called {
    fnm : "fread_word" 'size_t fread_word(void chess_storage(DM) *, size_t, size_t, int, FILE *)'; 
    arg : ( addr:i word:r addr:i word:i word:i word:i addr:i );
    loc : ( LR[0] R[0] R[1] R[2] R[3] R[4] R[5] );
    frm : ( l=18 );
    llv : 0 0 0 0 0 ;
}

// int fseek(FILE *, long, int)
Ffseek : user_defined, called {
    fnm : "fseek" 'int fseek(FILE *, long, int)'; 
    arg : ( addr:i word:r addr:i word:i word:i word:i );
    loc : ( LR[0] R[0] R[1] R[2] R[3] R[4] );
    frm : ( l=18 );
    llv : 0 0 0 0 0 ;
}

// long ftell(FILE *)
Fftell : user_defined, called {
    fnm : "ftell" 'long ftell(FILE *)'; 
    arg : ( addr:i word:r word:r addr:i );
    loc : ( LR[0] R[0] R[1] R[2] );
    frm : ( l=18 );
    llv : 0 0 0 0 0 ;
}

// int feof(FILE *)
Ffeof : user_defined, called {
    fnm : "feof" 'int feof(FILE *)'; 
    arg : ( addr:i word:r addr:i );
    loc : ( LR[0] R[0] R[1] );
    frm : ( l=18 );
    llv : 0 0 0 0 0 ;
}

// int ferror(FILE *)
Fferror : user_defined, called {
    fnm : "ferror" 'int ferror(FILE *)'; 
    arg : ( addr:i word:r addr:i );
    loc : ( LR[0] R[0] R[1] );
    frm : ( l=18 );
    llv : 0 0 0 0 0 ;
}

// void clearerr(FILE *)
Fclearerr : user_defined, called {
    fnm : "clearerr" 'void clearerr(FILE *)'; 
    arg : ( addr:i addr:i );
    loc : ( LR[0] R[0] );
    frm : ( l=18 );
    llv : 0 0 0 0 0 ;
}

// void perror(const char *)
Fperror : user_defined, called {
    fnm : "perror" 'void perror(const char *)'; 
    arg : ( addr:i addr:i );
    loc : ( LR[0] R[0] );
    frm : ( l=18 );
    llv : 0 0 0 0 0 ;
}

// void clib_hosted_io(Hosted_clib_vars *)
F__stdio_void_clib_hosted_io___PHosted_clib_vars : user_defined, called {
    fnm : "clib_hosted_io" 'void clib_hosted_io(Hosted_clib_vars *)'; 
    arg : ( addr:i addr:i );
    loc : ( LR[0] R[0] );
    frm : ( );
    llv : 0 0 0 0 0 ;
}

