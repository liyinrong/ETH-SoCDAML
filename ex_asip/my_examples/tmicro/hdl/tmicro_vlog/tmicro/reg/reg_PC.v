
// File generated by Go version O-2018.09#f5599cac26#190121, Tue May 28 10:45:21 2024
// Copyright 2014-2018 Synopsys, Inc. All rights reserved.
// go -B -I../lib -F -D__tct_patch__=300 -Verilog -otmicro_vlog -cgo_options.cfg -Itmicro_vlog/tmp_pdg -updg -updg_controller tmicro



`timescale 1ns/1ps

// module reg_PC : reg_PC
module reg_PC
  // synopsys translate_off
  #(parameter reg_log = 1'b1,
    parameter reg_log_name = "PC"
  )
  // synopsys translate_on
  ( input             reset,
    input             clock,
    input             PC_pcw_cntrl_nxtpc_pdg_en_in, // std_logic
    input      [15:0] pcw_in, // addr
    output reg [15:0] pcr_out // addr
  );


  reg [15:0] reg_val;

  reg [15:0] reg_val_next;

  reg  reg_write_enab;


  // synopsys translate_off
  integer log_file;
  integer cycles;
  integer max_cycles = 0;
  reg     reset_active;
  initial reset_active = 1'b0;
  reg [255*8:1] rcd_file_name = "register.log";
  integer rcdname_file;
  integer rcdname_scan_file;

  // Allow change of the rcd_file_name at runtime:
  initial begin
    if (reg_log)
    begin
      // check for plusarg:
      if (!$value$plusargs("rcdname=%s",rcd_file_name)) begin
        // no plusarg specified, check for rcdname.cfg file.
        // Note: Some simulators may print a harmless warning when 
        //       the file is not found. This can be safely ignored.
        rcdname_file = $fopen("rcdname.cfg", "r");
        if (rcdname_file != 0) begin
          if (!$feof(rcdname_file)) begin
            rcdname_scan_file = $fscanf(rcdname_file, "%s", rcd_file_name);
          end
        end
      end
    end
  end

  always @ (posedge clock or posedge reset)
  // NOTE: The PC value from BEFORE the rising clock edge is logged.
  begin : p_reg_PC_log
    if (reg_log)
    begin
      if (reset)
      begin
        if (~ reset_active)
        begin
          $fclose(log_file);
          log_file = $fopen(rcd_file_name);
          $fdisplay(log_file, "reset at %0d", $time);
          cycles = 0;
          reset_active = 1'b1;
        end
      end
      else
      begin
        reset_active = 1'b0;
        cycles = cycles + 1;
        $fdisplay(log_file, "%0d (%0d)", cycles, reg_val);
      end
    end
  end

  always @ (negedge clock)
  begin : p_max_cycles
    if ((max_cycles != 0) && (cycles >= max_cycles)) begin
      $display("** INFO: Simulation stopped after %0d cycles.", cycles);
      $stop;
    end
  end
  // synopsys translate_on

  always @ (*)
  begin : p_read_reg_PC

    // pcr_out = 0;

    // (pcr_rd_PC)
    pcr_out = reg_val;

  end

  always @ (*)
  begin : p_write_combin_reg_PC

    reg_write_enab = 0;
    reg_val_next = 0;


    // (PC_wr_pcw_PC_pcw_cntrl_nxtpc_pdg_en)
    if (PC_pcw_cntrl_nxtpc_pdg_en_in)
    begin
      reg_write_enab = 1'b1;
      reg_val_next = pcw_in;
    end

  end

  always @ (posedge clock or posedge reset)
  begin : p_write_reg_PC

    if (reset)
    begin
      reg_val <= 16'd0;
    end
    else
    begin
      if (reg_write_enab)
        reg_val <= reg_val_next;
    end
  end

endmodule
