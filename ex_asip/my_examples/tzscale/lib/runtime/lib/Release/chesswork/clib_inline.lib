
// File generated by noodle version O-2018.09#f5599cac26#190121, Tue May 28 12:03:43 2024
// Copyright 2014-2018 Synopsys, Inc. All rights reserved.
// noodle -B -I.. -I../isg -I../runtime/include -I../runtime/include -D__tct_patch__=300 -itzscale_chess.h -itzscale_chess.h +wlib/Release/chesswork ../runtime/src/clib_inline.c tzscale

toolrelease _18R3;

// int strcmp(const char *, const char *)
Fstrcmp : user_defined, called {
    fnm : "strcmp" 'int strcmp(const char *, const char *)'; 
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( R[1] R[10] R[11] R[12] );
}

// long strtol(const char * restrict, char ** restrict, int)
Fstrtol : user_defined, called {
    fnm : "strtol" 'long strtol(const char * restrict, char ** restrict, int)'; 
    arg : ( w32:i w32:r w32:i w32:i w32:i );
    loc : ( R[1] R[10] R[11] R[12] R[13] );
}

// int __cxa_atexit(void (*)(void *), void *, void *)
F__cxa_atexit : user_defined, called {
    fnm : "__cxa_atexit" 'int __cxa_atexit(void (*)(void *), void *, void *)'; 
    arg : ( w32:i w32:r w32:i w32:i w32:i );
    loc : ( R[1] R[10] R[11] R[12] R[13] );
    llv : 0 0 0 0 0 ;
}

// void __cxa_finalize(void *)
F__cxa_finalize : user_defined, called {
    fnm : "__cxa_finalize" 'void __cxa_finalize(void *)'; 
    arg : ( w32:i w32:i );
    loc : ( R[1] R[10] );
}

// int vfprintf(FILE *, const char *, va_list)
Fvfprintf : user_defined, called {
    fnm : "vfprintf" 'int vfprintf(FILE *, const char *, va_list)'; 
    arg : ( w32:i w32:r w32:i w32:i w32:i );
    loc : ( R[1] R[10] R[11] R[12] R[13] );
    llv : 0 0 0 0 0 ;
}

// int vfscanf(FILE *, const char *, va_list)
Fvfscanf : user_defined, called {
    fnm : "vfscanf" 'int vfscanf(FILE *, const char *, va_list)'; 
    arg : ( w32:i w32:r w32:i w32:i w32:i );
    loc : ( R[1] R[10] R[11] R[12] R[13] );
    llv : 0 0 0 0 0 ;
}

// int fputc(int, FILE *)
Ffputc : user_defined, called {
    fnm : "fputc" 'int fputc(int, FILE *)'; 
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( R[1] R[10] R[11] R[12] );
    llv : 0 0 0 0 0 ;
}

// int fputs(const char *, FILE *)
Ffputs : user_defined, called {
    fnm : "fputs" 'int fputs(const char *, FILE *)'; 
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( R[1] R[10] R[11] R[12] );
    llv : 0 0 0 0 0 ;
}

// int fgetc(FILE *)
Ffgetc : user_defined, called {
    fnm : "fgetc" 'int fgetc(FILE *)'; 
    arg : ( w32:i w32:r w32:i );
    loc : ( R[1] R[10] R[11] );
    llv : 0 0 0 0 0 ;
}

// int fseek(FILE *, long, int)
Ffseek : user_defined, called {
    fnm : "fseek" 'int fseek(FILE *, long, int)'; 
    arg : ( w32:i w32:r w32:i w32:i w32:i );
    loc : ( R[1] R[10] R[11] R[12] R[13] );
    llv : 0 0 0 0 0 ;
}

// int strcoll(const char *, const char *)
Fstrcoll : user_defined, called {
    fnm : "strcoll" 'int strcoll(const char *, const char *)'; 
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( R[1] R[10] R[11] R[12] );
    frm : ( );
    llv : 0 0 0 0 0 ;
}

// int atoi(const char *)
Fatoi : user_defined, called {
    fnm : "atoi" 'int atoi(const char *)'; 
    arg : ( w32:i w32:r w32:i );
    loc : ( R[1] R[10] R[11] );
    frm : ( );
    llv : 0 0 0 0 0 ;
}

// long atol(const char *)
Fatol : user_defined, called {
    fnm : "atol" 'long atol(const char *)'; 
    arg : ( w32:i w32:r w32:i );
    loc : ( R[1] R[10] R[11] );
    frm : ( );
    llv : 0 0 0 0 0 ;
}

// void exit(int)
Fexit : user_defined, called {
    fnm : "exit" 'void exit(int)'; 
    arg : ( w32:i w32:i );
    loc : ( R[1] R[10] );
    frm : ( );
    llv : 0 0 0 0 0 ;
}

// void abort()
Fabort : user_defined, called {
    fnm : "abort" 'void abort()'; 
    arg : ( w32:i );
    loc : ( R[1] );
    frm : ( );
    llv : 0 0 0 0 0 ;
}

// void _Exit(int)
F_Exit : user_defined, called {
    fnm : "_Exit" 'void _Exit(int)'; 
    arg : ( w32:i w32:i );
    loc : ( R[1] R[10] );
    frm : ( );
    llv : 0 0 0 0 0 ;
}

// int atexit(void (*)())
Fatexit : user_defined, called {
    fnm : "atexit" 'int atexit(void (*)())'; 
    arg : ( w32:i w32:r w32:i );
    loc : ( R[1] R[10] R[11] );
    frm : ( );
    llv : 0 0 0 0 0 ;
}

// int vprintf(const char *, va_list)
Fvprintf : user_defined, called {
    fnm : "vprintf" 'int vprintf(const char *, va_list)'; 
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( R[1] R[10] R[11] R[12] );
    frm : ( );
    llv : 0 0 0 0 0 ;
}

// int vscanf(const char *, va_list)
Fvscanf : user_defined, called {
    fnm : "vscanf" 'int vscanf(const char *, va_list)'; 
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( R[1] R[10] R[11] R[12] );
    frm : ( );
    llv : 0 0 0 0 0 ;
}

// int putc(int, FILE *)
Fputc : user_defined, called {
    fnm : "putc" 'int putc(int, FILE *)'; 
    arg : ( w32:i w32:r w32:i w32:i );
    loc : ( R[1] R[10] R[11] R[12] );
    frm : ( );
    llv : 0 0 0 0 0 ;
}

// int putchar(int)
Fputchar : user_defined, called {
    fnm : "putchar" 'int putchar(int)'; 
    arg : ( w32:i w32:r w32:i );
    loc : ( R[1] R[10] R[11] );
    frm : ( );
    llv : 0 0 0 0 0 ;
}

// int puts(const char *)
Fputs : user_defined, called {
    fnm : "puts" 'int puts(const char *)'; 
    arg : ( w32:i w32:r w32:i );
    loc : ( R[1] R[10] R[11] );
    frm : ( );
    llv : 0 0 0 0 0 ;
}

// int getc(FILE *)
Fgetc : user_defined, called {
    fnm : "getc" 'int getc(FILE *)'; 
    arg : ( w32:i w32:r w32:i );
    loc : ( R[1] R[10] R[11] );
    frm : ( );
    llv : 0 0 0 0 0 ;
}

// int getchar()
Fgetchar : user_defined, called {
    fnm : "getchar" 'int getchar()'; 
    arg : ( w32:i w32:r );
    loc : ( R[1] R[10] );
    frm : ( );
    llv : 0 0 0 0 0 ;
}

// void rewind(FILE *)
Frewind : user_defined, called {
    fnm : "rewind" 'void rewind(FILE *)'; 
    arg : ( w32:i w32:i );
    loc : ( R[1] R[10] );
    frm : ( );
    llv : 0 0 0 0 0 ;
}

// int isalnum(int)
Fisalnum : user_defined, called {
    fnm : "isalnum" 'int isalnum(int)'; 
    arg : ( w32:i w32:r w32:i );
    loc : ( R[1] R[10] R[11] );
    frm : ( );
    llv : 0 0 0 0 0 ;
}

// int isalpha(int)
Fisalpha : user_defined, called {
    fnm : "isalpha" 'int isalpha(int)'; 
    arg : ( w32:i w32:r w32:i );
    loc : ( R[1] R[10] R[11] );
    frm : ( );
    llv : 0 0 0 0 0 ;
}

// int isblank(int)
Fisblank : user_defined, called {
    fnm : "isblank" 'int isblank(int)'; 
    arg : ( w32:i w32:r w32:i );
    loc : ( R[1] R[10] R[11] );
    frm : ( );
    llv : 0 0 0 0 0 ;
}

// int iscntrl(int)
Fiscntrl : user_defined, called {
    fnm : "iscntrl" 'int iscntrl(int)'; 
    arg : ( w32:i w32:r w32:i );
    loc : ( R[1] R[10] R[11] );
    frm : ( );
    llv : 0 0 0 0 0 ;
}

// int isdigit(int)
Fisdigit : user_defined, called {
    fnm : "isdigit" 'int isdigit(int)'; 
    arg : ( w32:i w32:r w32:i );
    loc : ( R[1] R[10] R[11] );
    frm : ( );
    llv : 0 0 0 0 0 ;
}

// int isgraph(int)
Fisgraph : user_defined, called {
    fnm : "isgraph" 'int isgraph(int)'; 
    arg : ( w32:i w32:r w32:i );
    loc : ( R[1] R[10] R[11] );
    frm : ( );
    llv : 0 0 0 0 0 ;
}

// int islower(int)
Fislower : user_defined, called {
    fnm : "islower" 'int islower(int)'; 
    arg : ( w32:i w32:r w32:i );
    loc : ( R[1] R[10] R[11] );
    frm : ( );
    llv : 0 0 0 0 0 ;
}

// int isprint(int)
Fisprint : user_defined, called {
    fnm : "isprint" 'int isprint(int)'; 
    arg : ( w32:i w32:r w32:i );
    loc : ( R[1] R[10] R[11] );
    frm : ( );
    llv : 0 0 0 0 0 ;
}

// int ispunct(int)
Fispunct : user_defined, called {
    fnm : "ispunct" 'int ispunct(int)'; 
    arg : ( w32:i w32:r w32:i );
    loc : ( R[1] R[10] R[11] );
    frm : ( );
    llv : 0 0 0 0 0 ;
}

// int isspace(int)
Fisspace : user_defined, called {
    fnm : "isspace" 'int isspace(int)'; 
    arg : ( w32:i w32:r w32:i );
    loc : ( R[1] R[10] R[11] );
    frm : ( );
    llv : 0 0 0 0 0 ;
}

// int isupper(int)
Fisupper : user_defined, called {
    fnm : "isupper" 'int isupper(int)'; 
    arg : ( w32:i w32:r w32:i );
    loc : ( R[1] R[10] R[11] );
    frm : ( );
    llv : 0 0 0 0 0 ;
}

// int isxdigit(int)
Fisxdigit : user_defined, called {
    fnm : "isxdigit" 'int isxdigit(int)'; 
    arg : ( w32:i w32:r w32:i );
    loc : ( R[1] R[10] R[11] );
    frm : ( );
    llv : 0 0 0 0 0 ;
}

// int tolower(int)
Ftolower : user_defined, called {
    fnm : "tolower" 'int tolower(int)'; 
    arg : ( w32:i w32:r w32:i );
    loc : ( R[1] R[10] R[11] );
    frm : ( );
    llv : 0 0 0 0 0 ;
}

// int toupper(int)
Ftoupper : user_defined, called {
    fnm : "toupper" 'int toupper(int)'; 
    arg : ( w32:i w32:r w32:i );
    loc : ( R[1] R[10] R[11] );
    frm : ( );
    llv : 0 0 0 0 0 ;
}

