
// File generated by pdg version O-2018.09#f5599cac26#190121, Tue May 28 12:03:21 2024
// Copyright 2014-2018 Synopsys, Inc. All rights reserved.
// pdg -P -B -Iisg +wisg -Iruntime/include -D__tct_patch__=300 -D__checkers__ tzscale

#include "tzscale_inline_primitives.h"
namespace tzscale_primitive {

#ifdef __checkers__
    void div::process() {
        VBit<6, false> new_cnt = 0x0u;
        VBit<32, true> divA_loc;
        VBit<32, true> divB_loc;
        VBit<32, true> div_res;
        VBit<32, true> rem_res;
        VBit<1, false> div_start = ((mdl->div__cnt.pdgValue() == 0x0u) && (((mdl->divC_divu_divA_divB_div_DE_sig.readNoMark() || mdl->divC_divs_divA_divB_div_DE_sig.readNoMark()) || mdl->divC_remu_divA_divB_div_DE_sig.readNoMark()) || mdl->divC_rems_divA_divB_div_DE_sig.readNoMark()));
        if (((div_start).to_bool() && (mdl->div__cnt.pdgValue() == 0x0u))) {
            divA_loc = mdl->divA.read().val;
            if ((mdl->divC_divs_divA_divB_div_DE_sig.readNoMark() || mdl->divC_rems_divA_divB_div_DE_sig.readNoMark())) {
                if ((mdl->divA.read().val < 0x0)) {
                    divA_loc = -mdl->divA.read().val;
                } else {
                    divA_loc = mdl->divA.read().val;
                }
                if ((mdl->divB.read().val < 0x0)) {
                    divB_loc = -mdl->divB.read().val;
                } else {
                    divB_loc = mdl->divB.read().val;
                }
                VBit<1, false> t;
                if (((VBit<1, false>((mdl->divA.read().val < 0x0)) ^ VBit<1, false>((mdl->divB.read().val < 0x0)))).to_bool()) {
                    t = 0x1u;
                } else {
                    t = 0x0u;
                }
                mdl->div__is_neg_div.assign(1, t);
                VBit<1, false> t_0;
                if ((mdl->divA.read().val < 0x0)) {
                    t_0 = 0x1u;
                } else {
                    t_0 = 0x0u;
                }
                mdl->div__is_neg_rem.assign(1, t_0);
            } else {
                divA_loc = mdl->divA.read().val;
                divB_loc = mdl->divB.read().val;
                mdl->div__is_neg_div.assign(1, VBit<1, false>(0x0u));
                mdl->div__is_neg_rem.assign(1, VBit<1, false>(0x0u));
            }
            VBit<5, false> n = VBit<5, false>(div_clb(tzscale_primitive::w32(VBit<32, false>(divA_loc))).val);
            mdl->div__PA.assign(1, VBit<64, false>((VBit<32, false>(divA_loc) << n)));
            mdl->div__B.assign(1, VBit<32, false>(divB_loc));
            new_cnt = (VBit<6, false>(0x21u) - VBit<6, false>(n));
            mdl->div__Q_addr_reg.assign(1, VBit<5, false>(mdl->div_wad.read().val));
            mdl->div__is_div.assign(1, VBit<1, false>((mdl->divC_divs_divA_divB_div_DE_sig.readNoMark() || mdl->divC_divu_divA_divB_div_DE_sig.readNoMark())));
        } else if ((mdl->div__cnt.pdgValue() > 0x1u)) {
            mdl->div__PA.assign(1, div_step(mdl->div__PA.pdgValue(), mdl->div__B.pdgValue()));
            new_cnt = (mdl->div__cnt.pdgValue() - VBit<6, false>(0x1u));
        } else if ((mdl->div__cnt.pdgValue() == 0x1u)) {
            VBit<64, false> pa = mdl->div__PA.pdgValue();
            if ((mdl->div__is_div.pdgValue()).to_bool()) {
                if ((mdl->div__is_neg_div.pdgValue()).to_bool()) {
                    div_res = VBit<32, true>(-VBit<32, false>(pa.extract(0x1Fu, 0x0u)));
                    mdl->div__is_neg_div.assign(1, VBit<1, false>(0x0u));
                } else {
                    div_res = VBit<32, true>(VBit<32, false>(pa.extract(0x1Fu, 0x0u)));
                }
                {
                    tzscale_primitive::w32 __pdg_tmp__tmp = div_res;
                    mdl->R.assign(1, __pdg_tmp__tmp, AddressType((mdl->div__Q_addr_reg.pdgValue()).to_unsigned()));
                    mdl->w1.write(__pdg_tmp__tmp);
                    mdl->w1.markRead();
                };
            } else {
                if ((mdl->div__is_neg_rem.pdgValue()).to_bool()) {
                    rem_res = VBit<32, true>(-VBit<32, false>(pa.extract(0x3Fu, 0x20u)));
                    mdl->div__is_neg_rem.assign(1, VBit<1, false>(0x0u));
                } else {
                    rem_res = VBit<32, true>(VBit<32, false>(pa.extract(0x3Fu, 0x20u)));
                }
                {
                    tzscale_primitive::w32 __pdg_tmp__tmp = rem_res;
                    mdl->R.assign(1, __pdg_tmp__tmp, AddressType((mdl->div__Q_addr_reg.pdgValue()).to_unsigned()));
                    mdl->w1.write(__pdg_tmp__tmp);
                    mdl->w1.markRead();
                };
            }
            new_cnt = (mdl->div__cnt.pdgValue() - VBit<6, false>(0x1u));
        }
        mdl->div__cnt.assign(1, new_cnt);
        mdl->div_busy.write(tzscale_primitive::uint1(((div_start).to_bool() || (mdl->div__cnt.pdgValue() > 0x0u))));
        mdl->div_cnt.write(tzscale_primitive::uint1((mdl->div__cnt.pdgValue() > 0x0u)));
        VBit<5, false> t_1;
        if ((div_start).to_bool()) {
            t_1 = 0x0u;
        } else {
            t_1 = mdl->div__Q_addr_reg.pdgValue();
        }
        mdl->div_addr.write(tzscale_primitive::uint5(t_1));
        mdl->div_wnc.write(tzscale_primitive::uint1((mdl->div__cnt.pdgValue() == 0x2u)));
        mdl->div_new.write(tzscale_primitive::uint1((((mdl->divC_divu_divA_divB_div_DE_sig.readNoMark() || mdl->divC_divs_divA_divB_div_DE_sig.readNoMark()) || mdl->divC_remu_divA_divB_div_DE_sig.readNoMark()) || mdl->divC_rems_divA_divB_div_DE_sig.readNoMark())));
    }

#endif // __checkers__

#ifdef __checkers__
    void dm_in::process_result() {
        VBit<64, false> t1 = concat(VBit<32, false>(mdl->dm1_rd.read().val), VBit<32, false>(mdl->dm0_rd.read().val));
        VBit<32, false> t2;
        switch ((mdl->dm_in__col_ff.pdgValue()).to_unsigned()){
            case 0:
                {
                    t2 = VBit<32, false>(t1.extract(0x1Fu, 0x0u));
                    break;
                }
            case 1:
                {
                    t2 = VBit<32, false>(t1.extract(0x27u, 0x8u));
                    break;
                }
            case 2:
                {
                    t2 = VBit<32, false>(t1.extract(0x2Fu, 0x10u));
                    break;
                }
            case 3:
                {
                    t2 = VBit<32, false>(t1.extract(0x37u, 0x18u));
                    break;
                }
            case 4:
                {
                    t2 = VBit<32, false>(t1.extract(0x3Fu, 0x20u));
                    break;
                }
            case 5:
                {
                    t2 = concat(VBit<8, false>(t1.extract(0x7u, 0x0u)), VBit<24, false>(t1.extract(0x3Fu, 0x28u)));
                    break;
                }
            case 6:
                {
                    t2 = concat(VBit<16, false>(t1.extract(0xFu, 0x0u)), VBit<16, false>(t1.extract(0x3Fu, 0x30u)));
                    break;
                }
            case 7:
                {
                    t2 = concat(VBit<24, false>(t1.extract(0x17u, 0x0u)), VBit<8, false>(t1.extract(0x3Fu, 0x38u)));
                    break;
                }
        }
        if ((mdl->dm_in__ld_dmw_ff.pdgValue()).to_bool()) {
            mdl->dmw_rd.write(tzscale_primitive::w32(t2));
        }
        if ((mdl->dm_in__ld_dmh_ff.pdgValue()).to_bool()) {
            mdl->dmh_rd.write(tzscale_primitive::w16(VBit<16, false>(t2)));
        }
        if ((mdl->dm_in__ld_dmb_ff.pdgValue()).to_bool()) {
            mdl->dmb_rd.write(tzscale_primitive::w08(VBit<8, false>(t2)));
        }
    }

#endif // __checkers__

#ifdef __checkers__
    void dm_in::process_request() {
        VBit<20, false> row = VBit<20, false>(VBit<21, false>(mdl->dm_addr.read().val.extract(0x17u, 0x3u)));
        VBit<4, false> col = VBit<4, false>(VBit<3, false>(mdl->dm_addr.read().val.extract(0x2u, 0x0u)));
        bool fold = (col > 0x3u);
        VBit<20, false> t;
        if (fold) {
            t = (row + VBit<20, false>(0x1u));
        } else {
            t = row;
        }
        mdl->dm0_addr.write(t);
        mdl->dm1_addr.write(row);
        VBit<32, false> t2;
        if (mdl->st_dmw.read()) {
            VBit<32, false> t1;
            switch ((VBit<2, false>(mdl->dm_addr.read().val.extract(0x1u, 0x0u))).to_unsigned()){
                case 0:
                    {
                        t1 = VBit<32, false>(concat(VBit<8, true>(mdl->dmw_wr.read().val.extract(0x1Fu, 0x18u)), VBit<8, true>(mdl->dmw_wr.read().val.extract(0x17u, 0x10u)), VBit<8, true>(mdl->dmw_wr.read().val.extract(0xFu, 0x8u)), VBit<8, true>(mdl->dmw_wr.read().val.extract(0x7u, 0x0u))));
                        break;
                    }
                case 1:
                    {
                        t1 = VBit<32, false>(concat(VBit<8, true>(mdl->dmw_wr.read().val.extract(0x17u, 0x10u)), VBit<8, true>(mdl->dmw_wr.read().val.extract(0xFu, 0x8u)), VBit<8, true>(mdl->dmw_wr.read().val.extract(0x7u, 0x0u)), VBit<8, true>(mdl->dmw_wr.read().val.extract(0x1Fu, 0x18u))));
                        break;
                    }
                case 2:
                    {
                        t1 = VBit<32, false>(concat(VBit<8, true>(mdl->dmw_wr.read().val.extract(0xFu, 0x8u)), VBit<8, true>(mdl->dmw_wr.read().val.extract(0x7u, 0x0u)), VBit<8, true>(mdl->dmw_wr.read().val.extract(0x1Fu, 0x18u)), VBit<8, true>(mdl->dmw_wr.read().val.extract(0x17u, 0x10u))));
                        break;
                    }
                case 3:
                    {
                        t1 = VBit<32, false>(concat(VBit<8, true>(mdl->dmw_wr.read().val.extract(0x7u, 0x0u)), VBit<8, true>(mdl->dmw_wr.read().val.extract(0x1Fu, 0x18u)), VBit<8, true>(mdl->dmw_wr.read().val.extract(0x17u, 0x10u)), VBit<8, true>(mdl->dmw_wr.read().val.extract(0xFu, 0x8u))));
                        break;
                    }
            }
            t2 = VBit<32, false>(concat(t1, t1));
        } else if (mdl->st_dmh.read()) {
            VBit<16, false> t1;
            switch (unsigned(mdl->dm_addr.read().val.extract(0x0u))){
                case 0:
                    {
                        t1 = VBit<16, false>(concat(VBit<8, true>(mdl->dmh_wr.read().val.extract(0xFu, 0x8u)), VBit<8, true>(mdl->dmh_wr.read().val.extract(0x7u, 0x0u))));
                        break;
                    }
                case 1:
                    {
                        t1 = VBit<16, false>(concat(VBit<8, true>(mdl->dmh_wr.read().val.extract(0x7u, 0x0u)), VBit<8, true>(mdl->dmh_wr.read().val.extract(0xFu, 0x8u))));
                        break;
                    }
            }
            t2 = VBit<32, false>(concat(t1, t1, t1, t1));
        } else if (mdl->st_dmb.read()) {
            t2 = VBit<32, false>(concat(mdl->dmb_wr.read().val, mdl->dmb_wr.read().val, mdl->dmb_wr.read().val, mdl->dmb_wr.read().val, mdl->dmb_wr.read().val, mdl->dmb_wr.read().val, mdl->dmb_wr.read().val, mdl->dmb_wr.read().val));
        }
        mdl->dm0_wr.write(tzscale_primitive::v4uint8(t2));
        mdl->dm1_wr.write(tzscale_primitive::v4uint8(t2));
        VBit<4, false> t3 = 0x0u;
        if (mdl->st_dmw.read()) {
            t3 = 0xFu;
        } else if (mdl->st_dmh.read()) {
            t3 = 0x3u;
        } else if (mdl->st_dmb.read()) {
            t3 = 0x1u;
        }
        VBit<11, false> t4 = VBit<11, false>((VBit<19, false>(t3) << col));
        mdl->st_dm0.write(tzscale_primitive::v4uint1((VBit<4, false>(t4.extract(0x3u, 0x0u)) | VBit<4, false>(VBit<3, false>(t4.extract(0xAu, 0x8u))))));
        mdl->st_dm1.write(tzscale_primitive::v4uint1(VBit<4, false>(t4.extract(0x7u, 0x4u))));
        VBit<4, false> t5 = 0x0u;
        if (mdl->ld_dmw.read()) {
            t5 = 0xFu;
        } else if (mdl->ld_dmh.read()) {
            t5 = 0x3u;
        } else if (mdl->ld_dmb.read()) {
            t5 = 0x1u;
        }
        VBit<11, false> t6 = (VBit<11, false>(t5) << col);
        mdl->ld_dm0.write(((VBit<4, false>(t6.extract(0x3u, 0x0u)) | VBit<4, false>(VBit<3, false>(t6.extract(0xAu, 0x8u)))) != 0x0u));
        mdl->ld_dm1.write((VBit<4, false>(t6.extract(0x7u, 0x4u)) != 0x0u));
        mdl->dm_in__ld_dmw_ff.assign(2, VBit<1, false>(mdl->ld_dmw.read()));
        mdl->dm_in__ld_dmh_ff.assign(2, VBit<1, false>(mdl->ld_dmh.read()));
        mdl->dm_in__ld_dmb_ff.assign(2, VBit<1, false>(mdl->ld_dmb.read()));
        mdl->dm_in__col_ff.assign(2, VBit<3, false>(col));
        VBit<3, false> requests = (((((VBit<3, false>(mdl->st_dmw.read()) + VBit<3, false>(mdl->st_dmh.read())) + VBit<3, false>(mdl->st_dmb.read())) + VBit<3, false>(mdl->ld_dmw.read())) + VBit<3, false>(mdl->ld_dmh.read())) + VBit<3, false>(mdl->ld_dmb.read()));
    }

#endif // __checkers__

} // namespace tzscale_primitive
