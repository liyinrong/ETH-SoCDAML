
// File generated by darts version O-2018.09#f5599cac26#190121, Tue May 28 12:06:23 2024
// Copyright 2014-2018 Synopsys, Inc. All rights reserved.
// darts -B -I../lib +p -d -h -I.. -I../lib/runtime/include -I../lib/runtime/include -D__tct_patch__=300 -p +r -L +Ihex +u Release/dot_product tzscale

// Release: ipd O-2018.09-SP3
.label _main_init
.function _main_init _main_init
.src_ref 0 "tzscale_init.s" 5 first
	     0      "00110111" // 	lui x2, 8 /* MW 4 */
	     1      "10000001" // /* MW 3 */
	     2      "00000000" // /* MW 2 */
	     3      "00000000" // /* MW 1 */
.src_ref 0 "tzscale_init.s" 6 first
	     4      "00010011" // 	ori x2,x2,0 /* MW 4 */
	     5      "01100001" // /* MW 3 */
	     6      "00000001" // /* MW 2 */
	     7      "00000000" // /* MW 1 */
.src_ref 0 "tzscale_init.s" 7 first
	     8      "00010011" // 	addi x0,x0,0 /* MW 4 */
	     9      "00000000" // /* MW 3 */
	    10      "00000000" // /* MW 2 */
	    11      "00000000" // /* MW 1 */
.label _start_basic
.function _start_basic _start_basic
.src_ref 0 "tzscale_basic.c" 3 first
.src_ref 0 "tzscale_basic.c" 5 15 first
.no_stack_arguments
	    12      "11101111" // 	jal x1, 42 /* MW 4 */
	    13      "00000000" // /* MW 3 */
	    14      "10100000" // /* MW 2 */
	    15      "00000010" // /* MW 1 */
.src_ref 0 "tzscale_basic.c" 5 4 first
.return_address
.swstall for_chess_exit
.exit
	    16      "00000001" // 	nop /* MW 2 */
	    17      "00000000" // /* MW 1 */
.src_ref 0 "tzscale_basic.c" 6 4 first
.loop_nesting 1
	    18      "11111101" // 	j -2 /* MW 2 */
	    19      "10111111" // /* MW 1 */
.label __sint_dotproduc_vect___Pv2short___Pv2short___sint
.function dotproduc_vect __sint_dotproduc_vect___Pv2short___Pv2short___sint
.src_ref 1 "dotproduct.c" 13 first
	    20      "00010011" // 	slli x10,x13,2 /* MW 4 */
	    21      "10010101" // /* MW 3 */
	    22      "00100110" // /* MW 2 */
	    23      "00000000" // /* MW 1 */
	    24      "10110011" // 	add x13,x10,x11 /* MW 4 */
	    25      "00000110" // /* MW 3 */
	    26      "10110101" // /* MW 2 */
	    27      "00000000" // /* MW 1 */
.src_ref 1 "dotproduct.c" 15 12 first
	    28      "00110111" // 	lui x10, 0 /* MW 4 */
	    29      "00000101" // /* MW 3 */
	    30      "00000000" // /* MW 2 */
	    31      "00000000" // /* MW 1 */
	    32      "00001001" // 	j 16 /* MW 2 */
	    33      "10100000" // /* MW 1 */
.src_ref 1 "dotproduct.c" 18 17 first
.loop_nesting 1
	    34      "10000011" // 	lw x3,0(x11) /* MW 4 */
	    35      "10100001" // /* MW 3 */
	    36      "00000101" // /* MW 2 */
	    37      "00000000" // /* MW 1 */
.src_ref 1 "dotproduct.c" 18 22
	    38      "00000011" // 	lw x4,0(x12) /* MW 4 */
	    39      "00100010" // /* MW 3 */
	    40      "00000110" // /* MW 2 */
	    41      "00000000" // /* MW 1 */
	    42      "01011001" // 	addi x11, 4 /* MW 2 */
	    43      "00000100" // /* MW 1 */
	    44      "01100001" // 	addi x12, 4 /* MW 2 */
	    45      "00000100" // /* MW 1 */
.src_ref 1 "dotproduct.c" 18 14
	    46      "00110011" // 	sdotp x10,x3,x4 /* MW 4 */
	    47      "10000101" // /* MW 3 */
	    48      "01000001" // /* MW 2 */
	    49      "01000110" // /* MW 1 */
.src_ref 1 "dotproduct.c" 17 23 first
.src_ref 1 "dotproduct.c" 17 4 first
	    50      "11100011" // 	bltu x11,x13,-20 /* MW 4 */
	    51      "11100110" // /* MW 3 */
	    52      "11010101" // /* MW 2 */
	    53      "11111110" // /* MW 1 */
.src_ref 1 "dotproduct.c" 20 4 first
.loop_nesting 0
.rts 1
	    54      "01100111" // 	jalr x0, x1, 0 /* MW 4 */
	    55      "10000000" // /* MW 3 */
	    56      "00000000" // /* MW 2 */
	    57      "00000000" // /* MW 1 */
.label _main
.function main _main
.src_ref 1 "dotproduct.c" 28 first
.src_ref 1 "dotproduct.c" 28 5
	    58      "00010001" // 	addi x2, 16 /* MW 2 */
	    59      "00010000" // /* MW 1 */
.src_ref 1 "dotproduct.c" 30 23 first
.cycle_count
	    60      "00110111" // 	lui x12, 0 /* MW 4 */
	    61      "00000110" // /* MW 3 */
	    62      "00000000" // /* MW 2 */
	    63      "00000000" // /* MW 1 */
	    64      "00010011" // 	ori x12,x12,12 /* MW 4 */
	    65      "01100110" // /* MW 3 */
	    66      "11000110" // /* MW 2 */
	    67      "00000000" // /* MW 1 */
.src_ref 1 "dotproduct.c" 31 2 first
	    68      "00100011" // 	sw x12,4(x0) /* MW 4 */
	    69      "00100010" // /* MW 3 */
	    70      "11000000" // /* MW 2 */
	    71      "00000000" // /* MW 1 */
	    72      "00100011" // 	sw x1,-12(x2) /* MW 4 */
	    73      "00101010" // /* MW 3 */
	    74      "00010001" // /* MW 2 */
	    75      "11111110" // /* MW 1 */
	    76      "00100011" // 	sw x10,-16(x2) /* MW 4 */
	    77      "00101000" // /* MW 3 */
	    78      "10100001" // /* MW 2 */
	    79      "11111110" // /* MW 1 */
.src_ref 1 "dotproduct.c" 32 51
	    80      "10010011" // 	addi x13,x0,5 /* MW 4 */
	    81      "00000110" // /* MW 3 */
	    82      "01010000" // /* MW 2 */
	    83      "00000000" // /* MW 1 */
.src_ref 1 "dotproduct.c" 32 31
	    84      "10110010" // 	mv x11, x12 /* MW 2 */
	    85      "10000101" // /* MW 1 */
.src_ref 1 "dotproduct.c" 32 16 first
.no_stack_arguments
	    86      "11101111" // 	jal x1, -70 /* MW 4 */
	    87      "11110000" // /* MW 3 */
	    88      "10111111" // /* MW 2 */
	    89      "11111011" // /* MW 1 */
.src_ref 1 "dotproduct.c" 34 74
.return_address
	    90      "10000011" // 	lw x1,-16(x2) /* MW 4 */
	    91      "00100000" // /* MW 3 */
	    92      "00000001" // /* MW 2 */
	    93      "11111111" // /* MW 1 */
	    94      "00100011" // 	sw x10,-4(x2) /* MW 4 */
	    95      "00101110" // /* MW 3 */
	    96      "10100001" // /* MW 2 */
	    97      "11111110" // /* MW 1 */
.src_ref 1 "dotproduct.c" 33 22 first
.cycle_count
.swstall for_chess_cycle_count
	    98      "00000001" // 	nop /* MW 2 */
	    99      "00000000" // /* MW 1 */
.src_ref 1 "dotproduct.c" 34 74 first
	   100      "00110011" // 	sub x10,x10,x1 /* MW 4 */
	   101      "00000101" // /* MW 3 */
	   102      "00010101" // /* MW 2 */
	   103      "01000000" // /* MW 1 */
	   104      "00110111" // 	lui x12, 0 /* MW 4 */
	   105      "00000110" // /* MW 3 */
	   106      "00000000" // /* MW 2 */
	   107      "00000000" // /* MW 1 */
	   108      "00100011" // 	sw x10,-8(x2) /* MW 4 */
	   109      "00101100" // /* MW 3 */
	   110      "10100001" // /* MW 2 */
	   111      "11111110" // /* MW 1 */
	   112      "10010011" // 	ori x11,x12,32 /* MW 4 */
	   113      "01100101" // /* MW 3 */
	   114      "00000110" // /* MW 2 */
	   115      "00000010" // /* MW 1 */
.src_ref 1 "dotproduct.c" 34 2
	   116      "11101111" // 	jal x1, 86 /* MW 4 */
	   117      "00000000" // /* MW 3 */
	   118      "01100000" // /* MW 2 */
	   119      "00000101" // /* MW 1 */
.src_ref 1 "dotproduct.c" 35
.return_address
	   120      "00000011" // 	lw x10,-12(x2) /* MW 4 */
	   121      "00100101" // /* MW 3 */
	   122      "01000001" // /* MW 2 */
	   123      "11111111" // /* MW 1 */
.src_ref 1 "dotproduct.c" 35 first
	   124      "00010101" // 	addi x2, -16 /* MW 2 */
	   125      "00010000" // /* MW 1 */
.src_ref 1 "dotproduct.c" 35
.end_of_main
.rts 1
	   126      "01100111" // 	jalr x0, x10, 0 /* MW 4 */
	   127      "00000000" // /* MW 3 */
	   128      "00000101" // /* MW 2 */
	   129      "00000000" // /* MW 1 */
.label __stdio_void_clib_hosted_io___PHosted_clib_vars
.function clib_hosted_io __stdio_void_clib_hosted_io___PHosted_clib_vars
.src_ref 2 "stdio.c" 83 first
.src_ref 2 "stdio.c" 90 first
.src_ref 2 "stdio.c" 89 4 first
.rts 1
.hosted_io
	   130      "01100111" // 	jalr x0, x1, 0 /* MW 4 */
	   131      "10000000" // /* MW 3 */
	   132      "00000000" // /* MW 2 */
	   133      "00000000" // /* MW 1 */
.label vfprintf
.function vfprintf vfprintf
.src_ref 2 "stdio.c" 332 first
.src_ref 2 "stdio.c" 332 4
	   134      "00010011" // 	addi x2,x2,72 /* MW 4 */
	   135      "00000001" // /* MW 3 */
	   136      "10000001" // /* MW 2 */
	   137      "00000100" // /* MW 1 */
.src_ref 2 "stdio.c" 334 11 first
	   138      "00000011" // 	lw x4,0(x11) /* MW 4 */
	   139      "10100010" // /* MW 3 */
	   140      "00000101" // /* MW 2 */
	   141      "00000000" // /* MW 1 */
.src_ref 2 "stdio.c" 334 11
	   142      "00010011" // 	addi x10,x2,-72 /* MW 4 */
	   143      "00000101" // /* MW 3 */
	   144      "10000001" // /* MW 2 */
	   145      "11111011" // /* MW 1 */
.src_ref 2 "stdio.c" 334 11
	   146      "10010011" // 	addi x11,x0,2 /* MW 4 */
	   147      "00000101" // /* MW 3 */
	   148      "00100000" // /* MW 2 */
	   149      "00000000" // /* MW 1 */
.src_ref 2 "stdio.c" 334 11
	   150      "10010011" // 	addi x3,x0,-1 /* MW 4 */
	   151      "00000001" // /* MW 3 */
	   152      "11110000" // /* MW 2 */
	   153      "11111111" // /* MW 1 */
.src_ref 2 "stdio.c" 334 11
	   154      "10010011" // 	addi x5,x2,-64 /* MW 4 */
	   155      "00000010" // /* MW 3 */
	   156      "00000001" // /* MW 2 */
	   157      "11111100" // /* MW 1 */
.src_ref 2 "stdio.c" 334 11
	   158      "00100011" // 	sw x4,-68(x2) /* MW 4 */
	   159      "00101110" // /* MW 3 */
	   160      "01000001" // /* MW 2 */
	   161      "11111010" // /* MW 1 */
.src_ref 2 "stdio.c" 334 11
	   162      "00100011" // 	sw x12,-52(x2) /* MW 4 */
	   163      "00100110" // /* MW 3 */
	   164      "11000001" // /* MW 2 */
	   165      "11111100" // /* MW 1 */
.src_ref 2 "stdio.c" 334 11
	   166      "00100011" // 	sw x13,-8(x2) /* MW 4 */
	   167      "00101100" // /* MW 3 */
	   168      "11010001" // /* MW 2 */
	   169      "11111110" // /* MW 1 */
.src_ref 2 "stdio.c" 334 11
	   170      "00100011" // 	sw x11,0(x10) /* MW 4 */
	   171      "00100000" // /* MW 3 */
	   172      "10110101" // /* MW 2 */
	   173      "00000000" // /* MW 1 */
.src_ref 2 "stdio.c" 334 11
	   174      "00100011" // 	sw x3,0(x5) /* MW 4 */
	   175      "10100000" // /* MW 3 */
	   176      "00110010" // /* MW 2 */
	   177      "00000000" // /* MW 1 */
	   178      "00100011" // 	sw x1,-4(x2) /* MW 4 */
	   179      "00101110" // /* MW 3 */
	   180      "00010001" // /* MW 2 */
	   181      "11111110" // /* MW 1 */
.src_ref 2 "stdio.c" 334 11
.no_stack_arguments
	   182      "11101111" // 	jal x1, -56 /* MW 4 */
	   183      "11110000" // /* MW 3 */
	   184      "10011111" // /* MW 2 */
	   185      "11111100" // /* MW 1 */
.src_ref 2 "stdio.c" 334 11
.return_address
	   186      "00010011" // 	addi x10,x2,-64 /* MW 4 */
	   187      "00000101" // /* MW 3 */
	   188      "00000001" // /* MW 2 */
	   189      "11111100" // /* MW 1 */
.src_ref 2 "stdio.c" 334 4
	   190      "10000011" // 	lw x1,-4(x2) /* MW 4 */
	   191      "00100000" // /* MW 3 */
	   192      "11000001" // /* MW 2 */
	   193      "11111111" // /* MW 1 */
.src_ref 2 "stdio.c" 334 11
	   194      "00000011" // 	lw x10,0(x10) /* MW 4 */
	   195      "00100101" // /* MW 3 */
	   196      "00000101" // /* MW 2 */
	   197      "00000000" // /* MW 1 */
.src_ref 2 "stdio.c" 334 4
	   198      "00010011" // 	addi x2,x2,-72 /* MW 4 */
	   199      "00000001" // /* MW 3 */
	   200      "10000001" // /* MW 2 */
	   201      "11111011" // /* MW 1 */
.src_ref 2 "stdio.c" 334 4
.rts 1
	   202      "01100111" // 	jalr x0, x1, 0 /* MW 4 */
	   203      "10000000" // /* MW 3 */
	   204      "00000000" // /* MW 2 */
	   205      "00000000" // /* MW 1 */
.label printf
.function printf printf
.src_ref 2 "stdio.c" 346 first
.src_ref 2 "stdio.c" 350 13
	   206      "00101110" // 	mv x12, x11 /* MW 2 */
	   207      "10000110" // /* MW 1 */
.src_ref 2 "stdio.c" 350 13 first
	   208      "10000011" // 	lw x11,8(x0) /* MW 4 */
	   209      "00100101" // /* MW 3 */
	   210      "10000000" // /* MW 2 */
	   211      "00000000" // /* MW 1 */
.src_ref 2 "stdio.c" 346 4
	   212      "10010011" // 	addi x13,x2,0 /* MW 4 */
	   213      "00000110" // /* MW 3 */
	   214      "00000001" // /* MW 2 */
	   215      "00000000" // /* MW 1 */
.src_ref 2 "stdio.c" 350 13
.tail_call
	   216      "01101111" // 	jal x0, -86 /* MW 4 */
	   217      "11110000" // /* MW 3 */
	   218      "10111111" // /* MW 2 */
	   219      "11111010" // /* MW 1 */
.dir 0 "%PROCDIR%"
.dir 1 "/home/soc_fs23_13/your_home/ex_asip/my_examples/tzscale/dot_product"
.dir 2 "%PROCDIR%/runtime/src"
