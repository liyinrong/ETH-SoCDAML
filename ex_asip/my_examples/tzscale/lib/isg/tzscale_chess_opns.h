
// File generated by noodle version O-2018.09#f5599cac26#190121, Tue May 28 12:03:13 2024
// Copyright 2014-2018 Synopsys, Inc. All rights reserved.
// noodle -Pc -B -Iisg +wisg -Iruntime/include -D__tct_patch__=300 -D__chess__ -D__programmers_view__ tzscale

#ifdef __chess__
#error "generated native file not intended for compilation by chess"
#endif

#ifndef _tzscale_chess_opns_h
#define _tzscale_chess_opns_h

// Native equivalent of Chess promoted operations

#ifdef CHESS_NATIVE_NAMESPACE
namespace CHESS_NATIVE_NAMESPACE {
#endif

#if 0//!
namespace tzscale_primitive{
    /*inline*/ dint to_dint_se(int);
} //namespace tzscale_primitive
#endif//!
#if 0//!
namespace tzscale_primitive{
    /*inline*/ dint to_dint_ze(int);
} //namespace tzscale_primitive
#endif//!
#if 0//!
namespace tzscale_primitive{
    /*inline*/ int to_int(dint);
} //namespace tzscale_primitive
#endif//!
namespace tzscale_primitive{
unsigned add(unsigned, unsigned);
} //namespace tzscale_primitive
namespace tzscale_primitive{
unsigned sub(unsigned, unsigned);
} //namespace tzscale_primitive
#if 0//!
namespace tzscale_primitive{
    /*inline*/ dint l_add(dint, dint);
} //namespace tzscale_primitive
#endif//!
#if 0//!
namespace tzscale_primitive{
    /*inline*/ dint l_sub(dint, dint);
} //namespace tzscale_primitive
#endif//!
#if 0//!
namespace tzscale_primitive{
    /*inline*/ dint l_and(dint, dint);
} //namespace tzscale_primitive
#endif//!
#if 0//!
namespace tzscale_primitive{
    /*inline*/ dint l_or(dint, dint);
} //namespace tzscale_primitive
#endif//!
#if 0//!
namespace tzscale_primitive{
    /*inline*/ dint l_xor(dint, dint);
} //namespace tzscale_primitive
#endif//!
#if 0//!
namespace tzscale_primitive{
    /*inline*/ dint l_complement(dint);
} //namespace tzscale_primitive
#endif//!
namespace tzscale_primitive{
unsigned mulhu(unsigned, unsigned);
} //namespace tzscale_primitive
namespace tzscale_primitive{
unsigned mul(unsigned, unsigned);
} //namespace tzscale_primitive
#if 0//!
namespace tzscale_primitive{
    /*inline*/ dint l_mul(dint, dint);
} //namespace tzscale_primitive
#endif//!
#if 0//!
namespace tzscale_primitive{
    /*inline*/ bool l_lts(dint, dint);
} //namespace tzscale_primitive
#endif//!
#if 0//!
namespace tzscale_primitive{
    /*inline*/ bool l_les(dint, dint);
} //namespace tzscale_primitive
#endif//!
#if 0//!
namespace tzscale_primitive{
    /*inline*/ bool l_ltu(dint, dint);
} //namespace tzscale_primitive
#endif//!
#if 0//!
namespace tzscale_primitive{
    /*inline*/ bool l_leu(dint, dint);
} //namespace tzscale_primitive
#endif//!
#if 0//!
namespace tzscale_primitive{
    /*inline*/ bool l_eq(dint, dint);
} //namespace tzscale_primitive
#endif//!
#if 0//!
namespace tzscale_primitive{
    /*inline*/ bool l_ne(dint, dint);
} //namespace tzscale_primitive
#endif//!
#if 0//!
namespace tzscale_primitive{
    /*inline*/ dint l_lsl(dint, int);
} //namespace tzscale_primitive
#endif//!
#if 0//!
namespace tzscale_primitive{
    /*inline*/ dint l_asr(dint, int);
} //namespace tzscale_primitive
#endif//!
#if 0//!
namespace tzscale_primitive{
    /*inline*/ dint l_lsr(dint, int);
} //namespace tzscale_primitive
#endif//!
int ext_mac_(int, int, int);
int operator*(v2short, v2short);
int ext_dotp_(v2short, v2short, int);


// do_generate[_native] inline functions

extern long long div_called(long long, long long, chess_output long long &);

    inline long long div_remainder(long long a, long long b, long long &r)
    {
     return div_called(a,b,r);
    }

extern unsigned long long div_called(unsigned long long, unsigned long long, chess_output unsigned long long &);

    inline unsigned long long div_remainder(unsigned long long a, unsigned long long b, unsigned long long &r)
    {
     return div_called(a,b,r);
    }

    inline void float_raise(int flags)
    {
    }

extern unsigned int32_to_float32(int);

extern tzscale_primitive::dint int32_to_float64(int);

extern int float32_to_int32(unsigned);

extern int float32_to_int32_round_to_zero(unsigned);

extern tzscale_primitive::dint float32_to_float64(unsigned);

extern unsigned float32_round_to_int(unsigned);

extern unsigned float32_add(unsigned, unsigned);

extern unsigned float32_sub(unsigned, unsigned);

extern unsigned float32_mul(unsigned, unsigned);

extern unsigned float32_div(unsigned, unsigned);

extern unsigned float32_rem(unsigned, unsigned);

extern unsigned float32_sqrt(unsigned);

extern int float32_eq(unsigned, unsigned);

extern int float32_le(unsigned, unsigned);

extern int float32_lt(unsigned, unsigned);

extern int float32_eq_signaling(unsigned, unsigned);

extern int float32_le_quiet(unsigned, unsigned);

extern int float32_lt_quiet(unsigned, unsigned);

    inline int float32_is_signaling_nan(unsigned a)
    {
     return (a >> 22 & 511) == 510 && a & 4194303;
    }

extern int float64_to_int32(tzscale_primitive::dint);

extern int float64_to_int32_round_to_zero(tzscale_primitive::dint);

extern unsigned float64_to_float32(tzscale_primitive::dint);

extern tzscale_primitive::dint float64_round_to_int(tzscale_primitive::dint);

extern tzscale_primitive::dint float64_add(tzscale_primitive::dint, tzscale_primitive::dint);

extern tzscale_primitive::dint float64_sub(tzscale_primitive::dint, tzscale_primitive::dint);

extern tzscale_primitive::dint float64_mul(tzscale_primitive::dint, tzscale_primitive::dint);

extern tzscale_primitive::dint float64_div(tzscale_primitive::dint, tzscale_primitive::dint);

extern tzscale_primitive::dint float64_rem(tzscale_primitive::dint, tzscale_primitive::dint);

extern tzscale_primitive::dint float64_sqrt(tzscale_primitive::dint);

extern int float64_eq(tzscale_primitive::dint, tzscale_primitive::dint);

extern int float64_le(tzscale_primitive::dint, tzscale_primitive::dint);

extern int float64_lt(tzscale_primitive::dint, tzscale_primitive::dint);

extern int float64_eq_signaling(tzscale_primitive::dint, tzscale_primitive::dint);

extern int float64_le_quiet(tzscale_primitive::dint, tzscale_primitive::dint);

extern int float64_lt_quiet(tzscale_primitive::dint, tzscale_primitive::dint);

    inline int float64_is_signaling_nan(tzscale_primitive::dint a)
    {
     return (a.high >> 19 & 4095) == 4094 && (a.low || a.high & 524287);
    }

    inline int f32_to_i32(unsigned a)
    {
     return float32_to_int32_round_to_zero(a);
    }

    inline unsigned i32_to_f32(int a)
    {
     return int32_to_float32(a);
    }

    inline unsigned f32_add(unsigned a, unsigned b)
    {
     return float32_add(a,b);
    }

    inline unsigned f32_sub(unsigned a, unsigned b)
    {
     return float32_sub(a,b);
    }

    inline unsigned f32_mul(unsigned a, unsigned b)
    {
     return float32_mul(a,b);
    }

    inline unsigned f32_div(unsigned a, unsigned b)
    {
     return float32_div(a,b);
    }

    inline bool f32_le(unsigned a, unsigned b)
    {
     return float32_le(a,b);
    }

    inline bool f32_lt(unsigned a, unsigned b)
    {
     return float32_lt(a,b);
    }

    inline bool f32_eq(unsigned a, unsigned b)
    {
     return float32_eq(a,b);
    }

    inline int f64_to_i32(tzscale_primitive::dint a)
    {
     return float64_to_int32_round_to_zero(a);
    }

    inline tzscale_primitive::dint i32_to_f64(int a)
    {
     return int32_to_float64(a);
    }

    inline tzscale_primitive::dint f32_to_f64(unsigned a)
    {
     return float32_to_float64(a);
    }

    inline unsigned f64_to_f32(tzscale_primitive::dint a)
    {
     return float64_to_float32(a);
    }

    inline tzscale_primitive::dint f64_add(tzscale_primitive::dint a, tzscale_primitive::dint b)
    {
     return float64_add(a,b);
    }

    inline tzscale_primitive::dint f64_sub(tzscale_primitive::dint a, tzscale_primitive::dint b)
    {
     return float64_sub(a,b);
    }

    inline tzscale_primitive::dint f64_mul(tzscale_primitive::dint a, tzscale_primitive::dint b)
    {
     return float64_mul(a,b);
    }

    inline tzscale_primitive::dint f64_div(tzscale_primitive::dint a, tzscale_primitive::dint b)
    {
     return float64_div(a,b);
    }

    inline bool f64_le(tzscale_primitive::dint a, tzscale_primitive::dint b)
    {
     return float64_le(a,b);
    }

    inline bool f64_lt(tzscale_primitive::dint a, tzscale_primitive::dint b)
    {
     return float64_lt(a,b);
    }

    inline bool f64_eq(tzscale_primitive::dint a, tzscale_primitive::dint b)
    {
     return float64_eq(a,b);
    }


#ifdef CHESS_NATIVE_NAMESPACE
} //namespace CHESS_NATIVE_NAMESPACE
#endif

#endif /*_tzscale_chess_opns_h*/
