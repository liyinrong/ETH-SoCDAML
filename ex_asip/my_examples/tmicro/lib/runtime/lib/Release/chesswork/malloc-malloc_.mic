
// File generated by mist version O-2018.09#f5599cac26#190121, Tue May 28 10:41:51 2024
// Copyright 2014-2018 Synopsys, Inc. All rights reserved.
// mist -B -I../../../.. -I../../../../isg -r +f +i malloc-malloc_ tmicro


// m5;   next: m9, jump target: m11 (next offset: 7)
000000  2 0  "0010010000010000"   // (R[0]) = const_8_B1 (0); 
000001  0 0  "0000000000000000"   // /
000002  1 0  "0100000000000010"   // (R[2]) = load_1_B1 (R[0],DM); 
000003  1 0  "0011000000000011"   // (R[3]) = const_7_B2 (); 
000004  1 0  "0101000000100000"   // (SP) = wr_res_reg__pl_rd_res_reg_const_1_B2 (2,SP,SP); 
000005  1 0  "0001101001010011"   // (CND) = _ne_2_B1 (R[2],R[3]); 
000006  1 0  "0010111100000111"   // () = jump_const_2_B1 (CND,7); 

// m9;   next: m10 (next offset: 11)
000007  1 0  "0111111111111011"   // (__spill_DM[-1]) = stack_store_bndl_B1 (LR,SP,-1); 
000008  1 0  "0111111111100001"   // (__spill_DM[-2]) = stack_store_bndl_B1 (R[1],SP,-2); 
000009  2 0  "0010111010011000"   // (LR) = bsr_const_1_B1 (0); 
000010  0 0  "0000000000000000"   // /

// m10 subroutine call;   next: m60 (next offset: 11)

// m60;   next: m13 (next offset: 15)
000011  2 0  "0010010000010000"   // (R[0]) = const_8_B1 (0); 
000012  0 0  "0000000000000000"   // /
000013  1 0  "0110111111100001"   // (R[1]) = stack_load_bndl_B1 (__spill_DM[-2],SP,-2); 
000014  1 0  "0110111111111011"   // (LR) = stack_load_bndl_B1 (__spill_DM[-1],SP,-1); 

// m11;   next: m13 (next offset: 15)

// m13;   next: m17 (next offset: 24)
000015  1 0  "0011000001000010"   // (R[2]) = const_2_B2 (); 
000016  1 0  "0000000001001010"   // (R[1],) = _pl_2_B1 (R[1],R[2]); 
000017  1 0  "0011000000100010"   // (R[2]) = const_4_B2 (); 
000018  1 0  "0001001010001010"   // (R[2]) = _rs_1_B1 (R[1],R[2]); 
000019  1 0  "0100000000000001"   // (R[1]) = load_1_B1 (R[0],DM); 
000020  1 0  "0111111111110010"   // (__spill_DM[-1]) = stack_store_bndl_B1 (R[2],SP,-1); 
000021  1 0  "0111111111100001"   // (__spill_DM[-2]) = stack_store_bndl_B1 (R[1],SP,-2); 
000022  2 0  "0010010000010000"   // (R[0]) = const_6_B1 (); 
000023  0 0  "1000000000000000"   // /

// m17;   next: m23, jump target: m24 (next offset: 31)
000024  1 0  "0100000001010010" .loop_nesting 1    // (R[1],R[2]) = _pl_const_1_B1 (R[1]); 
000025  1 0  "0100000001000001"   // (R[1]) = load_1_B1 (R[1],DM); 
000026  1 0  "0110111111100010"   // (R[2]) = stack_load_bndl_B1 (__spill_DM[-2],SP,-2); 
000027  1 0  "0001101001001010"   // (CND) = _ne_2_B1 (R[1],R[2]); 
000028  2 0  "0010010000010010"   // (R[2]) = const_5_B1 (); 
000029  0 0  "0111111111111111"   // /
000030  1 0  "0010111100000010"   // () = jump_const_2_B1 (CND,2); 

// m23 (next offset: 34)
000031  1 0  "0010111011000000"   // () = ret_1_B1 (LR); 
000032  1 0  "0011000000000000"   // (R[0]) = const_7_B2 (); 
000033  1 0  "0101111111100000"   // (SP) = wr_res_reg__pl_rd_res_reg_const_1_B2 (-2,SP,SP); 

// m24;   next: m26 (next offset: 34)

// m26;   next: m33 (next offset: 37)
000034  1 0  "0100000001000011"   // (R[3]) = load_2_B1 (R[1],DM); 
000035  1 0  "0000100010010011"   // (R[2]) = _ad_1_B1 (R[3],R[2]); 
000036  1 0  "0011000000100101"   // (R[5]) = const_4_B2 (); 

// m33;   next: m38, jump target: m2 (next offset: 46)
000037  1 0  "0001010011010101" .loop_nesting 2    // (R[3]) = _ls_1_B1 (R[2],R[5]); 
000038  1 0  "0000000011001011"   // (R[3],) = _pl_1_B1 (R[1],R[3]); 
000039  1 0  "0011000000000101"   // (R[5]) = const_3_B2 (); 
000040  1 0  "0100000011010100"   // (R[4],R[3]) = load__pl_const_2_B1 (R[3],DM); 
000041  1 0  "0000100110000100"   // (R[6]) = _ad_1_B1 (R[4],R[0]); 
000042  1 0  "0001101001110101"   // (CND) = _ne_1_B1 (R[6],R[5]); 
000043  2 0  "0010010000010101"   // (R[5]) = const_5_B1 (); 
000044  0 0  "0111111111111111"   // /
000045  1 0  "0010111100001110"   // () = jump_const_2_B1 (CND,14); 

// m38;   next: m40 (next offset: 46)

// m40, jump target: m33 (next offset: 61)
000046  1 0  "0000100100100101"   // (R[4]) = _ad_1_B1 (R[4],R[5]); 
000047  1 0  "0000000010010100"   // (R[2],) = _pl_2_B1 (R[2],R[4]); 
000048  1 0  "0010010101000011"   // R[4] = R[3]; 
000049  1 0  "0100000011010101"   // (R[5],R[3]) = load__pl_const_1_B1 (R[3],DM); 
000050  1 0  "0100000011000110"   // (R[6]) = load_1_B1 (R[3],DM); 
000051  1 0  "0100001001000010"   // (DM) = store_2_B1 (R[2],R[1],DM); 
000052  1 0  "0010111000000000" .swstall "dm_addr_conflict"   // () = vd_nop_E1 (); 
000053  1 0  "0100000110010111"   // (R[6],R[7]) = _pl_const_1_B1 (R[6]); 
000054  1 0  "0100001110000101"   // (DM) = store_1_B1 (R[5],R[6],DM); 
000055  1 0  "0011000000100101"   // (R[5]) = const_4_B2 (); 
000056  1 0  "0100000100000100"   // (R[4]) = load_1_B1 (R[4],DM); 
000057  1 0  "0100000011000011"   // (R[3]) = load_1_B1 (R[3],DM); 
000058  1 0  "0000000100100101"   // (R[4],) = _pl_1_B1 (R[4],R[5]); 
000059  1 0  "0010110011101001"   // () = jump_const_1_B1 (-23); 
000060  1 0  "0100001100000011"   // (DM) = store_1_B1 (R[3],R[4],DM); 

// m2;   next: m46 (next offset: 61)

// m46;   next: m48, jump target: m17 (next offset: 64)
000061  1 0  "0110111111110011" .loop_nesting 1    // (R[3]) = stack_load_bndl_B1 (__spill_DM[-1],SP,-1); 
000062  1 0  "0000111000010011"   // (CND) = _lt_1_B1 (R[2],R[3]); 
000063  1 0  "0010111111010111"   // () = jump_const_2_B1 (CND,-41); 

// m48;   next: m51, jump target: m52 (next offset: 67)
000064  1 0  "0110111111110101" .loop_nesting 0    // (R[5]) = stack_load_bndl_B1 (__spill_DM[-1],SP,-1); 
000065  1 0  "0000111010010101"   // (CND) = _le_1_B1 (R[2],R[5]); 
000066  1 0  "0010111100010101"   // () = jump_const_2_B1 (CND,21); 

// m51, jump target: m56 (next offset: 89)
000067  1 0  "0000010111010101"   // (R[7],CB) = _mi_1_B1 (R[2],R[5]); 
000068  1 0  "0110111111100011"   // (R[3]) = stack_load_bndl_B1 (__spill_DM[-2],SP,-2); 
000069  1 0  "0010010100100011"   // R[2] = R[3]; 
000070  1 0  "0100000011010100"   // (R[3],R[4]) = _pl_const_1_B1 (R[3]); 
000071  1 0  "0011000000100100"   // (R[4]) = const_4_B2 (); 
000072  1 0  "0001010101101100"   // (R[5]) = _ls_1_B1 (R[5],R[4]); 
000073  1 0  "0000000101001101"   // (R[5],) = _pl_1_B1 (R[1],R[5]); 
000074  1 0  "0010010101100101"   // R[6] = R[5]; 
000075  1 0  "0100001101010111"   // (R[5],DM) = store__pl_const_1_B1 (R[7],R[5],DM); 
000076  1 0  "0010111000000000" .swstall "dm_addr_conflict"   // () = vd_nop_E1 (); 
000077  1 0  "0100000011000111"   // (R[7]) = load_1_B1 (R[3],DM); 
000078  1 0  "0000000111100111"   // (R[7],) = _pl_1_B1 (R[7],R[4]); 
000079  1 0  "0010111000000000" .swstall "read_after_write_R"   // () = vd_nop_E1 (); 
000080  1 0  "0100001111000110"   // (DM) = store_1_B1 (R[6],R[7],DM); 
000081  1 0  "0010111000000000" .swstall "dm_addr_conflict"   // () = vd_nop_E1 (); 
000082  1 0  "0100000011000110"   // (R[6]) = load_1_B1 (R[3],DM); 
000083  1 0  "0100001101010110"   // (R[5],DM) = store__pl_const_2_B1 (R[6],R[5],DM); 
000084  1 0  "0100001101000010"   // (DM) = store_1_B1 (R[2],R[5],DM); 
000085  1 0  "0011111111100010"   // (R[2]) = const_1_B2 (); 
000086  1 0  "0000000010010101"   // (R[2],) = _pl_1_B1 (R[5],R[2]); 
000087  1 0  "0010110000000010"   // () = jump_const_1_B1 (2); 
000088  1 0  "0100001011000010"   // (DM) = store_1_B1 (R[2],R[3],DM); 

// m52;   next: m56 (next offset: 90)
000089  1 0  "0011000000100100"   // (R[4]) = const_4_B2 (); 

// m56 (next offset: /)
000090  1 0  "0010111000000000" .swstall "dm_addr_conflict"   // () = vd_nop_E1 (); 
000091  1 0  "0110111111110010"   // (R[2]) = stack_load_bndl_B1 (__spill_DM[-1],SP,-1); 
000092  1 0  "0000101000000010"   // (R[0]) = _or_1_B1 (R[2],R[0]); 
000093  1 0  "0100001001010000"   // (R[1],DM) = store__pl_const_1_B1 (R[0],R[1],DM); 
000094  1 0  "0010010100000001"   // R[0] = R[1]; 
000095  1 0  "0100000001010010"   // (R[2],R[1]) = load__pl_const_1_B1 (R[1],DM); 
000096  1 0  "0100000001000011"   // (R[3]) = load_1_B1 (R[1],DM); 
000097  1 0  "0010111000000000" .swstall "read_after_write_R"   // () = vd_nop_E1 (); 
000098  1 0  "0100000011010101"   // (R[3],R[5]) = _pl_const_1_B1 (R[3]); 
000099  1 0  "0100001011000010"   // (DM) = store_1_B1 (R[2],R[3],DM); 
000100  1 0  "0010111000000000" .swstall "dm_addr_conflict"   // () = vd_nop_E1 (); 
000101  1 0  "0100000000000010"   // (R[2]) = load_1_B1 (R[0],DM); 
000102  1 0  "0100000001000001"   // (R[1]) = load_1_B1 (R[1],DM); 
000103  1 0  "0000000010010100"   // (R[2],) = _pl_1_B1 (R[2],R[4]); 
000104  1 0  "0010111011000000"   // () = ret_1_B1 (LR); 
000105  1 0  "0100001010000001"   // (DM) = store_1_B1 (R[1],R[2],DM); 
000106  1 0  "0101111111100000"   // (SP) = wr_res_reg__pl_rd_res_reg_const_1_B2 (-2,SP,SP); 

