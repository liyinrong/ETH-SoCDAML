
# Tcl script for generating instruction codes needed by debug client
# Usage: tct_tclsh ins2c.tcl


set LIBDIR ../lib
set PROC tmicro
set GODIR ../hdl/${PROC}_vlog

# Get the opcodes as generated by Go
set opcodes [file join $GODIR pdc_opcodes.h]
if {![file exists $opcodes]} {
    puts stderr "Could not find file '$opcodes', run Go and re-run this script afterwards."
    exit 1
}
file copy -force $opcodes .

# Assemble and disassemble the register moves
set cmd [list chesscc +a -P $LIBDIR -o pdc_register_moves.x pdc_register_moves.s -p $PROC]
if {[catch {exec -ignorestderr {*}$cmd} msg errd]} {
    puts stderr "Could not assemble 'pdc_register_moves.s'."
    puts stderr "Failing command: $cmd"
    exit 1
}

set cmd [list chesscc +d +Wdarts,+Ihex -P $LIBDIR -o pdc_register_moves.dis pdc_register_moves.x -p $PROC]
if {[catch {exec -ignorestderr {*}$cmd} msg]} {
    puts stderr "Could not disassemble 'pdc_register_moves.x'."
    puts stderr "Failing command: $cmd"
    exit 1
}

# Extract the register moves
set f [open pdc_register_moves.c w]

puts $f "";
puts $f "/*";
puts $f "-- File : pdc_register_moves.c";
puts $f "--";
puts $f "-- Contents : Tables with processor specific register move instruction codes.";
puts $f "--";
puts $f "-- NOTE: this file is generated AUTOMATICALLY from the file pdc_register_moves.s";
puts $f "--       using the commands in makefile.ins";
puts $f "*/";
puts $f "";
puts $f "";
puts $f "#include \"pdc_commands.h\" ";
puts $f "";
puts $f "void pdc_commands::init_reg_move_codes() {";

set d [open pdc_register_moves.dis r]
set ll [split [read $d] \n]
close $d

foreach l $ll {
    if {[regexp {(0x[[:xdigit:]]+).*mv dbg,([^[:space:]]+)} $l - instr reg]} {
        puts $f "    reg_get_code\[\"$reg\"\] = $instr;"
    }
    if {[regexp {(0x[[:xdigit:]]+).*mv ([^[:space:],]+),dbg} $l - instr reg]} {
        puts $f "    reg_put_code\[\"$reg\"\] = $instr;"
    }
    if {[regexp {(0x[[:xdigit:]]+).*ji r0} $l - instr]} {
        puts $f "    goto_r0_code = $instr;"
    }
    if {[regexp {(0x[[:xdigit:]]+).*swbrk} $l - instr]} {
        puts $f "    core_sw_break_instr = $instr;"
    }
}

puts $f "}";
close $f
